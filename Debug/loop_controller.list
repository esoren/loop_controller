
loop_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea8  08006ea8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb0  08006eb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000416c  20000010  08006ec8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  08006ec8  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019835  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a34  00000000  00000000  00039875  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e7f  00000000  00000000  0003fae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128c8  00000000  00000000  00058967  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a437  00000000  00000000  0006b22f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  001056e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dfc 	.word	0x08006dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006dfc 	.word	0x08006dfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0x98>)
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_ADC1_Init+0x9c>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ADC1_Init+0x98>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ADC1_Init+0x98>)
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_ADC1_Init+0xa0>)
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_ADC1_Init+0x98>)
 800053e:	2201      	movs	r2, #1
 8000540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0x98>)
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <MX_ADC1_Init+0x98>)
 8000552:	f001 f91d 	bl	8001790 <HAL_ADC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800055c:	f000 fa52 	bl	8000a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0x98>)
 8000572:	f001 f951 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800057c:	f000 fa42 	bl	8000a04 <Error_Handler>
  }

}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20003fcc 	.word	0x20003fcc
 800058c:	40012000 	.word	0x40012000
 8000590:	0f000001 	.word	0x0f000001

08000594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <HAL_ADC_MspInit+0x7c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d127      	bne.n	8000606 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c4:	6453      	str	r3, [r2, #68]	; 0x44
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <HAL_ADC_MspInit+0x84>)
 8000602:	f001 fc09 	bl	8001e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40012000 	.word	0x40012000
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000

0800061c <debugPrintln>:
 *      Author: Eric
 */

#include "usart.h"

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000626:	6838      	ldr	r0, [r7, #0]
 8000628:	f7ff fdda 	bl	80001e0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	230a      	movs	r3, #10
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f003 fee0 	bl	80043fa <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800063a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800063e:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000640:	f107 010c 	add.w	r1, r7, #12
 8000644:	230a      	movs	r3, #10
 8000646:	2202      	movs	r2, #2
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f003 fed6 	bl	80043fa <HAL_UART_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <vApplicationGetIdleTaskMemory+0x2c>)
 8000668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <vApplicationGetIdleTaskMemory+0x30>)
 800066e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000002c 	.word	0x2000002c
 8000688:	20000080 	.word	0x20000080

0800068c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08e      	sub	sp, #56	; 0x38
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


	xMotorQueue = xQueueCreate(30, sizeof(motorMessage_t));
 8000692:	2200      	movs	r2, #0
 8000694:	2108      	movs	r1, #8
 8000696:	201e      	movs	r0, #30
 8000698:	f004 fcaa 	bl	8004ff0 <xQueueGenericCreate>
 800069c:	4602      	mov	r2, r0
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_FREERTOS_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_FREERTOS_Init+0x6c>)
 80006a4:	f107 041c 	add.w	r4, r7, #28
 80006a8:	461d      	mov	r5, r3
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fb1a 	bl	8004cf6 <osThreadCreate>
 80006c2:	4602      	mov	r2, r0
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_FREERTOS_Init+0x70>)
 80006c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_FREERTOS_Init+0x74>)
 80006ca:	463c      	mov	r4, r7
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80006da:	463b      	mov	r3, r7
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fb09 	bl	8004cf6 <osThreadCreate>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_FREERTOS_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	; 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000401c 	.word	0x2000401c
 80006f8:	08006e20 	.word	0x08006e20
 80006fc:	20004014 	.word	0x20004014
 8000700:	08006e48 	.word	0x08006e48
 8000704:	20004018 	.word	0x20004018

08000708 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  uint8_t first_run = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	77fb      	strb	r3, [r7, #31]
  motorMessage_t motorMessage;
  BaseType_t xStatus;
  uint8_t manual_run = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	77bb      	strb	r3, [r7, #30]
  uint32_t manual_step = 25000;
 8000718:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800071c:	61bb      	str	r3, [r7, #24]
  {




		if(manual_run) {
 800071e:	7fbb      	ldrb	r3, [r7, #30]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00e      	beq.n	8000742 <StartDefaultTask+0x3a>
				motorMessage.motorCommand = MOVE_TO_POSITION;
 8000724:	2302      	movs	r3, #2
 8000726:	733b      	strb	r3, [r7, #12]
				motorMessage.steps = manual_step;
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	613b      	str	r3, [r7, #16]

				xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <StartDefaultTask+0x84>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	f107 010c 	add.w	r1, r7, #12
 8000734:	2300      	movs	r3, #0
 8000736:	2200      	movs	r2, #0
 8000738:	f004 fcb8 	bl	80050ac <xQueueGenericSend>
 800073c:	6178      	str	r0, [r7, #20]

				if (xStatus != pdPASS) {
					//todo: add an assert or wait
				}
				manual_run = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	77bb      	strb	r3, [r7, #30]
	}


	if(first_run) {
 8000742:	7ffb      	ldrb	r3, [r7, #31]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d01c      	beq.n	8000782 <StartDefaultTask+0x7a>
		motorMessage.motorCommand = HOME;
 8000748:	2301      	movs	r3, #1
 800074a:	733b      	strb	r3, [r7, #12]
		motorMessage.steps = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <StartDefaultTask+0x84>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f107 010c 	add.w	r1, r7, #12
 8000758:	2300      	movs	r3, #0
 800075a:	2200      	movs	r2, #0
 800075c:	f004 fca6 	bl	80050ac <xQueueGenericSend>
 8000760:	6178      	str	r0, [r7, #20]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		motorMessage.motorCommand = MOVE_TO_POSITION;
 8000762:	2302      	movs	r3, #2
 8000764:	733b      	strb	r3, [r7, #12]
		motorMessage.steps = 19000;
 8000766:	f644 2338 	movw	r3, #19000	; 0x4a38
 800076a:	613b      	str	r3, [r7, #16]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <StartDefaultTask+0x84>)
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 010c 	add.w	r1, r7, #12
 8000774:	2300      	movs	r3, #0
 8000776:	2200      	movs	r2, #0
 8000778:	f004 fc98 	bl	80050ac <xQueueGenericSend>
 800077c:	6178      	str	r0, [r7, #20]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		first_run = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	77fb      	strb	r3, [r7, #31]

  	}

      osDelay(50);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f004 fb03 	bl	8004d8e <osDelay>
		if(manual_run) {
 8000788:	e7c9      	b.n	800071e <StartDefaultTask+0x16>
 800078a:	bf00      	nop
 800078c:	2000401c 	.word	0x2000401c

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a42      	ldr	r2, [pc, #264]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a3b      	ldr	r2, [pc, #236]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_GPIO_Init+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_GPIO_Init+0x128>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <MX_GPIO_Init+0x128>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_GPIO_Init+0x128>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7104 	mov.w	r1, #528	; 0x210
 800081c:	4827      	ldr	r0, [pc, #156]	; (80008bc <MX_GPIO_Init+0x12c>)
 800081e:	f001 fc7d 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	4825      	ldr	r0, [pc, #148]	; (80008c0 <MX_GPIO_Init+0x130>)
 800082a:	f001 fc77 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_PWR_Pin|MOTOR_CS_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000834:	4823      	ldr	r0, [pc, #140]	; (80008c4 <MX_GPIO_Init+0x134>)
 8000836:	f001 fc71 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_GPIO_Init+0x138>)
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_GPIO_Init+0x130>)
 8000850:	f001 fae2 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 8000854:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_GPIO_Init+0x12c>)
 800086e:	f001 fad3 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 8000872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_GPIO_Init+0x130>)
 800088c:	f001 fac4 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TMC_PWR_Pin|MOTOR_CS_Pin;
 8000890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_GPIO_Init+0x134>)
 80008aa:	f001 fab5 	bl	8001e18 <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	10210000 	.word	0x10210000

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 fefa 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f818 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f7ff ff5a 	bl	8000790 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008dc:	f000 f9b8 	bl	8000c50 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008e0:	f000 fe56 	bl	8001590 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008e4:	f7ff fe04 	bl	80004f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80008e8:	f000 fb28 	bl	8000f3c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ec:	f000 fbca 	bl	8001084 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  enable_motor_driver();
 80008f0:	f000 f88c 	bl	8000a0c <enable_motor_driver>
  tmc_init();
 80008f4:	f000 fde2 	bl	80014bc <tmc_init>

  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 80008f8:	2003      	movs	r0, #3
 80008fa:	f001 fa58 	bl	8001dae <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80008fe:	f7ff fec5 	bl	800068c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000902:	f004 f9f1 	bl	8004ce8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000906:	e7fe      	b.n	8000906 <main+0x3a>

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 fa67 	bl	8006dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <SystemClock_Config+0xd0>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <SystemClock_Config+0xd0>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <SystemClock_Config+0xd0>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <SystemClock_Config+0xd4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <SystemClock_Config+0xd4>)
 8000956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <SystemClock_Config+0xd4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	2310      	movs	r3, #16
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000978:	2300      	movs	r3, #0
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800097c:	2310      	movs	r3, #16
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000980:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000986:	2304      	movs	r3, #4
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800098a:	2307      	movs	r3, #7
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fbdc 	bl	8002150 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800099e:	f000 f831 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fe36 	bl	8002630 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ca:	f000 f81b 	bl	8000a04 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	; 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 fe8b 	bl	800170c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40000c00 	.word	0x40000c00

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x4>
	...

08000a0c <enable_motor_driver>:

//extern QueueHandle_t xMotorQueue;

QueueHandle_t xMotorQueue;

void enable_motor_driver(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2110      	movs	r1, #16
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <enable_motor_driver+0x14>)
 8000a16:	f001 fb81 	bl	800211c <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020000 	.word	0x40020000

08000a24 <set_motor_dir>:
void disable_motor_driver(void) {
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
}


void set_motor_dir(uint8_t motor_dir) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	if(motor_dir == 0) {
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d106      	bne.n	8000a42 <set_motor_dir+0x1e>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <set_motor_dir+0x34>)
 8000a3c:	f001 fb6e 	bl	800211c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
	}
}
 8000a40:	e005      	b.n	8000a4e <set_motor_dir+0x2a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <set_motor_dir+0x34>)
 8000a4a:	f001 fb67 	bl	800211c <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40020000 	.word	0x40020000

08000a5c <send_motor_steps>:

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim1, step_count);
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <send_motor_steps+0x58>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <send_motor_steps+0x58>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <send_motor_steps+0x58>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <send_motor_steps+0x58>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f042 0201 	orr.w	r2, r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <send_motor_steps+0x58>)
 8000a88:	f002 fb3a 	bl	8003100 <HAL_TIM_OC_Start_IT>

	__HAL_TIM_SET_AUTORELOAD(&htim2,delay_in_us);
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <send_motor_steps+0x5c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <send_motor_steps+0x5c>)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <send_motor_steps+0x5c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2264      	movs	r2, #100	; 0x64
 8000aa0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <send_motor_steps+0x5c>)
 8000aa6:	f002 fc67 	bl	8003378 <HAL_TIM_PWM_Start>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200040b8 	.word	0x200040b8
 8000ab8:	200040f8 	.word	0x200040f8

08000abc <stop_motor>:


void stop_motor() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <stop_motor+0x18>)
 8000ac4:	f002 fc8a 	bl	80033dc <HAL_TIM_PWM_Stop>
	  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <stop_motor+0x1c>)
 8000acc:	f002 fb90 	bl	80031f0 <HAL_TIM_OC_Stop_IT>
	  return;
 8000ad0:	bf00      	nop
}
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200040f8 	.word	0x200040f8
 8000ad8:	200040b8 	.word	0x200040b8

08000adc <StartMotorTask>:

void StartMotorTask(void const *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	motorMessage_t motorMessage;
	BaseType_t xStatus;
	uint8_t homing = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t start_movement = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t moving = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint32_t current_position_in_steps = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t target_position_in_steps = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t next_target_position_in_steps = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t step_delta = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
	for(;;)
	  {


		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000b06:	4b4e      	ldr	r3, [pc, #312]	; (8000c40 <StartMotorTask+0x164>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fd38 	bl	8005580 <uxQueueMessagesWaiting>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d02d      	beq.n	8000b72 <StartMotorTask+0x96>
			xStatus = xQueueReceive(xMotorQueue, &motorMessage, 0);
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <StartMotorTask+0x164>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fc51 	bl	80053c8 <xQueueReceive>
 8000b26:	61f8      	str	r0, [r7, #28]
			if (xStatus == pdPASS) {
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d121      	bne.n	8000b72 <StartMotorTask+0x96>

				switch (motorMessage.motorCommand) {
 8000b2e:	7b3b      	ldrb	r3, [r7, #12]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d009      	beq.n	8000b48 <StartMotorTask+0x6c>
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d00d      	beq.n	8000b54 <StartMotorTask+0x78>
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d11a      	bne.n	8000b72 <StartMotorTask+0x96>
					case (HOME):
						target_position_in_steps = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
						homing = 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8000b46:	e014      	b.n	8000b72 <StartMotorTask+0x96>
					case(MOVE_TO_POSITION):
						next_target_position_in_steps = motorMessage.steps;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
						start_movement = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						break;
 8000b52:	e00e      	b.n	8000b72 <StartMotorTask+0x96>
					case(STOP_MOTOR):
						if(!homing) {
 8000b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <StartMotorTask+0x94>
							moving = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							current_position_in_steps = target_position_in_steps; //todo: check the status of the counter and adjust, if necessary
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
							debugPrintln(&huart2, "Motor Stopped.");
 8000b66:	4937      	ldr	r1, [pc, #220]	; (8000c44 <StartMotorTask+0x168>)
 8000b68:	4837      	ldr	r0, [pc, #220]	; (8000c48 <StartMotorTask+0x16c>)
 8000b6a:	f7ff fd57 	bl	800061c <debugPrintln>
						}
						break;
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
			} else {
				//todo: error handling
			}
		}

		if(homing) { //todo: make this non-blocking
 8000b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d037      	beq.n	8000bea <StartMotorTask+0x10e>
			set_motor_dir(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff52 	bl	8000a24 <set_motor_dir>
			uint32_t wait = 20000;
 8000b80:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b84:	61bb      	str	r3, [r7, #24]
			uint32_t at_home_position = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
			uint8_t status = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	75fb      	strb	r3, [r7, #23]

			while(homing) {
 8000b8e:	e027      	b.n	8000be0 <StartMotorTask+0x104>
			  if(!at_home_position) {
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d124      	bne.n	8000be0 <StartMotorTask+0x104>
				  send_motor_steps(60000,wait);
 8000b96:	69b9      	ldr	r1, [r7, #24]
 8000b98:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000b9c:	f7ff ff5e 	bl	8000a5c <send_motor_steps>
				  HAL_Delay(50); //wait for motor to settle before checking the stall result
 8000ba0:	2032      	movs	r0, #50	; 0x32
 8000ba2:	f000 fdd3 	bl	800174c <HAL_Delay>

				  status = tmc_get_status();
 8000ba6:	f000 fba3 	bl	80012f0 <tmc_get_status>
 8000baa:	4603      	mov	r3, r0
 8000bac:	75fb      	strb	r3, [r7, #23]
				  if((status >> 2) & 0x01) { //if stall is detected
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d011      	beq.n	8000be0 <StartMotorTask+0x104>
					  at_home_position = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
					  homing = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					  current_position_in_steps = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
					  target_position_in_steps = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
					  moving = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  stop_motor();
 8000bd4:	f7ff ff72 	bl	8000abc <stop_motor>
					  debugPrintln(&huart2, "At Home Position.");
 8000bd8:	491c      	ldr	r1, [pc, #112]	; (8000c4c <StartMotorTask+0x170>)
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <StartMotorTask+0x16c>)
 8000bdc:	f7ff fd1e 	bl	800061c <debugPrintln>
			while(homing) {
 8000be0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1d3      	bne.n	8000b90 <StartMotorTask+0xb4>
 8000be8:	e026      	b.n	8000c38 <StartMotorTask+0x15c>
				  }
			  }
			}

		} else {
			if(start_movement && !moving) {
 8000bea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d022      	beq.n	8000c38 <StartMotorTask+0x15c>
 8000bf2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d11e      	bne.n	8000c38 <StartMotorTask+0x15c>
				target_position_in_steps = next_target_position_in_steps;
 8000bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
				step_delta = target_position_in_steps - current_position_in_steps;
 8000bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	623b      	str	r3, [r7, #32]
				if(step_delta > 0) {
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd03      	ble.n	8000c14 <StartMotorTask+0x138>
						set_motor_dir(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff ff09 	bl	8000a24 <set_motor_dir>
 8000c12:	e002      	b.n	8000c1a <StartMotorTask+0x13e>
				} else {
						set_motor_dir(0);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff ff05 	bl	8000a24 <set_motor_dir>
				}

				send_motor_steps(  abs(step_delta)  , 20000);
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bfb8      	it	lt
 8000c20:	425b      	neglt	r3, r3
 8000c22:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff18 	bl	8000a5c <send_motor_steps>
				moving = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				start_movement = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36





	    osDelay(100);
 8000c38:	2064      	movs	r0, #100	; 0x64
 8000c3a:	f004 f8a8 	bl	8004d8e <osDelay>
		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000c3e:	e762      	b.n	8000b06 <StartMotorTask+0x2a>
 8000c40:	2000401c 	.word	0x2000401c
 8000c44:	08006e64 	.word	0x08006e64
 8000c48:	20004138 	.word	0x20004138
 8000c4c:	08006e74 	.word	0x08006e74

08000c50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2238      	movs	r2, #56	; 0x38
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f001 fee9 	bl	8002a78 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f7ff feaa 	bl	8000a04 <Error_Handler>
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20004020 	.word	0x20004020
 8000cb8:	40013000 	.word	0x40013000

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_SPI_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d16:	23e0      	movs	r3, #224	; 0xe0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_SPI_MspInit+0x8c>)
 8000d32:	f001 f871 	bl	8001e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_MspInit+0x54>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <HAL_MspInit+0x54>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x54>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_MspInit+0x54>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_MspInit+0x54>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x54>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f001 f817 	bl	8001dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	2032      	movs	r0, #50	; 0x32
 8000dba:	f001 f803 	bl	8001dc4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000dbe:	2032      	movs	r0, #50	; 0x32
 8000dc0:	f001 f81c 	bl	8001dfc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_InitTick+0xa4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <HAL_InitTick+0xa4>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_InitTick+0xa4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de0:	f107 0210 	add.w	r2, r7, #16
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fe12 	bl	8002a14 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000df0:	f001 fde8 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8000df4:	4603      	mov	r3, r0
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <HAL_InitTick+0xa8>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	0c9b      	lsrs	r3, r3, #18
 8000e04:	3b01      	subs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_InitTick+0xac>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <HAL_InitTick+0xb0>)
 8000e0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_InitTick+0xac>)
 8000e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e14:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_InitTick+0xac>)
 8000e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_InitTick+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_InitTick+0xac>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <HAL_InitTick+0xac>)
 8000e2a:	f002 f8e5 	bl	8002ff8 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d104      	bne.n	8000e3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <HAL_InitTick+0xac>)
 8000e36:	f002 f90a 	bl	800304e <HAL_TIM_Base_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3730      	adds	r7, #48	; 0x30
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	20004078 	.word	0x20004078
 8000e54:	40000c00 	.word	0x40000c00

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  motorMessage_t motorMessage;
  BaseType_t xStatus;


  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000e92:	2108      	movs	r1, #8
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000e96:	f002 faa1 	bl	80033dc <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000e9c:	f002 faea 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000ea4:	f002 f9a4 	bl	80031f0 <HAL_TIM_OC_Stop_IT>


  motorMessage.motorCommand = STOP_MOTOR;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	713b      	strb	r3, [r7, #4]
  motorMessage.steps = 0; //not used
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]

  xStatus = xQueueSendToFrontFromISR(xMotorQueue, &motorMessage, 0); //todo: consider if this should go to front of queue
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	1d39      	adds	r1, r7, #4
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f004 f9f1 	bl	80052a0 <xQueueGenericSendFromISR>
 8000ebe:	60f8      	str	r0, [r7, #12]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200040f8 	.word	0x200040f8
 8000ecc:	200040b8 	.word	0x200040b8
 8000ed0:	2000401c 	.word	0x2000401c

08000ed4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000eda:	f002 facb 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200040b8 	.word	0x200040b8

08000ee8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <TIM1_CC_IRQHandler+0x10>)
 8000eee:	f002 fac1 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 // HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200040b8 	.word	0x200040b8

08000efc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM5_IRQHandler+0x10>)
 8000f02:	f002 fab7 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20004078 	.word	0x20004078

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <SystemInit+0x28>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <SystemInit+0x28>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SystemInit+0x28>)
 8000f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b096      	sub	sp, #88	; 0x58
 8000f40:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 ff37 	bl	8006dea <memset>

  htim1.Instance = TIM1;
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <MX_TIM1_Init+0x140>)
 8000f7e:	4a40      	ldr	r2, [pc, #256]	; (8001080 <MX_TIM1_Init+0x144>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_TIM1_Init+0x140>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b3c      	ldr	r3, [pc, #240]	; (800107c <MX_TIM1_Init+0x140>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_TIM1_Init+0x140>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <MX_TIM1_Init+0x140>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <MX_TIM1_Init+0x140>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <MX_TIM1_Init+0x140>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa6:	4835      	ldr	r0, [pc, #212]	; (800107c <MX_TIM1_Init+0x140>)
 8000fa8:	f002 f826 	bl	8002ff8 <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fb2:	f7ff fd27 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000fb6:	4831      	ldr	r0, [pc, #196]	; (800107c <MX_TIM1_Init+0x140>)
 8000fb8:	f002 f86d 	bl	8003096 <HAL_TIM_OC_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000fc2:	f7ff fd1f 	bl	8000a04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000fca:	2370      	movs	r3, #112	; 0x70
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	653b      	str	r3, [r7, #80]	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000fda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4826      	ldr	r0, [pc, #152]	; (800107c <MX_TIM1_Init+0x140>)
 8000fe2:	f002 fd2c 	bl	8003a3e <HAL_TIM_SlaveConfigSynchro>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000fec:	f7ff fd0a 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	481f      	ldr	r0, [pc, #124]	; (800107c <MX_TIM1_Init+0x140>)
 8001000:	f003 f8da 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800100a:	f7ff fcfb 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4812      	ldr	r0, [pc, #72]	; (800107c <MX_TIM1_Init+0x140>)
 8001034:	f002 fb26 	bl	8003684 <HAL_TIM_OC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800103e:	f7ff fce1 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM1_Init+0x140>)
 8001066:	f003 f915 	bl	8004294 <HAL_TIMEx_ConfigBreakDeadTime>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001070:	f7ff fcc8 	bl	8000a04 <Error_Handler>
  }

}
 8001074:	bf00      	nop
 8001076:	3758      	adds	r7, #88	; 0x58
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200040b8 	.word	0x200040b8
 8001080:	40010000 	.word	0x40010000

08001084 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_TIM2_Init+0xe8>)
 80010b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <MX_TIM2_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_TIM2_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <MX_TIM2_Init+0xe8>)
 80010ca:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_TIM2_Init+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <MX_TIM2_Init+0xe8>)
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_TIM2_Init+0xe8>)
 80010de:	f001 ff8b 	bl	8002ff8 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010e8:	f7ff fc8c 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f6:	4619      	mov	r1, r3
 80010f8:	481c      	ldr	r0, [pc, #112]	; (800116c <MX_TIM2_Init+0xe8>)
 80010fa:	f002 fbe9 	bl	80038d0 <HAL_TIM_ConfigClockSource>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001104:	f7ff fc7e 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001108:	4818      	ldr	r0, [pc, #96]	; (800116c <MX_TIM2_Init+0xe8>)
 800110a:	f002 f8ff 	bl	800330c <HAL_TIM_PWM_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001114:	f7ff fc76 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	4619      	mov	r1, r3
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <MX_TIM2_Init+0xe8>)
 8001128:	f003 f846 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001132:	f7ff fc67 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2360      	movs	r3, #96	; 0x60
 8001138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800113a:	f242 7310 	movw	r3, #10000	; 0x2710
 800113e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2208      	movs	r2, #8
 800114c:	4619      	mov	r1, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM2_Init+0xe8>)
 8001150:	f002 faf8 	bl	8003744 <HAL_TIM_PWM_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800115a:	f7ff fc53 	bl	8000a04 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM2_Init+0xe8>)
 8001160:	f000 f87a 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	; 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200040f8 	.word	0x200040f8

08001170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_TIM_Base_MspInit+0xdc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d145      	bne.n	800121e <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011dc:	2301      	movs	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	481b      	ldr	r0, [pc, #108]	; (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011e8:	f000 fe16 	bl	8001e18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2105      	movs	r1, #5
 80011f0:	2019      	movs	r0, #25
 80011f2:	f000 fde7 	bl	8001dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011f6:	2019      	movs	r0, #25
 80011f8:	f000 fe00 	bl	8001dfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2105      	movs	r1, #5
 8001200:	201a      	movs	r0, #26
 8001202:	f000 fddf 	bl	8001dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001206:	201a      	movs	r0, #26
 8001208:	f000 fdf8 	bl	8001dfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2105      	movs	r1, #5
 8001210:	201b      	movs	r0, #27
 8001212:	f000 fdd7 	bl	8001dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001216:	201b      	movs	r0, #27
 8001218:	f000 fdf0 	bl	8001dfc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800121c:	e012      	b.n	8001244 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001226:	d10d      	bne.n	8001244 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40010000 	.word	0x40010000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000

08001258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d11e      	bne.n	80012b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_TIM_MspPostInit+0x68>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_TIM_MspPostInit+0x68>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_TIM_MspPostInit+0x68>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4619      	mov	r1, r3
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <HAL_TIM_MspPostInit+0x6c>)
 80012b4:	f000 fdb0 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <tmc_enable_stallguard>:
#include "cmsis_os.h"
#include "spi.h"
#include "gpio.h"


uint32_t tmc_enable_stallguard(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	uint32_t reg_data = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
	int8_t sgt = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	70fb      	strb	r3, [r7, #3]


	reg_data = 0x010A0000; //loop antenna
 80012d6:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
 80012da:	607b      	str	r3, [r7, #4]
	//reg_data = 0x013D0000;
	tmc_readwrite_register(TMC_REG_COOLCONF, reg_data, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	206d      	movs	r0, #109	; 0x6d
 80012e2:	f000 f859 	bl	8001398 <tmc_readwrite_register>




	return 0;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <tmc_get_status>:


uint8_t tmc_get_status() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af02      	add	r7, sp, #8
		uint8_t rx_data[5];
		uint8_t tx_data[5];
		uint32_t payload =0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
		uint8_t status = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	76fb      	strb	r3, [r7, #27]
		uint8_t send_count = 2;
 80012fe:	2302      	movs	r3, #2
 8001300:	76bb      	strb	r3, [r7, #26]

		uint8_t addr = TMC_REG_GSTAT;
 8001302:	2301      	movs	r3, #1
 8001304:	767b      	strb	r3, [r7, #25]
		uint32_t data = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]


		tx_data[0] = addr;
 800130a:	7e7b      	ldrb	r3, [r7, #25]
 800130c:	713b      	strb	r3, [r7, #4]
		tx_data[1] = (data >> 24) & 0x00ff;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	0e1b      	lsrs	r3, r3, #24
 8001312:	b2db      	uxtb	r3, r3
 8001314:	717b      	strb	r3, [r7, #5]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	0c1b      	lsrs	r3, r3, #16
 800131a:	b2db      	uxtb	r3, r3
 800131c:	71bb      	strb	r3, [r7, #6]
		tx_data[3] = (data >> 8)  & 0x00ff;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b2db      	uxtb	r3, r3
 8001324:	71fb      	strb	r3, [r7, #7]
		tx_data[4] = (data)	      & 0x00ff;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	723b      	strb	r3, [r7, #8]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800132c:	bf00      	nop
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <tmc_get_status+0xa0>)
 8001330:	f001 fda8 	bl	8002e84 <HAL_SPI_GetState>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d1f9      	bne.n	800132e <tmc_get_status+0x3e>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <tmc_get_status+0xa4>)
 8001342:	f000 feeb 	bl	800211c <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001346:	bf00      	nop
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <tmc_get_status+0xa0>)
 800134a:	f001 fd9b 	bl	8002e84 <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <tmc_get_status+0x58>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	1d39      	adds	r1, r7, #4
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2305      	movs	r3, #5
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <tmc_get_status+0xa0>)
 8001364:	f001 fbec 	bl	8002b40 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001368:	bf00      	nop
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <tmc_get_status+0xa0>)
 800136c:	f001 fd8a 	bl	8002e84 <HAL_SPI_GetState>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d1f9      	bne.n	800136a <tmc_get_status+0x7a>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <tmc_get_status+0xa4>)
 800137e:	f000 fecd 	bl	800211c <HAL_GPIO_WritePin>





		status = rx_data[0];
 8001382:	7b3b      	ldrb	r3, [r7, #12]
 8001384:	76fb      	strb	r3, [r7, #27]

		return status;
 8001386:	7efb      	ldrb	r3, [r7, #27]




}
 8001388:	4618      	mov	r0, r3
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20004020 	.word	0x20004020
 8001394:	40020400 	.word	0x40020400

08001398 <tmc_readwrite_register>:

uint32_t tmc_readwrite_register(uint8_t addr, uint32_t data, uint8_t set_write_flag) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af02      	add	r7, sp, #8
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_data[5];
	uint8_t tx_data[5];
	uint32_t payload =0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
	uint8_t send_count = 2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	77fb      	strb	r3, [r7, #31]


	if(set_write_flag) {
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <tmc_readwrite_register+0x2a>
		addr |= 0x80;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013bc:	71fb      	strb	r3, [r7, #7]
		send_count = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	77fb      	strb	r3, [r7, #31]

	}

	//send twice according to TMC2130 datasheet
	for (uint8_t i = 0; i < send_count; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	77bb      	strb	r3, [r7, #30]
 80013c6:	e03f      	b.n	8001448 <tmc_readwrite_register+0xb0>

		tx_data[0] = addr;
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	723b      	strb	r3, [r7, #8]
		tx_data[1] = (data >> 24) & 0x00ff;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	0e1b      	lsrs	r3, r3, #24
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	727b      	strb	r3, [r7, #9]
		tx_data[2] = (data >> 16) & 0x00ff;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	72bb      	strb	r3, [r7, #10]
		tx_data[3] = (data >> 8)  & 0x00ff;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = (data)	      & 0x00ff;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	733b      	strb	r3, [r7, #12]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013ea:	bf00      	nop
 80013ec:	4820      	ldr	r0, [pc, #128]	; (8001470 <tmc_readwrite_register+0xd8>)
 80013ee:	f001 fd49 	bl	8002e84 <HAL_SPI_GetState>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d1f9      	bne.n	80013ec <tmc_readwrite_register+0x54>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	481d      	ldr	r0, [pc, #116]	; (8001474 <tmc_readwrite_register+0xdc>)
 8001400:	f000 fe8c 	bl	800211c <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001404:	bf00      	nop
 8001406:	481a      	ldr	r0, [pc, #104]	; (8001470 <tmc_readwrite_register+0xd8>)
 8001408:	f001 fd3c 	bl	8002e84 <HAL_SPI_GetState>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d1f9      	bne.n	8001406 <tmc_readwrite_register+0x6e>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001412:	f107 0210 	add.w	r2, r7, #16
 8001416:	f107 0108 	add.w	r1, r7, #8
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2305      	movs	r3, #5
 8001422:	4813      	ldr	r0, [pc, #76]	; (8001470 <tmc_readwrite_register+0xd8>)
 8001424:	f001 fb8c 	bl	8002b40 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001428:	bf00      	nop
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <tmc_readwrite_register+0xd8>)
 800142c:	f001 fd2a 	bl	8002e84 <HAL_SPI_GetState>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d1f9      	bne.n	800142a <tmc_readwrite_register+0x92>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <tmc_readwrite_register+0xdc>)
 800143e:	f000 fe6d 	bl	800211c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < send_count; i++) {
 8001442:	7fbb      	ldrb	r3, [r7, #30]
 8001444:	3301      	adds	r3, #1
 8001446:	77bb      	strb	r3, [r7, #30]
 8001448:	7fba      	ldrb	r2, [r7, #30]
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3bb      	bcc.n	80013c8 <tmc_readwrite_register+0x30>



	}

	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 8001450:	7c7b      	ldrb	r3, [r7, #17]
 8001452:	061a      	lsls	r2, r3, #24
 8001454:	7cbb      	ldrb	r3, [r7, #18]
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	441a      	add	r2, r3
			+ (rx_data[3] << 8 ) +  rx_data[4];
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	4413      	add	r3, r2
 8001460:	7d3a      	ldrb	r2, [r7, #20]
 8001462:	4413      	add	r3, r2
	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 8001464:	61bb      	str	r3, [r7, #24]


	return payload;
 8001466:	69bb      	ldr	r3, [r7, #24]


}
 8001468:	4618      	mov	r0, r3
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20004020 	.word	0x20004020
 8001474:	40020400 	.word	0x40020400

08001478 <tmc_set_motor_current>:

/* ihold: 		hold current. 5 bits.  0 = 1/32, 31=32/32
 * irun:  		run current.  5 bits.  0 = 1/32, 31=32/32
 * iholddelay: 	number of clock cycles to power down. 4 bits. Delay is 2^18*iholddelay clocks periods.
 */
void tmc_set_motor_current(uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	460b      	mov	r3, r1
 8001484:	71bb      	strb	r3, [r7, #6]
 8001486:	4613      	mov	r3, r2
 8001488:	717b      	strb	r3, [r7, #5]
	uint32_t reg_data = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]

	reg_data = (ihold & 0x1F)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
			+  ((irun & 0x1F) << 8)
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800149c:	431a      	orrs	r2, r3
			+  ((iholddelay & 0x0F) << 16);
 800149e:	797b      	ldrb	r3, [r7, #5]
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014a6:	4413      	add	r3, r2
	reg_data = (ihold & 0x1F)
 80014a8:	60fb      	str	r3, [r7, #12]

	tmc_readwrite_register(TMC_REG_IHOLD_IRUN, reg_data, 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	2010      	movs	r0, #16
 80014b0:	f7ff ff72 	bl	8001398 <tmc_readwrite_register>

	return;
 80014b4:	bf00      	nop
}
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <tmc_init>:

/*initializes the TMC2130 driver for StealthChop operation with current appropriate for loop antenna
 *
 */
void tmc_init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8

	uint8_t rx_data[2] = {0,0};
 80014c2:	2300      	movs	r3, #0
 80014c4:	713b      	strb	r3, [r7, #4]
 80014c6:	2300      	movs	r3, #0
 80014c8:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[2] = {0,0};
 80014ca:	2300      	movs	r3, #0
 80014cc:	703b      	strb	r3, [r7, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	4829      	ldr	r0, [pc, #164]	; (8001580 <tmc_init+0xc4>)
 80014da:	f000 fe1f 	bl	800211c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 f934 	bl	800174c <HAL_Delay>

	//Power cycle the TMC2130
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	4825      	ldr	r0, [pc, #148]	; (8001580 <tmc_init+0xc4>)
 80014ec:	f000 fe16 	bl	800211c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014f0:	2064      	movs	r0, #100	; 0x64
 80014f2:	f000 f92b 	bl	800174c <HAL_Delay>
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fc:	4820      	ldr	r0, [pc, #128]	; (8001580 <tmc_init+0xc4>)
 80014fe:	f000 fe0d 	bl	800211c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001502:	2064      	movs	r0, #100	; 0x64
 8001504:	f000 f922 	bl	800174c <HAL_Delay>

	//write 16 bits out of SPI interface (without clearing CS pin) to set sck polarity correct.
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001508:	bf00      	nop
 800150a:	481e      	ldr	r0, [pc, #120]	; (8001584 <tmc_init+0xc8>)
 800150c:	f001 fcba 	bl	8002e84 <HAL_SPI_GetState>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d1f9      	bne.n	800150a <tmc_init+0x4e>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	4639      	mov	r1, r7
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2302      	movs	r3, #2
 8001522:	4818      	ldr	r0, [pc, #96]	; (8001584 <tmc_init+0xc8>)
 8001524:	f001 fb0c 	bl	8002b40 <HAL_SPI_TransmitReceive>

	//clear the status register by reading it
	tmc_readwrite_register(TMC_REG_GSTAT, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff ff33 	bl	8001398 <tmc_readwrite_register>

	//TOFF=4, TBL=2, HSTRT=4. HEND=0
	tmc_readwrite_register(TMC_REG_CHOPCONF, 0x5010044, 1);
 8001532:	2201      	movs	r2, #1
 8001534:	4914      	ldr	r1, [pc, #80]	; (8001588 <tmc_init+0xcc>)
 8001536:	206c      	movs	r0, #108	; 0x6c
 8001538:	f7ff ff2e 	bl	8001398 <tmc_readwrite_register>

	//IHOLD_IRUN: IHOLD=10, IRUN=31 (max. current), IHOLDDELAY=6
	tmc_set_motor_current(3, 10, 10);
 800153c:	220a      	movs	r2, #10
 800153e:	210a      	movs	r1, #10
 8001540:	2003      	movs	r0, #3
 8001542:	f7ff ff99 	bl	8001478 <tmc_set_motor_current>

	//approx 1 second to fully power down the motor after motion stops
	tmc_readwrite_register(TMC_REG_TPOWERDOWN, 0x40, 1);
 8001546:	2201      	movs	r2, #1
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	2011      	movs	r0, #17
 800154c:	f7ff ff24 	bl	8001398 <tmc_readwrite_register>

	//en_pwm_mode = 1, DIAG1 set to indicate stall, push-pull active high
	tmc_readwrite_register(TMC_REG_GCONF, 0x2104, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	f242 1104 	movw	r1, #8452	; 0x2104
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff ff1e 	bl	8001398 <tmc_readwrite_register>

	//enable stallguard and set sensitvity
	tmc_enable_stallguard();
 800155c:	f7ff feb4 	bl	80012c8 <tmc_enable_stallguard>

	//switching velocity = 35000
	tmc_readwrite_register(TMC_REG_TPWMTHRS, 0x1F4, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001566:	2013      	movs	r0, #19
 8001568:	f7ff ff16 	bl	8001398 <tmc_readwrite_register>

	//approx pwm_autoscale = 1, PWM_GRAD = 1, PWM_AMPL=255
	tmc_readwrite_register(TMC_REG_PWM_CONF, 0x401C8, 1);
 800156c:	2201      	movs	r2, #1
 800156e:	4907      	ldr	r1, [pc, #28]	; (800158c <tmc_init+0xd0>)
 8001570:	2070      	movs	r0, #112	; 0x70
 8001572:	f7ff ff11 	bl	8001398 <tmc_readwrite_register>

	return;
 8001576:	bf00      	nop
}
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020400 	.word	0x40020400
 8001584:	20004020 	.word	0x20004020
 8001588:	05010044 	.word	0x05010044
 800158c:	000401c8 	.word	0x000401c8

08001590 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_USART2_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015c8:	f002 feca 	bl	8004360 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f7ff fa17 	bl	8000a04 <Error_Handler>
  }

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20004138 	.word	0x20004138
 80015e0:	40004400 	.word	0x40004400

080015e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_UART_MspInit+0x84>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12b      	bne.n	800165e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x88>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_UART_MspInit+0x88>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800163e:	230c      	movs	r3, #12
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164e:	2307      	movs	r3, #7
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_MspInit+0x8c>)
 800165a:	f000 fbdd 	bl	8001e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40004400 	.word	0x40004400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800167a:	e003      	b.n	8001684 <LoopCopyDataInit>

0800167c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800167e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001682:	3104      	adds	r1, #4

08001684 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800168a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800168c:	d3f6      	bcc.n	800167c <CopyDataInit>
  ldr  r2, =_sbss
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001690:	e002      	b.n	8001698 <LoopFillZerobss>

08001692 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001694:	f842 3b04 	str.w	r3, [r2], #4

08001698 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800169c:	d3f9      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169e:	f7ff fc37 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f005 fb73 	bl	8006d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7ff f911 	bl	80008cc <main>
  bx  lr    
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ac:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80016b0:	08006eb8 	.word	0x08006eb8
  ldr  r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80016bc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80016c0:	2000417c 	.word	0x2000417c

080016c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <HAL_Init+0x40>)
 80016d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_Init+0x40>)
 80016de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x40>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 fb5c 	bl	8001dae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fb54 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fb26 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008
 8001730:	20004178 	.word	0x20004178

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20004178 	.word	0x20004178

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_Delay+0x40>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000008 	.word	0x20000008

08001790 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e033      	b.n	800180e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe fef0 	bl	8000594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d6:	f023 0302 	bic.w	r3, r3, #2
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f93a 	bl	8001a5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1c>
 8001830:	2302      	movs	r3, #2
 8001832:	e105      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x228>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d925      	bls.n	8001890 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	3b1e      	subs	r3, #30
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43da      	mvns	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	400a      	ands	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68d9      	ldr	r1, [r3, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	4603      	mov	r3, r0
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	3b1e      	subs	r3, #30
 8001884:	409a      	lsls	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e022      	b.n	80018d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	2207      	movs	r2, #7
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	400a      	ands	r2, r1
 80018b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4403      	add	r3, r0
 80018cc:	409a      	lsls	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d824      	bhi.n	8001928 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3b05      	subs	r3, #5
 80018f0:	221f      	movs	r2, #31
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	400a      	ands	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b05      	subs	r3, #5
 800191a:	fa00 f203 	lsl.w	r2, r0, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	635a      	str	r2, [r3, #52]	; 0x34
 8001926:	e04c      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d824      	bhi.n	800197a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b23      	subs	r3, #35	; 0x23
 8001942:	221f      	movs	r2, #31
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b23      	subs	r3, #35	; 0x23
 800196c:	fa00 f203 	lsl.w	r2, r0, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
 8001978:	e023      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b41      	subs	r3, #65	; 0x41
 800198c:	221f      	movs	r2, #31
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b41      	subs	r3, #65	; 0x41
 80019b6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_ADC_ConfigChannel+0x234>)
 80019c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_ADC_ConfigChannel+0x238>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d109      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1cc>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_ADC_ConfigChannel+0x238>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d123      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d003      	beq.n	80019fe <HAL_ADC_ConfigChannel+0x1e6>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d11b      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d111      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_ADC_ConfigChannel+0x23c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_ADC_ConfigChannel+0x240>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	0c9a      	lsrs	r2, r3, #18
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a28:	e002      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f9      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40012300 	.word	0x40012300
 8001a50:	40012000 	.word	0x40012000
 8001a54:	20000000 	.word	0x20000000
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a64:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <ADC_Init+0x1f0>)
 8001a66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	021a      	lsls	r2, r3, #8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <ADC_Init+0x1f4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	e00f      	b.n	8001b5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0202 	bic.w	r2, r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7e1b      	ldrb	r3, [r3, #24]
 8001b74:	005a      	lsls	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	035a      	lsls	r2, r3, #13
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e007      	b.n	8001bd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	051a      	lsls	r2, r3, #20
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c12:	025a      	lsls	r2, r3, #9
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	029a      	lsls	r2, r3, #10
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40012300 	.word	0x40012300
 8001c50:	0f000001 	.word	0x0f000001

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff4c 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd6:	f7ff ff61 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7ff ffb1 	bl	8001d48 <NVIC_EncodePriority>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff80 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff54 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e159      	b.n	80020e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8148 	bne.w	80020e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00b      	beq.n	8001e72 <HAL_GPIO_Init+0x5a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e66:	2b11      	cmp	r3, #17
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d130      	bne.n	8001ed4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0xfc>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d123      	bne.n	8001f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a2 	beq.w	80020e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_GPIO_Init+0x2e4>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_GPIO_Init+0x2e4>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_GPIO_Init+0x2e4>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a48      	ldr	r2, [pc, #288]	; (8002104 <HAL_GPIO_Init+0x2ec>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d019      	beq.n	800201a <HAL_GPIO_Init+0x202>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x1fe>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a46      	ldr	r2, [pc, #280]	; (800210c <HAL_GPIO_Init+0x2f4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x1fa>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a45      	ldr	r2, [pc, #276]	; (8002110 <HAL_GPIO_Init+0x2f8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x1f6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a44      	ldr	r2, [pc, #272]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x1f2>
 8002006:	2304      	movs	r3, #4
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x204>
 800200a:	2307      	movs	r3, #7
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x204>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x204>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x204>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x204>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4934      	ldr	r1, [pc, #208]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_GPIO_Init+0x300>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800205e:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <HAL_GPIO_Init+0x300>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_GPIO_Init+0x300>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <HAL_GPIO_Init+0x300>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_GPIO_Init+0x300>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_GPIO_Init+0x300>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_GPIO_Init+0x300>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_GPIO_Init+0x300>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f aea2 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3724      	adds	r7, #36	; 0x24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002138:	e003      	b.n	8002142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	619a      	str	r2, [r3, #24]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e25b      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	4ba3      	ldr	r3, [pc, #652]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4ba0      	ldr	r3, [pc, #640]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b9d      	ldr	r3, [pc, #628]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b99      	ldr	r3, [pc, #612]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e236      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a90      	ldr	r2, [pc, #576]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a8a      	ldr	r2, [pc, #552]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b84      	ldr	r3, [pc, #528]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a83      	ldr	r2, [pc, #524]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a80      	ldr	r2, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa94 	bl	8001734 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fa90 	bl	8001734 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1fb      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fa80 	bl	8001734 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fa7c 	bl	8001734 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1e7      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b62      	ldr	r3, [pc, #392]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b5c      	ldr	r3, [pc, #368]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1bb      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4952      	ldr	r1, [pc, #328]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fa35 	bl	8001734 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fa31 	bl	8001734 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e19c      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4940      	ldr	r1, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7ff fa14 	bl	8001734 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff fa10 	bl	8001734 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e17b      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d030      	beq.n	800239c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff f9f4 	bl	8001734 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff f9f0 	bl	8001734 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e15b      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff f9dd 	bl	8001734 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7ff f9d9 	bl	8001734 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e144      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a0 	beq.w	80024ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d121      	bne.n	800242a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7ff f99f 	bl	8001734 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e011      	b.n	800241e <HAL_RCC_OscConfig+0x2ce>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
 8002408:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7ff f992 	bl	8001734 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0fd      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002432:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a7c      	ldr	r2, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	e01c      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x312>
 8002448:	4b77      	ldr	r3, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a76      	ldr	r2, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	4b74      	ldr	r3, [pc, #464]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a73      	ldr	r2, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
 8002462:	4b71      	ldr	r3, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a70      	ldr	r2, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a6d      	ldr	r2, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff f957 	bl	8001734 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff f953 	bl	8001734 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0bc      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ee      	beq.n	800248a <HAL_RCC_OscConfig+0x33a>
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7ff f941 	bl	8001734 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff f93d 	bl	8001734 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0a6      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b56      	ldr	r3, [pc, #344]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b52      	ldr	r3, [pc, #328]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a51      	ldr	r2, [pc, #324]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8092 	beq.w	8002618 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d05c      	beq.n	80025ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d141      	bne.n	800258c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b48      	ldr	r3, [pc, #288]	; (800262c <HAL_RCC_OscConfig+0x4dc>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff f911 	bl	8001734 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff f90d 	bl	8001734 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e078      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	019b      	lsls	r3, r3, #6
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	4933      	ldr	r1, [pc, #204]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCC_OscConfig+0x4dc>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff f8e6 	bl	8001734 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff f8e2 	bl	8001734 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e04d      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x41c>
 800258a:	e045      	b.n	8002618 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x4dc>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff f8cf 	bl	8001734 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff f8cb 	bl	8001734 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e036      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x44a>
 80025b8:	e02e      	b.n	8002618 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e029      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d11c      	bne.n	8002614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d115      	bne.n	8002614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d10d      	bne.n	8002614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40007000 	.word	0x40007000
 8002628:	40023800 	.word	0x40023800
 800262c:	42470060 	.word	0x42470060

08002630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0cc      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d90c      	bls.n	800266c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b65      	ldr	r3, [pc, #404]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b8      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d044      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d119      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e067      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4934      	ldr	r1, [pc, #208]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7ff f808 	bl	8001734 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7ff f804 	bl	8001734 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e04f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d20c      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e032      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f821 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027ba:	4601      	mov	r1, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	fa21 f303 	lsr.w	r3, r1, r3
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fae4 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08006e90 	.word	0x08006e90
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b04      	cmp	r3, #4
 800281c:	d007      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x32>
 800281e:	2b08      	cmp	r3, #8
 8002820:	d008      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x38>
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80b4 	bne.w	8002990 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800282a:	60bb      	str	r3, [r7, #8]
       break;
 800282c:	e0b3      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002830:	60bb      	str	r3, [r7, #8]
      break;
 8002832:	e0b0      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002834:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800283c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283e:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d04a      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	f04f 0400 	mov.w	r4, #0
 8002854:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	ea03 0501 	and.w	r5, r3, r1
 8002860:	ea04 0602 	and.w	r6, r4, r2
 8002864:	4629      	mov	r1, r5
 8002866:	4632      	mov	r2, r6
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f04f 0400 	mov.w	r4, #0
 8002870:	0154      	lsls	r4, r2, #5
 8002872:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002876:	014b      	lsls	r3, r1, #5
 8002878:	4619      	mov	r1, r3
 800287a:	4622      	mov	r2, r4
 800287c:	1b49      	subs	r1, r1, r5
 800287e:	eb62 0206 	sbc.w	r2, r2, r6
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f04f 0400 	mov.w	r4, #0
 800288a:	0194      	lsls	r4, r2, #6
 800288c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002890:	018b      	lsls	r3, r1, #6
 8002892:	1a5b      	subs	r3, r3, r1
 8002894:	eb64 0402 	sbc.w	r4, r4, r2
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	00e2      	lsls	r2, r4, #3
 80028a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028a6:	00d9      	lsls	r1, r3, #3
 80028a8:	460b      	mov	r3, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	195b      	adds	r3, r3, r5
 80028ae:	eb44 0406 	adc.w	r4, r4, r6
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	0262      	lsls	r2, r4, #9
 80028bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028c0:	0259      	lsls	r1, r3, #9
 80028c2:	460b      	mov	r3, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	4621      	mov	r1, r4
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f04f 0400 	mov.w	r4, #0
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	f7fd fc8c 	bl	80001f0 <__aeabi_uldivmod>
 80028d8:	4603      	mov	r3, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e049      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	ea03 0501 	and.w	r5, r3, r1
 80028f6:	ea04 0602 	and.w	r6, r4, r2
 80028fa:	4629      	mov	r1, r5
 80028fc:	4632      	mov	r2, r6
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f04f 0400 	mov.w	r4, #0
 8002906:	0154      	lsls	r4, r2, #5
 8002908:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800290c:	014b      	lsls	r3, r1, #5
 800290e:	4619      	mov	r1, r3
 8002910:	4622      	mov	r2, r4
 8002912:	1b49      	subs	r1, r1, r5
 8002914:	eb62 0206 	sbc.w	r2, r2, r6
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f04f 0400 	mov.w	r4, #0
 8002920:	0194      	lsls	r4, r2, #6
 8002922:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002926:	018b      	lsls	r3, r1, #6
 8002928:	1a5b      	subs	r3, r3, r1
 800292a:	eb64 0402 	sbc.w	r4, r4, r2
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	00e2      	lsls	r2, r4, #3
 8002938:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800293c:	00d9      	lsls	r1, r3, #3
 800293e:	460b      	mov	r3, r1
 8002940:	4614      	mov	r4, r2
 8002942:	195b      	adds	r3, r3, r5
 8002944:	eb44 0406 	adc.w	r4, r4, r6
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	02a2      	lsls	r2, r4, #10
 8002952:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002956:	0299      	lsls	r1, r3, #10
 8002958:	460b      	mov	r3, r1
 800295a:	4614      	mov	r4, r2
 800295c:	4618      	mov	r0, r3
 800295e:	4621      	mov	r1, r4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	461a      	mov	r2, r3
 8002968:	4623      	mov	r3, r4
 800296a:	f7fd fc41 	bl	80001f0 <__aeabi_uldivmod>
 800296e:	4603      	mov	r3, r0
 8002970:	460c      	mov	r4, r1
 8002972:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	60bb      	str	r3, [r7, #8]
      break;
 800298e:	e002      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002992:	60bb      	str	r3, [r7, #8]
      break;
 8002994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002996:	68bb      	ldr	r3, [r7, #8]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c8:	f7ff fff0 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029cc:	4601      	mov	r1, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08006ea0 	.word	0x08006ea0

080029ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029f0:	f7ff ffdc 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f4:	4601      	mov	r1, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	0b5b      	lsrs	r3, r3, #13
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08006ea0 	.word	0x08006ea0

08002a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	220f      	movs	r2, #15
 8002a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_GetClockConfig+0x5c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0203 	and.w	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_RCC_GetClockConfig+0x5c>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCC_GetClockConfig+0x60>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40023c00 	.word	0x40023c00

08002a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e056      	b.n	8002b38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe f909 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	f003 0104 	and.w	r1, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x26>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e18a      	b.n	8002e7c <HAL_SPI_TransmitReceive+0x33c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b6e:	f7fe fde1 	bl	8001734 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d00f      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x70>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b96:	d107      	bne.n	8002ba8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <HAL_SPI_TransmitReceive+0x68>
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d003      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bae:	e15b      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x82>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x82>
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bc8:	e14e      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d003      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2205      	movs	r2, #5
 8002bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	887a      	ldrh	r2, [r7, #2]
 8002c06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d007      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d178      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x10a>
 8002c44:	8b7b      	ldrh	r3, [r7, #26]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d166      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	1c9a      	adds	r2, r3, #2
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6e:	e053      	b.n	8002d18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x176>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_SPI_TransmitReceive+0x176>
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d113      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	1c9a      	adds	r2, r3, #2
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d119      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x1b8>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d014      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	b292      	uxth	r2, r2
 8002cda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	1c9a      	adds	r2, r3, #2
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cf8:	f7fe fd1c 	bl	8001734 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d807      	bhi.n	8002d18 <HAL_SPI_TransmitReceive+0x1d8>
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d003      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d16:	e0a7      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1a6      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x130>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1a1      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x130>
 8002d2c:	e07c      	b.n	8002e28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x1fc>
 8002d36:	8b7b      	ldrh	r3, [r7, #26]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d16b      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	7812      	ldrb	r2, [r2, #0]
 8002d48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d62:	e057      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d11c      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x26c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_SPI_TransmitReceive+0x26c>
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d114      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d119      	bne.n	8002dee <HAL_SPI_TransmitReceive+0x2ae>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d014      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dea:	2301      	movs	r3, #1
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dee:	f7fe fca1 	bl	8001734 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d803      	bhi.n	8002e06 <HAL_SPI_TransmitReceive+0x2c6>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d102      	bne.n	8002e0c <HAL_SPI_TransmitReceive+0x2cc>
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e12:	e029      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1a2      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x224>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d19d      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f8a1 	bl	8002f74 <SPI_EndRxTxTransaction>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e44:	e010      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10b      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	e000      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3730      	adds	r7, #48	; 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb0:	e04c      	b.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d048      	beq.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002eba:	f7fe fc3b 	bl	8001734 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d902      	bls.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d13d      	bne.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee8:	d111      	bne.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef2:	d004      	beq.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d107      	bne.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d10f      	bne.n	8002f38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e00f      	b.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d1a3      	bne.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <SPI_EndRxTxTransaction+0x7c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <SPI_EndRxTxTransaction+0x80>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0d5b      	lsrs	r3, r3, #21
 8002f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9e:	d112      	bne.n	8002fc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ff78 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e00f      	b.n	8002fe6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b80      	cmp	r3, #128	; 0x80
 8002fde:	d0f2      	beq.n	8002fc6 <SPI_EndRxTxTransaction+0x52>
 8002fe0:	e000      	b.n	8002fe4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fe2:	bf00      	nop
  }

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	165e9f81 	.word	0x165e9f81

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e01d      	b.n	8003046 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe f8a6 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fd6c 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d007      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e01d      	b.n	80030e4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f815 	bl	80030ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 fd1d 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d841      	bhi.n	8003194 <HAL_TIM_OC_Start_IT+0x94>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <HAL_TIM_OC_Start_IT+0x18>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003195 	.word	0x08003195
 8003120:	08003195 	.word	0x08003195
 8003124:	08003195 	.word	0x08003195
 8003128:	0800315f 	.word	0x0800315f
 800312c:	08003195 	.word	0x08003195
 8003130:	08003195 	.word	0x08003195
 8003134:	08003195 	.word	0x08003195
 8003138:	08003171 	.word	0x08003171
 800313c:	08003195 	.word	0x08003195
 8003140:	08003195 	.word	0x08003195
 8003144:	08003195 	.word	0x08003195
 8003148:	08003183 	.word	0x08003183
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0202 	orr.w	r2, r2, #2
 800315a:	60da      	str	r2, [r3, #12]
      break;
 800315c:	e01b      	b.n	8003196 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0204 	orr.w	r2, r2, #4
 800316c:	60da      	str	r2, [r3, #12]
      break;
 800316e:	e012      	b.n	8003196 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	60da      	str	r2, [r3, #12]
      break;
 8003180:	e009      	b.n	8003196 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0210 	orr.w	r2, r2, #16
 8003190:	60da      	str	r2, [r3, #12]
      break;
 8003192:	e000      	b.n	8003196 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003194:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 ffe4 	bl	800416c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_TIM_OC_Start_IT+0xec>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d107      	bne.n	80031be <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000

080031f0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d841      	bhi.n	8003284 <HAL_TIM_OC_Stop_IT+0x94>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <HAL_TIM_OC_Stop_IT+0x18>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003285 	.word	0x08003285
 8003210:	08003285 	.word	0x08003285
 8003214:	08003285 	.word	0x08003285
 8003218:	0800324f 	.word	0x0800324f
 800321c:	08003285 	.word	0x08003285
 8003220:	08003285 	.word	0x08003285
 8003224:	08003285 	.word	0x08003285
 8003228:	08003261 	.word	0x08003261
 800322c:	08003285 	.word	0x08003285
 8003230:	08003285 	.word	0x08003285
 8003234:	08003285 	.word	0x08003285
 8003238:	08003273 	.word	0x08003273
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0202 	bic.w	r2, r2, #2
 800324a:	60da      	str	r2, [r3, #12]
      break;
 800324c:	e01b      	b.n	8003286 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0204 	bic.w	r2, r2, #4
 800325c:	60da      	str	r2, [r3, #12]
      break;
 800325e:	e012      	b.n	8003286 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0208 	bic.w	r2, r2, #8
 800326e:	60da      	str	r2, [r3, #12]
      break;
 8003270:	e009      	b.n	8003286 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0210 	bic.w	r2, r2, #16
 8003280:	60da      	str	r2, [r3, #12]
      break;
 8003282:	e000      	b.n	8003286 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003284:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 ff6c 	bl	800416c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_TIM_OC_Stop_IT+0x118>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d117      	bne.n	80032ce <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a1a      	ldr	r2, [r3, #32]
 80032a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <HAL_TIM_OC_Stop_IT+0xde>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	f240 4344 	movw	r3, #1092	; 0x444
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_OC_Stop_IT+0xde>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <HAL_TIM_OC_Stop_IT+0x10e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	f240 4344 	movw	r3, #1092	; 0x444
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_TIM_OC_Stop_IT+0x10e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40010000 	.word	0x40010000

0800330c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e01d      	b.n	800335a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f815 	bl	8003362 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fbe2 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 feee 	bl	800416c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <HAL_TIM_PWM_Start+0x60>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d107      	bne.n	80033aa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d007      	beq.n	80033cc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40010000 	.word	0x40010000

080033dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 febc 	bl	800416c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_TIM_PWM_Stop+0x94>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d117      	bne.n	800342e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	f241 1311 	movw	r3, #4369	; 0x1111
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_TIM_PWM_Stop+0x52>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	f240 4344 	movw	r3, #1092	; 0x444
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_TIM_PWM_Stop+0x52>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	f241 1311 	movw	r3, #4369	; 0x1111
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_TIM_PWM_Stop+0x82>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	f240 4344 	movw	r3, #1092	; 0x444
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_TIM_PWM_Stop+0x82>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40010000 	.word	0x40010000

08003474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0202 	mvn.w	r2, #2
 80034a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fb0d 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 faff 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fb10 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d122      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d11b      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0204 	mvn.w	r2, #4
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fae3 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fad5 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fae6 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d122      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d11b      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fab9 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 faab 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fabc 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b10      	cmp	r3, #16
 8003584:	d122      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b10      	cmp	r3, #16
 8003592:	d11b      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0210 	mvn.w	r2, #16
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa8f 	bl	8003ad6 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fa81 	bl	8003ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fa92 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd f9f4 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fe94 	bl	800434c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d10e      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d107      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa57 	bl	8003afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d10e      	bne.n	800367c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b20      	cmp	r3, #32
 800366a:	d107      	bne.n	800367c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0220 	mvn.w	r2, #32
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fe5e 	bl	8004338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_TIM_OC_ConfigChannel+0x1a>
 800369a:	2302      	movs	r3, #2
 800369c:	e04e      	b.n	800373c <HAL_TIM_OC_ConfigChannel+0xb8>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d839      	bhi.n	8003728 <HAL_TIM_OC_ConfigChannel+0xa4>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_TIM_OC_ConfigChannel+0x38>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003729 	.word	0x08003729
 80036c4:	08003729 	.word	0x08003729
 80036c8:	08003729 	.word	0x08003729
 80036cc:	080036ff 	.word	0x080036ff
 80036d0:	08003729 	.word	0x08003729
 80036d4:	08003729 	.word	0x08003729
 80036d8:	08003729 	.word	0x08003729
 80036dc:	0800370d 	.word	0x0800370d
 80036e0:	08003729 	.word	0x08003729
 80036e4:	08003729 	.word	0x08003729
 80036e8:	08003729 	.word	0x08003729
 80036ec:	0800371b 	.word	0x0800371b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fa8c 	bl	8003c14 <TIM_OC1_SetConfig>
      break;
 80036fc:	e015      	b.n	800372a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 faeb 	bl	8003ce0 <TIM_OC2_SetConfig>
      break;
 800370a:	e00e      	b.n	800372a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb50 	bl	8003db8 <TIM_OC3_SetConfig>
      break;
 8003718:	e007      	b.n	800372a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fbb3 	bl	8003e8c <TIM_OC4_SetConfig>
      break;
 8003726:	e000      	b.n	800372a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003728:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800375a:	2302      	movs	r3, #2
 800375c:	e0b4      	b.n	80038c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	f200 809f 	bhi.w	80038b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080038b5 	.word	0x080038b5
 8003784:	080038b5 	.word	0x080038b5
 8003788:	080038b5 	.word	0x080038b5
 800378c:	080037f1 	.word	0x080037f1
 8003790:	080038b5 	.word	0x080038b5
 8003794:	080038b5 	.word	0x080038b5
 8003798:	080038b5 	.word	0x080038b5
 800379c:	08003833 	.word	0x08003833
 80037a0:	080038b5 	.word	0x080038b5
 80037a4:	080038b5 	.word	0x080038b5
 80037a8:	080038b5 	.word	0x080038b5
 80037ac:	08003873 	.word	0x08003873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fa2c 	bl	8003c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0208 	orr.w	r2, r2, #8
 80037ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0204 	bic.w	r2, r2, #4
 80037da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6999      	ldr	r1, [r3, #24]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	619a      	str	r2, [r3, #24]
      break;
 80037ee:	e062      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fa72 	bl	8003ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6999      	ldr	r1, [r3, #24]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	021a      	lsls	r2, r3, #8
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	619a      	str	r2, [r3, #24]
      break;
 8003830:	e041      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fabd 	bl	8003db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0208 	orr.w	r2, r2, #8
 800384c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0204 	bic.w	r2, r2, #4
 800385c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
      break;
 8003870:	e021      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb07 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800388c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	021a      	lsls	r2, r3, #8
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	61da      	str	r2, [r3, #28]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80038b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_TIM_ConfigClockSource+0x18>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e0a6      	b.n	8003a36 <HAL_TIM_ConfigClockSource+0x166>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d067      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x120>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d80b      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x6c>
 8003924:	2b10      	cmp	r3, #16
 8003926:	d073      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
 8003928:	2b10      	cmp	r3, #16
 800392a:	d802      	bhi.n	8003932 <HAL_TIM_ConfigClockSource+0x62>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d06f      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003930:	e078      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003932:	2b20      	cmp	r3, #32
 8003934:	d06c      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
 8003936:	2b30      	cmp	r3, #48	; 0x30
 8003938:	d06a      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800393a:	e073      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800393c:	2b70      	cmp	r3, #112	; 0x70
 800393e:	d00d      	beq.n	800395c <HAL_TIM_ConfigClockSource+0x8c>
 8003940:	2b70      	cmp	r3, #112	; 0x70
 8003942:	d804      	bhi.n	800394e <HAL_TIM_ConfigClockSource+0x7e>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d033      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xe0>
 8003948:	2b60      	cmp	r3, #96	; 0x60
 800394a:	d041      	beq.n	80039d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800394c:	e06a      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d066      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x152>
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d017      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800395a:	e063      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f000 fbde 	bl	800412c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800397e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e04c      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f000 fbc7 	bl	800412c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ac:	609a      	str	r2, [r3, #8]
      break;
 80039ae:	e039      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	461a      	mov	r2, r3
 80039be:	f000 fb3b 	bl	8004038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2150      	movs	r1, #80	; 0x50
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fb94 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 80039ce:	e029      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	461a      	mov	r2, r3
 80039de:	f000 fb5a 	bl	8004096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2160      	movs	r1, #96	; 0x60
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fb84 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 80039ee:	e019      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f000 fb1b 	bl	8004038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fb74 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003a0e:	e009      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 fb6b 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003a20:	e000      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e031      	b.n	8003aba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa5f 	bl	8003f2c <TIM_SlaveTimer_SetConfig>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e018      	b.n	8003aba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aa6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00f      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d00b      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <TIM_Base_SetConfig+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01b      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d017      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00f      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <TIM_Base_SetConfig+0xf0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <TIM_Base_SetConfig+0xf4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <TIM_Base_SetConfig+0xf8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <TIM_Base_SetConfig+0xfc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d103      	bne.n	8003be4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	615a      	str	r2, [r3, #20]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0302 	bic.w	r3, r3, #2
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <TIM_OC1_SetConfig+0xc8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10c      	bne.n	8003c8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0308 	bic.w	r3, r3, #8
 8003c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <TIM_OC1_SetConfig+0xc8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d111      	bne.n	8003cb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0210 	bic.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <TIM_OC2_SetConfig+0xd4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10d      	bne.n	8003d5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <TIM_OC2_SetConfig+0xd4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d113      	bne.n	8003d8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000

08003db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <TIM_OC3_SetConfig+0xd0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <TIM_OC3_SetConfig+0xd0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40010000 	.word	0x40010000

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <TIM_OC4_SetConfig+0x9c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d109      	bne.n	8003f00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000

08003f2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	d05c      	beq.n	800402c <TIM_SlaveTimer_SetConfig+0x100>
 8003f72:	2b30      	cmp	r3, #48	; 0x30
 8003f74:	d806      	bhi.n	8003f84 <TIM_SlaveTimer_SetConfig+0x58>
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d058      	beq.n	800402c <TIM_SlaveTimer_SetConfig+0x100>
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d056      	beq.n	800402c <TIM_SlaveTimer_SetConfig+0x100>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d054      	beq.n	800402c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003f82:	e054      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d03d      	beq.n	8004004 <TIM_SlaveTimer_SetConfig+0xd8>
 8003f88:	2b50      	cmp	r3, #80	; 0x50
 8003f8a:	d802      	bhi.n	8003f92 <TIM_SlaveTimer_SetConfig+0x66>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d010      	beq.n	8003fb2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003f90:	e04d      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003f92:	2b60      	cmp	r3, #96	; 0x60
 8003f94:	d040      	beq.n	8004018 <TIM_SlaveTimer_SetConfig+0xec>
 8003f96:	2b70      	cmp	r3, #112	; 0x70
 8003f98:	d000      	beq.n	8003f9c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003f9a:	e048      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68d9      	ldr	r1, [r3, #12]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f000 f8be 	bl	800412c <TIM_ETR_SetConfig>
      break;
 8003fb0:	e03d      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d101      	bne.n	8003fbe <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e038      	b.n	8004030 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
      break;
 8004002:	e014      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6899      	ldr	r1, [r3, #8]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	461a      	mov	r2, r3
 8004012:	f000 f811 	bl	8004038 <TIM_TI1_ConfigInputStage>
      break;
 8004016:	e00a      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6899      	ldr	r1, [r3, #8]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	461a      	mov	r2, r3
 8004026:	f000 f836 	bl	8004096 <TIM_TI2_ConfigInputStage>
      break;
 800402a:	e000      	b.n	800402e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800402c:	bf00      	nop
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0201 	bic.w	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 030a 	bic.w	r3, r3, #10
 8004074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0210 	bic.w	r2, r3, #16
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	f043 0307 	orr.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	431a      	orrs	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2201      	movs	r2, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	43db      	mvns	r3, r3
 800418e:	401a      	ands	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e050      	b.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d013      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a16      	ldr	r2, [pc, #88]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a15      	ldr	r2, [pc, #84]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a13      	ldr	r2, [pc, #76]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10c      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40014000 	.word	0x40014000

08004294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e03d      	b.n	800432c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e03f      	b.n	80043f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd f92c 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f90b 	bl	80045c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b088      	sub	sp, #32
 80043fe:	af02      	add	r7, sp, #8
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	f040 8083 	bne.w	8004522 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_UART_Transmit+0x2e>
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e07b      	b.n	8004524 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Transmit+0x40>
 8004436:	2302      	movs	r3, #2
 8004438:	e074      	b.n	8004524 <HAL_UART_Transmit+0x12a>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2221      	movs	r2, #33	; 0x21
 800444c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004450:	f7fd f970 	bl	8001734 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800446a:	e042      	b.n	80044f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d122      	bne.n	80044ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2200      	movs	r2, #0
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f84c 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e042      	b.n	8004524 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3302      	adds	r3, #2
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	e017      	b.n	80044f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	e013      	b.n	80044f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f829 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e01f      	b.n	8004524 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	60ba      	str	r2, [r7, #8]
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1b7      	bne.n	800446c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2200      	movs	r2, #0
 8004504:	2140      	movs	r1, #64	; 0x40
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f810 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e006      	b.n	8004524 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453c:	e02c      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d028      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x30>
 800454c:	f7fd f8f2 	bl	8001734 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	429a      	cmp	r2, r3
 800455a:	d21d      	bcs.n	8004598 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800456a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d0c3      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004602:	f023 030c 	bic.w	r3, r3, #12
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	430b      	orrs	r3, r1
 800460e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462e:	f040 818b 	bne.w	8004948 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4ac1      	ldr	r2, [pc, #772]	; (800493c <UART_SetConfig+0x37c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d005      	beq.n	8004648 <UART_SetConfig+0x88>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4abf      	ldr	r2, [pc, #764]	; (8004940 <UART_SetConfig+0x380>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f040 80bd 	bne.w	80047c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe f9d0 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 800464c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	461d      	mov	r5, r3
 8004652:	f04f 0600 	mov.w	r6, #0
 8004656:	46a8      	mov	r8, r5
 8004658:	46b1      	mov	r9, r6
 800465a:	eb18 0308 	adds.w	r3, r8, r8
 800465e:	eb49 0409 	adc.w	r4, r9, r9
 8004662:	4698      	mov	r8, r3
 8004664:	46a1      	mov	r9, r4
 8004666:	eb18 0805 	adds.w	r8, r8, r5
 800466a:	eb49 0906 	adc.w	r9, r9, r6
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800467a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800467e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004682:	4688      	mov	r8, r1
 8004684:	4691      	mov	r9, r2
 8004686:	eb18 0005 	adds.w	r0, r8, r5
 800468a:	eb49 0106 	adc.w	r1, r9, r6
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	461d      	mov	r5, r3
 8004694:	f04f 0600 	mov.w	r6, #0
 8004698:	196b      	adds	r3, r5, r5
 800469a:	eb46 0406 	adc.w	r4, r6, r6
 800469e:	461a      	mov	r2, r3
 80046a0:	4623      	mov	r3, r4
 80046a2:	f7fb fda5 	bl	80001f0 <__aeabi_uldivmod>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	461a      	mov	r2, r3
 80046ac:	4ba5      	ldr	r3, [pc, #660]	; (8004944 <UART_SetConfig+0x384>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	461d      	mov	r5, r3
 80046bc:	f04f 0600 	mov.w	r6, #0
 80046c0:	46a9      	mov	r9, r5
 80046c2:	46b2      	mov	sl, r6
 80046c4:	eb19 0309 	adds.w	r3, r9, r9
 80046c8:	eb4a 040a 	adc.w	r4, sl, sl
 80046cc:	4699      	mov	r9, r3
 80046ce:	46a2      	mov	sl, r4
 80046d0:	eb19 0905 	adds.w	r9, r9, r5
 80046d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046ec:	4689      	mov	r9, r1
 80046ee:	4692      	mov	sl, r2
 80046f0:	eb19 0005 	adds.w	r0, r9, r5
 80046f4:	eb4a 0106 	adc.w	r1, sl, r6
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	461d      	mov	r5, r3
 80046fe:	f04f 0600 	mov.w	r6, #0
 8004702:	196b      	adds	r3, r5, r5
 8004704:	eb46 0406 	adc.w	r4, r6, r6
 8004708:	461a      	mov	r2, r3
 800470a:	4623      	mov	r3, r4
 800470c:	f7fb fd70 	bl	80001f0 <__aeabi_uldivmod>
 8004710:	4603      	mov	r3, r0
 8004712:	460c      	mov	r4, r1
 8004714:	461a      	mov	r2, r3
 8004716:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <UART_SetConfig+0x384>)
 8004718:	fba3 1302 	umull	r1, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	2164      	movs	r1, #100	; 0x64
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	3332      	adds	r3, #50	; 0x32
 800472a:	4a86      	ldr	r2, [pc, #536]	; (8004944 <UART_SetConfig+0x384>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004738:	4498      	add	r8, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	461d      	mov	r5, r3
 800473e:	f04f 0600 	mov.w	r6, #0
 8004742:	46a9      	mov	r9, r5
 8004744:	46b2      	mov	sl, r6
 8004746:	eb19 0309 	adds.w	r3, r9, r9
 800474a:	eb4a 040a 	adc.w	r4, sl, sl
 800474e:	4699      	mov	r9, r3
 8004750:	46a2      	mov	sl, r4
 8004752:	eb19 0905 	adds.w	r9, r9, r5
 8004756:	eb4a 0a06 	adc.w	sl, sl, r6
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800476a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800476e:	4689      	mov	r9, r1
 8004770:	4692      	mov	sl, r2
 8004772:	eb19 0005 	adds.w	r0, r9, r5
 8004776:	eb4a 0106 	adc.w	r1, sl, r6
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	461d      	mov	r5, r3
 8004780:	f04f 0600 	mov.w	r6, #0
 8004784:	196b      	adds	r3, r5, r5
 8004786:	eb46 0406 	adc.w	r4, r6, r6
 800478a:	461a      	mov	r2, r3
 800478c:	4623      	mov	r3, r4
 800478e:	f7fb fd2f 	bl	80001f0 <__aeabi_uldivmod>
 8004792:	4603      	mov	r3, r0
 8004794:	460c      	mov	r4, r1
 8004796:	461a      	mov	r2, r3
 8004798:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <UART_SetConfig+0x384>)
 800479a:	fba3 1302 	umull	r1, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2164      	movs	r1, #100	; 0x64
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	3332      	adds	r3, #50	; 0x32
 80047ac:	4a65      	ldr	r2, [pc, #404]	; (8004944 <UART_SetConfig+0x384>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	f003 0207 	and.w	r2, r3, #7
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4442      	add	r2, r8
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	e26f      	b.n	8004ca2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7fe f8ff 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 80047c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	461d      	mov	r5, r3
 80047cc:	f04f 0600 	mov.w	r6, #0
 80047d0:	46a8      	mov	r8, r5
 80047d2:	46b1      	mov	r9, r6
 80047d4:	eb18 0308 	adds.w	r3, r8, r8
 80047d8:	eb49 0409 	adc.w	r4, r9, r9
 80047dc:	4698      	mov	r8, r3
 80047de:	46a1      	mov	r9, r4
 80047e0:	eb18 0805 	adds.w	r8, r8, r5
 80047e4:	eb49 0906 	adc.w	r9, r9, r6
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047fc:	4688      	mov	r8, r1
 80047fe:	4691      	mov	r9, r2
 8004800:	eb18 0005 	adds.w	r0, r8, r5
 8004804:	eb49 0106 	adc.w	r1, r9, r6
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	461d      	mov	r5, r3
 800480e:	f04f 0600 	mov.w	r6, #0
 8004812:	196b      	adds	r3, r5, r5
 8004814:	eb46 0406 	adc.w	r4, r6, r6
 8004818:	461a      	mov	r2, r3
 800481a:	4623      	mov	r3, r4
 800481c:	f7fb fce8 	bl	80001f0 <__aeabi_uldivmod>
 8004820:	4603      	mov	r3, r0
 8004822:	460c      	mov	r4, r1
 8004824:	461a      	mov	r2, r3
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <UART_SetConfig+0x384>)
 8004828:	fba3 2302 	umull	r2, r3, r3, r2
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	461d      	mov	r5, r3
 8004836:	f04f 0600 	mov.w	r6, #0
 800483a:	46a9      	mov	r9, r5
 800483c:	46b2      	mov	sl, r6
 800483e:	eb19 0309 	adds.w	r3, r9, r9
 8004842:	eb4a 040a 	adc.w	r4, sl, sl
 8004846:	4699      	mov	r9, r3
 8004848:	46a2      	mov	sl, r4
 800484a:	eb19 0905 	adds.w	r9, r9, r5
 800484e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800485e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004866:	4689      	mov	r9, r1
 8004868:	4692      	mov	sl, r2
 800486a:	eb19 0005 	adds.w	r0, r9, r5
 800486e:	eb4a 0106 	adc.w	r1, sl, r6
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	461d      	mov	r5, r3
 8004878:	f04f 0600 	mov.w	r6, #0
 800487c:	196b      	adds	r3, r5, r5
 800487e:	eb46 0406 	adc.w	r4, r6, r6
 8004882:	461a      	mov	r2, r3
 8004884:	4623      	mov	r3, r4
 8004886:	f7fb fcb3 	bl	80001f0 <__aeabi_uldivmod>
 800488a:	4603      	mov	r3, r0
 800488c:	460c      	mov	r4, r1
 800488e:	461a      	mov	r2, r3
 8004890:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <UART_SetConfig+0x384>)
 8004892:	fba3 1302 	umull	r1, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2164      	movs	r1, #100	; 0x64
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	3332      	adds	r3, #50	; 0x32
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <UART_SetConfig+0x384>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048b2:	4498      	add	r8, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	461d      	mov	r5, r3
 80048b8:	f04f 0600 	mov.w	r6, #0
 80048bc:	46a9      	mov	r9, r5
 80048be:	46b2      	mov	sl, r6
 80048c0:	eb19 0309 	adds.w	r3, r9, r9
 80048c4:	eb4a 040a 	adc.w	r4, sl, sl
 80048c8:	4699      	mov	r9, r3
 80048ca:	46a2      	mov	sl, r4
 80048cc:	eb19 0905 	adds.w	r9, r9, r5
 80048d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048e8:	4689      	mov	r9, r1
 80048ea:	4692      	mov	sl, r2
 80048ec:	eb19 0005 	adds.w	r0, r9, r5
 80048f0:	eb4a 0106 	adc.w	r1, sl, r6
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	461d      	mov	r5, r3
 80048fa:	f04f 0600 	mov.w	r6, #0
 80048fe:	196b      	adds	r3, r5, r5
 8004900:	eb46 0406 	adc.w	r4, r6, r6
 8004904:	461a      	mov	r2, r3
 8004906:	4623      	mov	r3, r4
 8004908:	f7fb fc72 	bl	80001f0 <__aeabi_uldivmod>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	461a      	mov	r2, r3
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <UART_SetConfig+0x384>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	3332      	adds	r3, #50	; 0x32
 8004926:	4a07      	ldr	r2, [pc, #28]	; (8004944 <UART_SetConfig+0x384>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 0207 	and.w	r2, r3, #7
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4442      	add	r2, r8
 8004938:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800493a:	e1b2      	b.n	8004ca2 <UART_SetConfig+0x6e2>
 800493c:	40011000 	.word	0x40011000
 8004940:	40011400 	.word	0x40011400
 8004944:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4ad7      	ldr	r2, [pc, #860]	; (8004cac <UART_SetConfig+0x6ec>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d005      	beq.n	800495e <UART_SetConfig+0x39e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4ad6      	ldr	r2, [pc, #856]	; (8004cb0 <UART_SetConfig+0x6f0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	f040 80d1 	bne.w	8004b00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800495e:	f7fe f845 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8004962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	469a      	mov	sl, r3
 8004968:	f04f 0b00 	mov.w	fp, #0
 800496c:	46d0      	mov	r8, sl
 800496e:	46d9      	mov	r9, fp
 8004970:	eb18 0308 	adds.w	r3, r8, r8
 8004974:	eb49 0409 	adc.w	r4, r9, r9
 8004978:	4698      	mov	r8, r3
 800497a:	46a1      	mov	r9, r4
 800497c:	eb18 080a 	adds.w	r8, r8, sl
 8004980:	eb49 090b 	adc.w	r9, r9, fp
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004998:	4688      	mov	r8, r1
 800499a:	4691      	mov	r9, r2
 800499c:	eb1a 0508 	adds.w	r5, sl, r8
 80049a0:	eb4b 0609 	adc.w	r6, fp, r9
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	f04f 0400 	mov.w	r4, #0
 80049b6:	0094      	lsls	r4, r2, #2
 80049b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049bc:	008b      	lsls	r3, r1, #2
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	4631      	mov	r1, r6
 80049c6:	f7fb fc13 	bl	80001f0 <__aeabi_uldivmod>
 80049ca:	4603      	mov	r3, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	461a      	mov	r2, r3
 80049d0:	4bb8      	ldr	r3, [pc, #736]	; (8004cb4 <UART_SetConfig+0x6f4>)
 80049d2:	fba3 2302 	umull	r2, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	469b      	mov	fp, r3
 80049e0:	f04f 0c00 	mov.w	ip, #0
 80049e4:	46d9      	mov	r9, fp
 80049e6:	46e2      	mov	sl, ip
 80049e8:	eb19 0309 	adds.w	r3, r9, r9
 80049ec:	eb4a 040a 	adc.w	r4, sl, sl
 80049f0:	4699      	mov	r9, r3
 80049f2:	46a2      	mov	sl, r4
 80049f4:	eb19 090b 	adds.w	r9, r9, fp
 80049f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a10:	4689      	mov	r9, r1
 8004a12:	4692      	mov	sl, r2
 8004a14:	eb1b 0509 	adds.w	r5, fp, r9
 8004a18:	eb4c 060a 	adc.w	r6, ip, sl
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4619      	mov	r1, r3
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	f04f 0400 	mov.w	r4, #0
 8004a2e:	0094      	lsls	r4, r2, #2
 8004a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a34:	008b      	lsls	r3, r1, #2
 8004a36:	461a      	mov	r2, r3
 8004a38:	4623      	mov	r3, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	f7fb fbd7 	bl	80001f0 <__aeabi_uldivmod>
 8004a42:	4603      	mov	r3, r0
 8004a44:	460c      	mov	r4, r1
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b9a      	ldr	r3, [pc, #616]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2164      	movs	r1, #100	; 0x64
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	3332      	adds	r3, #50	; 0x32
 8004a5c:	4a95      	ldr	r2, [pc, #596]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a68:	4498      	add	r8, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	469b      	mov	fp, r3
 8004a6e:	f04f 0c00 	mov.w	ip, #0
 8004a72:	46d9      	mov	r9, fp
 8004a74:	46e2      	mov	sl, ip
 8004a76:	eb19 0309 	adds.w	r3, r9, r9
 8004a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a7e:	4699      	mov	r9, r3
 8004a80:	46a2      	mov	sl, r4
 8004a82:	eb19 090b 	adds.w	r9, r9, fp
 8004a86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a9e:	4689      	mov	r9, r1
 8004aa0:	4692      	mov	sl, r2
 8004aa2:	eb1b 0509 	adds.w	r5, fp, r9
 8004aa6:	eb4c 060a 	adc.w	r6, ip, sl
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	0094      	lsls	r4, r2, #2
 8004abe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac2:	008b      	lsls	r3, r1, #2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	4628      	mov	r0, r5
 8004aca:	4631      	mov	r1, r6
 8004acc:	f7fb fb90 	bl	80001f0 <__aeabi_uldivmod>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b77      	ldr	r3, [pc, #476]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a72      	ldr	r2, [pc, #456]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4442      	add	r2, r8
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	e0d0      	b.n	8004ca2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7fd ff60 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8004b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	469a      	mov	sl, r3
 8004b0a:	f04f 0b00 	mov.w	fp, #0
 8004b0e:	46d0      	mov	r8, sl
 8004b10:	46d9      	mov	r9, fp
 8004b12:	eb18 0308 	adds.w	r3, r8, r8
 8004b16:	eb49 0409 	adc.w	r4, r9, r9
 8004b1a:	4698      	mov	r8, r3
 8004b1c:	46a1      	mov	r9, r4
 8004b1e:	eb18 080a 	adds.w	r8, r8, sl
 8004b22:	eb49 090b 	adc.w	r9, r9, fp
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b3a:	4688      	mov	r8, r1
 8004b3c:	4691      	mov	r9, r2
 8004b3e:	eb1a 0508 	adds.w	r5, sl, r8
 8004b42:	eb4b 0609 	adc.w	r6, fp, r9
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	f04f 0400 	mov.w	r4, #0
 8004b58:	0094      	lsls	r4, r2, #2
 8004b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b5e:	008b      	lsls	r3, r1, #2
 8004b60:	461a      	mov	r2, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	4628      	mov	r0, r5
 8004b66:	4631      	mov	r1, r6
 8004b68:	f7fb fb42 	bl	80001f0 <__aeabi_uldivmod>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004b74:	fba3 2302 	umull	r2, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	469b      	mov	fp, r3
 8004b82:	f04f 0c00 	mov.w	ip, #0
 8004b86:	46d9      	mov	r9, fp
 8004b88:	46e2      	mov	sl, ip
 8004b8a:	eb19 0309 	adds.w	r3, r9, r9
 8004b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8004b92:	4699      	mov	r9, r3
 8004b94:	46a2      	mov	sl, r4
 8004b96:	eb19 090b 	adds.w	r9, r9, fp
 8004b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bb2:	4689      	mov	r9, r1
 8004bb4:	4692      	mov	sl, r2
 8004bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8004bba:	eb4c 060a 	adc.w	r6, ip, sl
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	f04f 0400 	mov.w	r4, #0
 8004bd0:	0094      	lsls	r4, r2, #2
 8004bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bd6:	008b      	lsls	r3, r1, #2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4623      	mov	r3, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	4631      	mov	r1, r6
 8004be0:	f7fb fb06 	bl	80001f0 <__aeabi_uldivmod>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004bec:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2164      	movs	r1, #100	; 0x64
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0a:	4498      	add	r8, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	469b      	mov	fp, r3
 8004c10:	f04f 0c00 	mov.w	ip, #0
 8004c14:	46d9      	mov	r9, fp
 8004c16:	46e2      	mov	sl, ip
 8004c18:	eb19 0309 	adds.w	r3, r9, r9
 8004c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c20:	4699      	mov	r9, r3
 8004c22:	46a2      	mov	sl, r4
 8004c24:	eb19 090b 	adds.w	r9, r9, fp
 8004c28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c2c:	f04f 0100 	mov.w	r1, #0
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c40:	4689      	mov	r9, r1
 8004c42:	4692      	mov	sl, r2
 8004c44:	eb1b 0509 	adds.w	r5, fp, r9
 8004c48:	eb4c 060a 	adc.w	r6, ip, sl
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4619      	mov	r1, r3
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	0094      	lsls	r4, r2, #2
 8004c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c64:	008b      	lsls	r3, r1, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	4623      	mov	r3, r4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	f7fb fabf 	bl	80001f0 <__aeabi_uldivmod>
 8004c72:	4603      	mov	r3, r0
 8004c74:	460c      	mov	r4, r1
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2164      	movs	r1, #100	; 0x64
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	3332      	adds	r3, #50	; 0x32
 8004c8c:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <UART_SetConfig+0x6f4>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4442      	add	r2, r8
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	e7ff      	b.n	8004ca2 <UART_SetConfig+0x6e2>
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	40011400 	.word	0x40011400
 8004cb4:	51eb851f 	.word	0x51eb851f

08004cb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cca:	2b84      	cmp	r3, #132	; 0x84
 8004ccc:	d005      	beq.n	8004cda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004cce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3303      	adds	r3, #3
 8004cd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cec:	f000 ff38 	bl	8005b60 <vTaskStartScheduler>
  
  return osOK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf8:	b089      	sub	sp, #36	; 0x24
 8004cfa:	af04      	add	r7, sp, #16
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d020      	beq.n	8004d4a <osThreadCreate+0x54>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01c      	beq.n	8004d4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685c      	ldr	r4, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681d      	ldr	r5, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691e      	ldr	r6, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ffc8 	bl	8004cb8 <makeFreeRtosPriority>
 8004d28:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d32:	9202      	str	r2, [sp, #8]
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	9100      	str	r1, [sp, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4632      	mov	r2, r6
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 fd4b 	bl	80057da <xTaskCreateStatic>
 8004d44:	4603      	mov	r3, r0
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e01c      	b.n	8004d84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685c      	ldr	r4, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d56:	b29e      	uxth	r6, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ffaa 	bl	8004cb8 <makeFreeRtosPriority>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	9200      	str	r2, [sp, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	4632      	mov	r2, r6
 8004d72:	4629      	mov	r1, r5
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fd8a 	bl	800588e <xTaskCreate>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d001      	beq.n	8004d84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e000      	b.n	8004d86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d8e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <osDelay+0x16>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	e000      	b.n	8004da6 <osDelay+0x18>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fea6 	bl	8005af8 <vTaskDelay>
  
  return osOK;
 8004dac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f103 0208 	add.w	r2, r3, #8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f04f 32ff 	mov.w	r2, #4294967295
 8004dce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f103 0208 	add.w	r2, r3, #8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f103 0208 	add.w	r2, r3, #8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d103      	bne.n	8004e78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e00c      	b.n	8004e92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e002      	b.n	8004e86 <vListInsert+0x2e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d2f6      	bcs.n	8004e80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6892      	ldr	r2, [r2, #8]
 8004ee0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6852      	ldr	r2, [r2, #4]
 8004eea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d103      	bne.n	8004efe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	e7fe      	b.n	8004f46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004f48:	f001 fc30 	bl	80067ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	441a      	add	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d114      	bne.n	8004fc8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01a      	beq.n	8004fdc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3310      	adds	r3, #16
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f816 	bl	8005fdc <xTaskRemoveFromEventList>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d012      	beq.n	8004fdc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <xQueueGenericReset+0xcc>)
 8004fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	e009      	b.n	8004fdc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3310      	adds	r3, #16
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fef2 	bl	8004db6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3324      	adds	r3, #36	; 0x24
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff feed 	bl	8004db6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fdc:	f001 fc14 	bl	8006808 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fe0:	2301      	movs	r3, #1
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <xQueueGenericCreate+0x28>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e7fe      	b.n	8005016 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e004      	b.n	800502e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3348      	adds	r3, #72	; 0x48
 8005032:	4618      	mov	r0, r3
 8005034:	f001 fcd4 	bl	80069e0 <pvPortMalloc>
 8005038:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3348      	adds	r3, #72	; 0x48
 8005048:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005052:	79fa      	ldrb	r2, [r7, #7]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f805 	bl	800506e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005064:	69bb      	ldr	r3, [r7, #24]
	}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e002      	b.n	8005090 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800509c:	2101      	movs	r1, #1
 800509e:	69b8      	ldr	r0, [r7, #24]
 80050a0:	f7ff ff3e 	bl	8004f20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08e      	sub	sp, #56	; 0x38
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <xQueueGenericSend+0x30>
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050da:	e7fe      	b.n	80050da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <xQueueGenericSend+0x3e>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <xQueueGenericSend+0x42>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <xQueueGenericSend+0x44>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <xQueueGenericSend+0x5c>
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
 8005106:	e7fe      	b.n	8005106 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d103      	bne.n	8005116 <xQueueGenericSend+0x6a>
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <xQueueGenericSend+0x6e>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <xQueueGenericSend+0x70>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <xQueueGenericSend+0x88>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	e7fe      	b.n	8005132 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005134:	f001 f908 	bl	8006348 <xTaskGetSchedulerState>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <xQueueGenericSend+0x98>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <xQueueGenericSend+0x9c>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <xQueueGenericSend+0x9e>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <xQueueGenericSend+0xb6>
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e7fe      	b.n	8005160 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005162:	f001 fb23 	bl	80067ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <xQueueGenericSend+0xcc>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d129      	bne.n	80051cc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800517e:	f000 fa1c 	bl	80055ba <prvCopyDataToQueue>
 8005182:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d010      	beq.n	80051ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	3324      	adds	r3, #36	; 0x24
 8005190:	4618      	mov	r0, r3
 8005192:	f000 ff23 	bl	8005fdc <xTaskRemoveFromEventList>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800519c:	4b3f      	ldr	r3, [pc, #252]	; (800529c <xQueueGenericSend+0x1f0>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	e00a      	b.n	80051c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051b4:	4b39      	ldr	r3, [pc, #228]	; (800529c <xQueueGenericSend+0x1f0>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051c4:	f001 fb20 	bl	8006808 <vPortExitCritical>
				return pdPASS;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e063      	b.n	8005294 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051d2:	f001 fb19 	bl	8006808 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e05c      	b.n	8005294 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 ff5b 	bl	80060a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ee:	f001 fb0b 	bl	8006808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051f2:	f000 fd13 	bl	8005c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051f6:	f001 fad9 	bl	80067ac <vPortEnterCritical>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005200:	b25b      	sxtb	r3, r3
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d103      	bne.n	8005210 <xQueueGenericSend+0x164>
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005216:	b25b      	sxtb	r3, r3
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d103      	bne.n	8005226 <xQueueGenericSend+0x17a>
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005226:	f001 faef 	bl	8006808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800522a:	1d3a      	adds	r2, r7, #4
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f000 ff4a 	bl	80060cc <xTaskCheckForTimeOut>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d124      	bne.n	8005288 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800523e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005240:	f000 fab3 	bl	80057aa <prvIsQueueFull>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d018      	beq.n	800527c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	3310      	adds	r3, #16
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fe9e 	bl	8005f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525a:	f000 fa3e 	bl	80056da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800525e:	f000 fceb 	bl	8005c38 <xTaskResumeAll>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f af7c 	bne.w	8005162 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <xQueueGenericSend+0x1f0>)
 800526c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	e772      	b.n	8005162 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800527c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800527e:	f000 fa2c 	bl	80056da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005282:	f000 fcd9 	bl	8005c38 <xTaskResumeAll>
 8005286:	e76c      	b.n	8005162 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800528a:	f000 fa26 	bl	80056da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800528e:	f000 fcd3 	bl	8005c38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005292:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005294:	4618      	mov	r0, r3
 8005296:	3738      	adds	r7, #56	; 0x38
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <xQueueGenericSendFromISR+0x2c>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ca:	e7fe      	b.n	80052ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <xQueueGenericSendFromISR+0x3a>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <xQueueGenericSendFromISR+0x3e>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <xQueueGenericSendFromISR+0x40>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <xQueueGenericSendFromISR+0x58>
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	e7fe      	b.n	80052f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d103      	bne.n	8005306 <xQueueGenericSendFromISR+0x66>
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <xQueueGenericSendFromISR+0x6a>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <xQueueGenericSendFromISR+0x6c>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <xQueueGenericSendFromISR+0x84>
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	e7fe      	b.n	8005322 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005324:	f001 fb1e 	bl	8006964 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005328:	f3ef 8211 	mrs	r2, BASEPRI
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61ba      	str	r2, [r7, #24]
 800533e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005340:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534c:	429a      	cmp	r2, r3
 800534e:	d302      	bcc.n	8005356 <xQueueGenericSendFromISR+0xb6>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d12c      	bne.n	80053b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005366:	f000 f928 	bl	80055ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800536a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d112      	bne.n	800539a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d016      	beq.n	80053aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	3324      	adds	r3, #36	; 0x24
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fe2b 	bl	8005fdc <xTaskRemoveFromEventList>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00e      	beq.n	80053aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e007      	b.n	80053aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800539a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800539e:	3301      	adds	r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	b25a      	sxtb	r2, r3
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053aa:	2301      	movs	r3, #1
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80053ae:	e001      	b.n	80053b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3738      	adds	r7, #56	; 0x38
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <xQueueReceive+0x2e>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	e7fe      	b.n	80053f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <xQueueReceive+0x3c>
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <xQueueReceive+0x40>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <xQueueReceive+0x42>
 8005408:	2300      	movs	r3, #0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <xQueueReceive+0x5a>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e7fe      	b.n	8005420 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005422:	f000 ff91 	bl	8006348 <xTaskGetSchedulerState>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <xQueueReceive+0x6a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <xQueueReceive+0x6e>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <xQueueReceive+0x70>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <xQueueReceive+0x88>
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e7fe      	b.n	800544e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005450:	f001 f9ac 	bl	80067ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01f      	beq.n	80054a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005464:	f000 f913 	bl	800568e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00f      	beq.n	8005498 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	3310      	adds	r3, #16
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fdad 	bl	8005fdc <xTaskRemoveFromEventList>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005488:	4b3c      	ldr	r3, [pc, #240]	; (800557c <xQueueReceive+0x1b4>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005498:	f001 f9b6 	bl	8006808 <vPortExitCritical>
				return pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	e069      	b.n	8005574 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054a6:	f001 f9af 	bl	8006808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e062      	b.n	8005574 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fdf1 	bl	80060a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054be:	2301      	movs	r3, #1
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c2:	f001 f9a1 	bl	8006808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054c6:	f000 fba9 	bl	8005c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ca:	f001 f96f 	bl	80067ac <vPortEnterCritical>
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d103      	bne.n	80054e4 <xQueueReceive+0x11c>
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d103      	bne.n	80054fa <xQueueReceive+0x132>
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054fa:	f001 f985 	bl	8006808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054fe:	1d3a      	adds	r2, r7, #4
 8005500:	f107 0310 	add.w	r3, r7, #16
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fde0 	bl	80060cc <xTaskCheckForTimeOut>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d123      	bne.n	800555a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005514:	f000 f933 	bl	800577e <prvIsQueueEmpty>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d017      	beq.n	800554e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fd34 	bl	8005f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800552c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552e:	f000 f8d4 	bl	80056da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005532:	f000 fb81 	bl	8005c38 <xTaskResumeAll>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d189      	bne.n	8005450 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <xQueueReceive+0x1b4>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	e780      	b.n	8005450 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800554e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005550:	f000 f8c3 	bl	80056da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005554:	f000 fb70 	bl	8005c38 <xTaskResumeAll>
 8005558:	e77a      	b.n	8005450 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	f000 f8bd 	bl	80056da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005560:	f000 fb6a 	bl	8005c38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005566:	f000 f90a 	bl	800577e <prvIsQueueEmpty>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f43f af6f 	beq.w	8005450 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005572:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005574:	4618      	mov	r0, r3
 8005576:	3730      	adds	r7, #48	; 0x30
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <uxQueueMessagesWaiting+0x22>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	e7fe      	b.n	80055a0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80055a2:	f001 f903 	bl	80067ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80055ac:	f001 f92c 	bl	8006808 <vPortExitCritical>

	return uxReturn;
 80055b0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10d      	bne.n	80055f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d14d      	bne.n	800567c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fecd 	bl	8006384 <xTaskPriorityDisinherit>
 80055ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
 80055f2:	e043      	b.n	800567c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d119      	bne.n	800562e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6858      	ldr	r0, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	461a      	mov	r2, r3
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	f001 fbe5 	bl	8006dd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	d32b      	bcc.n	800567c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	605a      	str	r2, [r3, #4]
 800562c:	e026      	b.n	800567c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68d8      	ldr	r0, [r3, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	461a      	mov	r2, r3
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	f001 fbcb 	bl	8006dd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	425b      	negs	r3, r3
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d207      	bcs.n	800566a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	425b      	negs	r3, r3
 8005664:	441a      	add	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d105      	bne.n	800567c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3b01      	subs	r3, #1
 800567a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005684:	697b      	ldr	r3, [r7, #20]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d018      	beq.n	80056d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d303      	bcc.n	80056c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68d9      	ldr	r1, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	461a      	mov	r2, r3
 80056cc:	6838      	ldr	r0, [r7, #0]
 80056ce:	f001 fb81 	bl	8006dd4 <memcpy>
	}
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056e2:	f001 f863 	bl	80067ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ee:	e011      	b.n	8005714 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d012      	beq.n	800571e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3324      	adds	r3, #36	; 0x24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fc6d 	bl	8005fdc <xTaskRemoveFromEventList>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005708:	f000 fd40 	bl	800618c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	3b01      	subs	r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	dce9      	bgt.n	80056f0 <prvUnlockQueue+0x16>
 800571c:	e000      	b.n	8005720 <prvUnlockQueue+0x46>
					break;
 800571e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	22ff      	movs	r2, #255	; 0xff
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005728:	f001 f86e 	bl	8006808 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800572c:	f001 f83e 	bl	80067ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005736:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005738:	e011      	b.n	800575e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d012      	beq.n	8005768 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3310      	adds	r3, #16
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fc48 	bl	8005fdc <xTaskRemoveFromEventList>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005752:	f000 fd1b 	bl	800618c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	3b01      	subs	r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800575e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005762:	2b00      	cmp	r3, #0
 8005764:	dce9      	bgt.n	800573a <prvUnlockQueue+0x60>
 8005766:	e000      	b.n	800576a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005768:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005772:	f001 f849 	bl	8006808 <vPortExitCritical>
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005786:	f001 f811 	bl	80067ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005792:	2301      	movs	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e001      	b.n	800579c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800579c:	f001 f834 	bl	8006808 <vPortExitCritical>

	return xReturn;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057b2:	f000 fffb 	bl	80067ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	429a      	cmp	r2, r3
 80057c0:	d102      	bne.n	80057c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e001      	b.n	80057cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057cc:	f001 f81c 	bl	8006808 <vPortExitCritical>

	return xReturn;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08e      	sub	sp, #56	; 0x38
 80057de:	af04      	add	r7, sp, #16
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <xTaskCreateStatic+0x28>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	e7fe      	b.n	8005800 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <xTaskCreateStatic+0x42>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	e7fe      	b.n	800581a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800581c:	2354      	movs	r3, #84	; 0x54
 800581e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b54      	cmp	r3, #84	; 0x54
 8005824:	d009      	beq.n	800583a <xTaskCreateStatic+0x60>
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	e7fe      	b.n	8005838 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800583a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01e      	beq.n	8005880 <xTaskCreateStatic+0xa6>
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01b      	beq.n	8005880 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2202      	movs	r2, #2
 8005856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800585a:	2300      	movs	r3, #0
 800585c:	9303      	str	r3, [sp, #12]
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f850 	bl	8005918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587a:	f000 f8d3 	bl	8005a24 <prvAddNewTaskToReadyList>
 800587e:	e001      	b.n	8005884 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005884:	697b      	ldr	r3, [r7, #20]
	}
 8005886:	4618      	mov	r0, r3
 8005888:	3728      	adds	r7, #40	; 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800588e:	b580      	push	{r7, lr}
 8005890:	b08c      	sub	sp, #48	; 0x30
 8005892:	af04      	add	r7, sp, #16
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f89c 	bl	80069e0 <pvPortMalloc>
 80058a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00e      	beq.n	80058ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058b0:	2054      	movs	r0, #84	; 0x54
 80058b2:	f001 f895 	bl	80069e0 <pvPortMalloc>
 80058b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
 80058c4:	e005      	b.n	80058d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f001 f94c 	bl	8006b64 <vPortFree>
 80058cc:	e001      	b.n	80058d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9303      	str	r3, [sp, #12]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	9302      	str	r3, [sp, #8]
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f80e 	bl	8005918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058fc:	69f8      	ldr	r0, [r7, #28]
 80058fe:	f000 f891 	bl	8005a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005902:	2301      	movs	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	e002      	b.n	800590e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005908:	f04f 33ff 	mov.w	r3, #4294967295
 800590c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800590e:	69bb      	ldr	r3, [r7, #24]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005930:	3b01      	subs	r3, #1
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <prvInitialiseNewTask+0x46>
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e7fe      	b.n	800595c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01f      	beq.n	80059a4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	e012      	b.n	8005990 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	7819      	ldrb	r1, [r3, #0]
 8005972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	3334      	adds	r3, #52	; 0x34
 800597a:	460a      	mov	r2, r1
 800597c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d9e9      	bls.n	800596a <prvInitialiseNewTask+0x52>
 8005996:	e000      	b.n	800599a <prvInitialiseNewTask+0x82>
			{
				break;
 8005998:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a2:	e003      	b.n	80059ac <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d901      	bls.n	80059b6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059b2:	2306      	movs	r3, #6
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2200      	movs	r2, #0
 80059c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fa12 	bl	8004df6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	3318      	adds	r3, #24
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fa0d 	bl	8004df6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	f1c3 0207 	rsb	r2, r3, #7
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2200      	movs	r2, #0
 80059f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	69b8      	ldr	r0, [r7, #24]
 8005a06:	f000 fda7 	bl	8006558 <pxPortInitialiseStack>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1c:	bf00      	nop
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a2c:	f000 febe 	bl	80067ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <prvAddNewTaskToReadyList+0xb8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	4a29      	ldr	r2, [pc, #164]	; (8005adc <prvAddNewTaskToReadyList+0xb8>)
 8005a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <prvAddNewTaskToReadyList+0xbc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d109      	bne.n	8005a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a42:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <prvAddNewTaskToReadyList+0xbc>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a48:	4b24      	ldr	r3, [pc, #144]	; (8005adc <prvAddNewTaskToReadyList+0xb8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d110      	bne.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a50:	f000 fbc0 	bl	80061d4 <prvInitialiseTaskLists>
 8005a54:	e00d      	b.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a56:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <prvAddNewTaskToReadyList+0xc0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a5e:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <prvAddNewTaskToReadyList+0xbc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d802      	bhi.n	8005a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <prvAddNewTaskToReadyList+0xbc>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <prvAddNewTaskToReadyList+0xc4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <prvAddNewTaskToReadyList+0xc4>)
 8005a7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	2201      	movs	r2, #1
 8005a82:	409a      	lsls	r2, r3
 8005a84:	4b19      	ldr	r3, [pc, #100]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	4a18      	ldr	r2, [pc, #96]	; (8005aec <prvAddNewTaskToReadyList+0xc8>)
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <prvAddNewTaskToReadyList+0xcc>)
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7ff f9b3 	bl	8004e10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aaa:	f000 fead 	bl	8006808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <prvAddNewTaskToReadyList+0xc0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00e      	beq.n	8005ad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <prvAddNewTaskToReadyList+0xbc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d207      	bcs.n	8005ad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <prvAddNewTaskToReadyList+0xd0>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000380 	.word	0x20000380
 8005ae0:	20000280 	.word	0x20000280
 8005ae4:	2000038c 	.word	0x2000038c
 8005ae8:	2000039c 	.word	0x2000039c
 8005aec:	20000388 	.word	0x20000388
 8005af0:	20000284 	.word	0x20000284
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <vTaskDelay+0x60>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <vTaskDelay+0x2e>
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	e7fe      	b.n	8005b24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005b26:	f000 f879 	bl	8005c1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fcad 	bl	800648c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b32:	f000 f881 	bl	8005c38 <xTaskResumeAll>
 8005b36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <vTaskDelay+0x64>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	200003a8 	.word	0x200003a8
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b6e:	463a      	mov	r2, r7
 8005b70:	1d39      	adds	r1, r7, #4
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fa fd6e 	bl	8000658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	9202      	str	r2, [sp, #8]
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	2300      	movs	r3, #0
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	491d      	ldr	r1, [pc, #116]	; (8005c04 <vTaskStartScheduler+0xa4>)
 8005b90:	481d      	ldr	r0, [pc, #116]	; (8005c08 <vTaskStartScheduler+0xa8>)
 8005b92:	f7ff fe22 	bl	80057da <xTaskCreateStatic>
 8005b96:	4602      	mov	r2, r0
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <vTaskStartScheduler+0xac>)
 8005b9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <vTaskStartScheduler+0xac>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e001      	b.n	8005bae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d115      	bne.n	8005be0 <vTaskStartScheduler+0x80>
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <vTaskStartScheduler+0xb0>)
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <vTaskStartScheduler+0xb4>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bd4:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <vTaskStartScheduler+0xb8>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bda:	f000 fd49 	bl	8006670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bde:	e00d      	b.n	8005bfc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d109      	bne.n	8005bfc <vTaskStartScheduler+0x9c>
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e7fe      	b.n	8005bfa <vTaskStartScheduler+0x9a>
}
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	08006e88 	.word	0x08006e88
 8005c08:	080061a5 	.word	0x080061a5
 8005c0c:	200003a4 	.word	0x200003a4
 8005c10:	200003a0 	.word	0x200003a0
 8005c14:	2000038c 	.word	0x2000038c
 8005c18:	20000384 	.word	0x20000384

08005c1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <vTaskSuspendAll+0x18>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a03      	ldr	r2, [pc, #12]	; (8005c34 <vTaskSuspendAll+0x18>)
 8005c28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c2a:	bf00      	nop
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	200003a8 	.word	0x200003a8

08005c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c46:	4b41      	ldr	r3, [pc, #260]	; (8005d4c <xTaskResumeAll+0x114>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <xTaskResumeAll+0x2a>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	e7fe      	b.n	8005c60 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c62:	f000 fda3 	bl	80067ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c66:	4b39      	ldr	r3, [pc, #228]	; (8005d4c <xTaskResumeAll+0x114>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4a37      	ldr	r2, [pc, #220]	; (8005d4c <xTaskResumeAll+0x114>)
 8005c6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c70:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <xTaskResumeAll+0x114>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d161      	bne.n	8005d3c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <xTaskResumeAll+0x118>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05d      	beq.n	8005d3c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c80:	e02e      	b.n	8005ce0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c82:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <xTaskResumeAll+0x11c>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff f91b 	bl	8004eca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff f916 	bl	8004eca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	4b2c      	ldr	r3, [pc, #176]	; (8005d58 <xTaskResumeAll+0x120>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	4a2a      	ldr	r2, [pc, #168]	; (8005d58 <xTaskResumeAll+0x120>)
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <xTaskResumeAll+0x124>)
 8005cbe:	441a      	add	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f7ff f8a2 	bl	8004e10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <xTaskResumeAll+0x128>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005cda:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <xTaskResumeAll+0x12c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <xTaskResumeAll+0x11c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1cc      	bne.n	8005c82 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cee:	f000 fb0b 	bl	8006308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <xTaskResumeAll+0x130>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cfe:	f000 f837 	bl	8005d70 <xTaskIncrementTick>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <xTaskResumeAll+0x12c>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f1      	bne.n	8005cfe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <xTaskResumeAll+0x130>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <xTaskResumeAll+0x12c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <xTaskResumeAll+0x134>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d3c:	f000 fd64 	bl	8006808 <vPortExitCritical>

	return xAlreadyYielded;
 8005d40:	68bb      	ldr	r3, [r7, #8]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200003a8 	.word	0x200003a8
 8005d50:	20000380 	.word	0x20000380
 8005d54:	20000340 	.word	0x20000340
 8005d58:	20000388 	.word	0x20000388
 8005d5c:	20000284 	.word	0x20000284
 8005d60:	20000280 	.word	0x20000280
 8005d64:	20000394 	.word	0x20000394
 8005d68:	20000390 	.word	0x20000390
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <xTaskIncrementTick+0x144>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8087 	bne.w	8005e92 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d84:	4b4c      	ldr	r3, [pc, #304]	; (8005eb8 <xTaskIncrementTick+0x148>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d8c:	4a4a      	ldr	r2, [pc, #296]	; (8005eb8 <xTaskIncrementTick+0x148>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11f      	bne.n	8005dd8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d98:	4b48      	ldr	r3, [pc, #288]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <xTaskIncrementTick+0x46>
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	e7fe      	b.n	8005db4 <xTaskIncrementTick+0x44>
 8005db6:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3e      	ldr	r2, [pc, #248]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4a3e      	ldr	r2, [pc, #248]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <xTaskIncrementTick+0x154>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <xTaskIncrementTick+0x154>)
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	f000 fa98 	bl	8006308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dd8:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d348      	bcc.n	8005e74 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de2:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295
 8005df2:	601a      	str	r2, [r3, #0]
					break;
 8005df4:	e03e      	b.n	8005e74 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df6:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d203      	bcs.n	8005e16 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e0e:	4a2e      	ldr	r2, [pc, #184]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e14:	e02e      	b.n	8005e74 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff f855 	bl	8004eca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	3318      	adds	r3, #24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f84c 	bl	8004eca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	2201      	movs	r2, #1
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <xTaskIncrementTick+0x160>)
 8005e52:	441a      	add	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7fe ffd8 	bl	8004e10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <xTaskIncrementTick+0x164>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d3b9      	bcc.n	8005de2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e72:	e7b6      	b.n	8005de2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e74:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <xTaskIncrementTick+0x164>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	4915      	ldr	r1, [pc, #84]	; (8005ed0 <xTaskIncrementTick+0x160>)
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d907      	bls.n	8005e9c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e004      	b.n	8005e9c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <xTaskIncrementTick+0x168>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3301      	adds	r3, #1
 8005e98:	4a0f      	ldr	r2, [pc, #60]	; (8005ed8 <xTaskIncrementTick+0x168>)
 8005e9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <xTaskIncrementTick+0x16c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ea8:	697b      	ldr	r3, [r7, #20]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200003a8 	.word	0x200003a8
 8005eb8:	20000384 	.word	0x20000384
 8005ebc:	20000338 	.word	0x20000338
 8005ec0:	2000033c 	.word	0x2000033c
 8005ec4:	20000398 	.word	0x20000398
 8005ec8:	200003a0 	.word	0x200003a0
 8005ecc:	20000388 	.word	0x20000388
 8005ed0:	20000284 	.word	0x20000284
 8005ed4:	20000280 	.word	0x20000280
 8005ed8:	20000390 	.word	0x20000390
 8005edc:	20000394 	.word	0x20000394

08005ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ee6:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <vTaskSwitchContext+0xa0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <vTaskSwitchContext+0xa4>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef4:	e03e      	b.n	8005f74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005ef6:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <vTaskSwitchContext+0xa4>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <vTaskSwitchContext+0xa8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	fab3 f383 	clz	r3, r3
 8005f08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
 8005f0c:	f1c3 031f 	rsb	r3, r3, #31
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	491e      	ldr	r1, [pc, #120]	; (8005f8c <vTaskSwitchContext+0xac>)
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	e7fe      	b.n	8005f38 <vTaskSwitchContext+0x58>
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <vTaskSwitchContext+0xac>)
 8005f46:	4413      	add	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d104      	bne.n	8005f6a <vTaskSwitchContext+0x8a>
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <vTaskSwitchContext+0xb0>)
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	200003a8 	.word	0x200003a8
 8005f84:	20000394 	.word	0x20000394
 8005f88:	20000388 	.word	0x20000388
 8005f8c:	20000284 	.word	0x20000284
 8005f90:	20000280 	.word	0x20000280

08005f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <vTaskPlaceOnEventList+0x24>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <vTaskPlaceOnEventList+0x44>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3318      	adds	r3, #24
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fe ff49 	bl	8004e58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f000 fa5f 	bl	800648c <prvAddCurrentTaskToDelayedList>
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000280 	.word	0x20000280

08005fdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <xTaskRemoveFromEventList+0x2a>
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e7fe      	b.n	8006004 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3318      	adds	r3, #24
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe ff5d 	bl	8004eca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <xTaskRemoveFromEventList+0xac>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d11c      	bne.n	8006052 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe ff54 	bl	8004eca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	2201      	movs	r2, #1
 8006028:	409a      	lsls	r2, r3
 800602a:	4b18      	ldr	r3, [pc, #96]	; (800608c <xTaskRemoveFromEventList+0xb0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4313      	orrs	r3, r2
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <xTaskRemoveFromEventList+0xb0>)
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <xTaskRemoveFromEventList+0xb4>)
 8006042:	441a      	add	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f7fe fee0 	bl	8004e10 <vListInsertEnd>
 8006050:	e005      	b.n	800605e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	3318      	adds	r3, #24
 8006056:	4619      	mov	r1, r3
 8006058:	480e      	ldr	r0, [pc, #56]	; (8006094 <xTaskRemoveFromEventList+0xb8>)
 800605a:	f7fe fed9 	bl	8004e10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <xTaskRemoveFromEventList+0xbc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	429a      	cmp	r2, r3
 800606a:	d905      	bls.n	8006078 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <xTaskRemoveFromEventList+0xc0>)
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e001      	b.n	800607c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800607c:	697b      	ldr	r3, [r7, #20]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200003a8 	.word	0x200003a8
 800608c:	20000388 	.word	0x20000388
 8006090:	20000284 	.word	0x20000284
 8006094:	20000340 	.word	0x20000340
 8006098:	20000280 	.word	0x20000280
 800609c:	20000394 	.word	0x20000394

080060a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060a8:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <vTaskInternalSetTimeOutState+0x24>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <vTaskInternalSetTimeOutState+0x28>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20000398 	.word	0x20000398
 80060c8:	20000384 	.word	0x20000384

080060cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <xTaskCheckForTimeOut+0x24>
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e7fe      	b.n	80060ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <xTaskCheckForTimeOut+0x3e>
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e7fe      	b.n	8006108 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800610a:	f000 fb4f 	bl	80067ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <xTaskCheckForTimeOut+0xb8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d102      	bne.n	800612e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e023      	b.n	8006176 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <xTaskCheckForTimeOut+0xbc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d007      	beq.n	800614a <xTaskCheckForTimeOut+0x7e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e015      	b.n	8006176 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	429a      	cmp	r2, r3
 8006152:	d20b      	bcs.n	800616c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff9d 	bl	80060a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	e004      	b.n	8006176 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006172:	2301      	movs	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f000 fb47 	bl	8006808 <vPortExitCritical>

	return xReturn;
 800617a:	69fb      	ldr	r3, [r7, #28]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000384 	.word	0x20000384
 8006188:	20000398 	.word	0x20000398

0800618c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006190:	4b03      	ldr	r3, [pc, #12]	; (80061a0 <vTaskMissedYield+0x14>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000394 	.word	0x20000394

080061a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061ac:	f000 f852 	bl	8006254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <prvIdleTask+0x28>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d9f9      	bls.n	80061ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <prvIdleTask+0x2c>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061c8:	e7f0      	b.n	80061ac <prvIdleTask+0x8>
 80061ca:	bf00      	nop
 80061cc:	20000284 	.word	0x20000284
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	e00c      	b.n	80061fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <prvInitialiseTaskLists+0x60>)
 80061ec:	4413      	add	r3, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fde1 	bl	8004db6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3301      	adds	r3, #1
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b06      	cmp	r3, #6
 80061fe:	d9ef      	bls.n	80061e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006200:	480d      	ldr	r0, [pc, #52]	; (8006238 <prvInitialiseTaskLists+0x64>)
 8006202:	f7fe fdd8 	bl	8004db6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <prvInitialiseTaskLists+0x68>)
 8006208:	f7fe fdd5 	bl	8004db6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800620c:	480c      	ldr	r0, [pc, #48]	; (8006240 <prvInitialiseTaskLists+0x6c>)
 800620e:	f7fe fdd2 	bl	8004db6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006212:	480c      	ldr	r0, [pc, #48]	; (8006244 <prvInitialiseTaskLists+0x70>)
 8006214:	f7fe fdcf 	bl	8004db6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006218:	480b      	ldr	r0, [pc, #44]	; (8006248 <prvInitialiseTaskLists+0x74>)
 800621a:	f7fe fdcc 	bl	8004db6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800621e:	4b0b      	ldr	r3, [pc, #44]	; (800624c <prvInitialiseTaskLists+0x78>)
 8006220:	4a05      	ldr	r2, [pc, #20]	; (8006238 <prvInitialiseTaskLists+0x64>)
 8006222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <prvInitialiseTaskLists+0x7c>)
 8006226:	4a05      	ldr	r2, [pc, #20]	; (800623c <prvInitialiseTaskLists+0x68>)
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000284 	.word	0x20000284
 8006238:	20000310 	.word	0x20000310
 800623c:	20000324 	.word	0x20000324
 8006240:	20000340 	.word	0x20000340
 8006244:	20000354 	.word	0x20000354
 8006248:	2000036c 	.word	0x2000036c
 800624c:	20000338 	.word	0x20000338
 8006250:	2000033c 	.word	0x2000033c

08006254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800625a:	e019      	b.n	8006290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800625c:	f000 faa6 	bl	80067ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <prvCheckTasksWaitingTermination+0x4c>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fe2c 	bl	8004eca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <prvCheckTasksWaitingTermination+0x50>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3b01      	subs	r3, #1
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <prvCheckTasksWaitingTermination+0x50>)
 800627a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <prvCheckTasksWaitingTermination+0x54>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3b01      	subs	r3, #1
 8006282:	4a09      	ldr	r2, [pc, #36]	; (80062a8 <prvCheckTasksWaitingTermination+0x54>)
 8006284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006286:	f000 fabf 	bl	8006808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f80e 	bl	80062ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006290:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <prvCheckTasksWaitingTermination+0x54>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e1      	bne.n	800625c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000354 	.word	0x20000354
 80062a4:	20000380 	.word	0x20000380
 80062a8:	20000368 	.word	0x20000368

080062ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fc4e 	bl	8006b64 <vPortFree>
				vPortFree( pxTCB );
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc4b 	bl	8006b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ce:	e017      	b.n	8006300 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d103      	bne.n	80062e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fc42 	bl	8006b64 <vPortFree>
	}
 80062e0:	e00e      	b.n	8006300 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d009      	beq.n	8006300 <prvDeleteTCB+0x54>
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e7fe      	b.n	80062fe <prvDeleteTCB+0x52>
	}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <prvResetNextTaskUnblockTime+0x38>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006318:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <prvResetNextTaskUnblockTime+0x3c>)
 800631a:	f04f 32ff 	mov.w	r2, #4294967295
 800631e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006320:	e008      	b.n	8006334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <prvResetNextTaskUnblockTime+0x38>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <prvResetNextTaskUnblockTime+0x3c>)
 8006332:	6013      	str	r3, [r2, #0]
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	20000338 	.word	0x20000338
 8006344:	200003a0 	.word	0x200003a0

08006348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <xTaskGetSchedulerState+0x34>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006356:	2301      	movs	r3, #1
 8006358:	607b      	str	r3, [r7, #4]
 800635a:	e008      	b.n	800636e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635c:	4b08      	ldr	r3, [pc, #32]	; (8006380 <xTaskGetSchedulerState+0x38>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006364:	2302      	movs	r3, #2
 8006366:	607b      	str	r3, [r7, #4]
 8006368:	e001      	b.n	800636e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800636e:	687b      	ldr	r3, [r7, #4]
	}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	2000038c 	.word	0x2000038c
 8006380:	200003a8 	.word	0x200003a8

08006384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06c      	beq.n	8006474 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <xTaskPriorityDisinherit+0xfc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d009      	beq.n	80063b8 <xTaskPriorityDisinherit+0x34>
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e7fe      	b.n	80063b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <xTaskPriorityDisinherit+0x50>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	e7fe      	b.n	80063d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	1e5a      	subs	r2, r3, #1
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d044      	beq.n	8006474 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d140      	bne.n	8006474 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fd67 	bl	8004eca <uxListRemove>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d115      	bne.n	800642e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	491f      	ldr	r1, [pc, #124]	; (8006484 <xTaskPriorityDisinherit+0x100>)
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xTaskPriorityDisinherit+0xaa>
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	2201      	movs	r2, #1
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <xTaskPriorityDisinherit+0x104>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4013      	ands	r3, r2
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <xTaskPriorityDisinherit+0x104>)
 800642c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	f1c3 0207 	rsb	r2, r3, #7
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	2201      	movs	r2, #1
 8006448:	409a      	lsls	r2, r3
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <xTaskPriorityDisinherit+0x104>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4313      	orrs	r3, r2
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <xTaskPriorityDisinherit+0x104>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4a08      	ldr	r2, [pc, #32]	; (8006484 <xTaskPriorityDisinherit+0x100>)
 8006462:	441a      	add	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7fe fcd0 	bl	8004e10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006474:	697b      	ldr	r3, [r7, #20]
	}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000280 	.word	0x20000280
 8006484:	20000284 	.word	0x20000284
 8006488:	20000388 	.word	0x20000388

0800648c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006496:	4b29      	ldr	r3, [pc, #164]	; (800653c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800649c:	4b28      	ldr	r3, [pc, #160]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fd11 	bl	8004eca <uxListRemove>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	2201      	movs	r2, #1
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43da      	mvns	r2, r3
 80064bc:	4b21      	ldr	r3, [pc, #132]	; (8006544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4013      	ands	r3, r2
 80064c2:	4a20      	ldr	r2, [pc, #128]	; (8006544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d10a      	bne.n	80064e4 <prvAddCurrentTaskToDelayedList+0x58>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064d4:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3304      	adds	r3, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	481a      	ldr	r0, [pc, #104]	; (8006548 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064de:	f7fe fc97 	bl	8004e10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064e2:	e026      	b.n	8006532 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4413      	add	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d209      	bcs.n	8006510 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <prvAddCurrentTaskToDelayedList+0xc0>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f7fe fca5 	bl	8004e58 <vListInsert>
}
 800650e:	e010      	b.n	8006532 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f7fe fc9b 	bl	8004e58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	d202      	bcs.n	8006532 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800652c:	4a09      	ldr	r2, [pc, #36]	; (8006554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6013      	str	r3, [r2, #0]
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000384 	.word	0x20000384
 8006540:	20000280 	.word	0x20000280
 8006544:	20000388 	.word	0x20000388
 8006548:	2000036c 	.word	0x2000036c
 800654c:	2000033c 	.word	0x2000033c
 8006550:	20000338 	.word	0x20000338
 8006554:	200003a0 	.word	0x200003a0

08006558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b04      	subs	r3, #4
 8006568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b04      	subs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f023 0201 	bic.w	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3b04      	subs	r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006588:	4a0c      	ldr	r2, [pc, #48]	; (80065bc <pxPortInitialiseStack+0x64>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b14      	subs	r3, #20
 8006592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b04      	subs	r3, #4
 800659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f06f 0202 	mvn.w	r2, #2
 80065a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b20      	subs	r3, #32
 80065ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065ae:	68fb      	ldr	r3, [r7, #12]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	080065c1 	.word	0x080065c1

080065c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <prvTaskExitError+0x50>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d009      	beq.n	80065e8 <prvTaskExitError+0x28>
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e7fe      	b.n	80065e6 <prvTaskExitError+0x26>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065fa:	bf00      	nop
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0fc      	beq.n	80065fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	2000000c 	.word	0x2000000c
	...

08006620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <pxCurrentTCBConst2>)
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	6808      	ldr	r0, [r1, #0]
 8006626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	f380 8809 	msr	PSP, r0
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8811 	msr	BASEPRI, r0
 800663a:	4770      	bx	lr
 800663c:	f3af 8000 	nop.w

08006640 <pxCurrentTCBConst2>:
 8006640:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop

08006648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006648:	4808      	ldr	r0, [pc, #32]	; (800666c <prvPortStartFirstTask+0x24>)
 800664a:	6800      	ldr	r0, [r0, #0]
 800664c:	6800      	ldr	r0, [r0, #0]
 800664e:	f380 8808 	msr	MSP, r0
 8006652:	f04f 0000 	mov.w	r0, #0
 8006656:	f380 8814 	msr	CONTROL, r0
 800665a:	b662      	cpsie	i
 800665c:	b661      	cpsie	f
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	df00      	svc	0
 8006668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800666a:	bf00      	nop
 800666c:	e000ed08 	.word	0xe000ed08

08006670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006676:	4b44      	ldr	r3, [pc, #272]	; (8006788 <xPortStartScheduler+0x118>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a44      	ldr	r2, [pc, #272]	; (800678c <xPortStartScheduler+0x11c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d109      	bne.n	8006694 <xPortStartScheduler+0x24>
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e7fe      	b.n	8006692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006694:	4b3c      	ldr	r3, [pc, #240]	; (8006788 <xPortStartScheduler+0x118>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a3d      	ldr	r2, [pc, #244]	; (8006790 <xPortStartScheduler+0x120>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d109      	bne.n	80066b2 <xPortStartScheduler+0x42>
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e7fe      	b.n	80066b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066b2:	4b38      	ldr	r3, [pc, #224]	; (8006794 <xPortStartScheduler+0x124>)
 80066b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	22ff      	movs	r2, #255	; 0xff
 80066c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	4b30      	ldr	r3, [pc, #192]	; (8006798 <xPortStartScheduler+0x128>)
 80066d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066da:	4b30      	ldr	r3, [pc, #192]	; (800679c <xPortStartScheduler+0x12c>)
 80066dc:	2207      	movs	r2, #7
 80066de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066e0:	e009      	b.n	80066f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80066e2:	4b2e      	ldr	r3, [pc, #184]	; (800679c <xPortStartScheduler+0x12c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4a2c      	ldr	r2, [pc, #176]	; (800679c <xPortStartScheduler+0x12c>)
 80066ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b80      	cmp	r3, #128	; 0x80
 8006700:	d0ef      	beq.n	80066e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006702:	4b26      	ldr	r3, [pc, #152]	; (800679c <xPortStartScheduler+0x12c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f1c3 0307 	rsb	r3, r3, #7
 800670a:	2b04      	cmp	r3, #4
 800670c:	d009      	beq.n	8006722 <xPortStartScheduler+0xb2>
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60bb      	str	r3, [r7, #8]
 8006720:	e7fe      	b.n	8006720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006722:	4b1e      	ldr	r3, [pc, #120]	; (800679c <xPortStartScheduler+0x12c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	4a1c      	ldr	r2, [pc, #112]	; (800679c <xPortStartScheduler+0x12c>)
 800672a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800672c:	4b1b      	ldr	r3, [pc, #108]	; (800679c <xPortStartScheduler+0x12c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006734:	4a19      	ldr	r2, [pc, #100]	; (800679c <xPortStartScheduler+0x12c>)
 8006736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006740:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <xPortStartScheduler+0x130>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <xPortStartScheduler+0x130>)
 8006746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800674a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800674c:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <xPortStartScheduler+0x130>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <xPortStartScheduler+0x130>)
 8006752:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006758:	f000 f8d6 	bl	8006908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <xPortStartScheduler+0x134>)
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006762:	f000 f8f5 	bl	8006950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006766:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <xPortStartScheduler+0x138>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a0f      	ldr	r2, [pc, #60]	; (80067a8 <xPortStartScheduler+0x138>)
 800676c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006772:	f7ff ff69 	bl	8006648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006776:	f7ff fbb3 	bl	8005ee0 <vTaskSwitchContext>
	prvTaskExitError();
 800677a:	f7ff ff21 	bl	80065c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed00 	.word	0xe000ed00
 800678c:	410fc271 	.word	0x410fc271
 8006790:	410fc270 	.word	0x410fc270
 8006794:	e000e400 	.word	0xe000e400
 8006798:	200003ac 	.word	0x200003ac
 800679c:	200003b0 	.word	0x200003b0
 80067a0:	e000ed20 	.word	0xe000ed20
 80067a4:	2000000c 	.word	0x2000000c
 80067a8:	e000ef34 	.word	0xe000ef34

080067ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <vPortEnterCritical+0x54>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	4a0d      	ldr	r2, [pc, #52]	; (8006800 <vPortEnterCritical+0x54>)
 80067cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <vPortEnterCritical+0x54>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10e      	bne.n	80067f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <vPortEnterCritical+0x58>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <vPortEnterCritical+0x48>
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	e7fe      	b.n	80067f2 <vPortEnterCritical+0x46>
	}
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	2000000c 	.word	0x2000000c
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <vPortExitCritical+0x4c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <vPortExitCritical+0x22>
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	607b      	str	r3, [r7, #4]
 8006828:	e7fe      	b.n	8006828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <vPortExitCritical+0x4c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3b01      	subs	r3, #1
 8006830:	4a08      	ldr	r2, [pc, #32]	; (8006854 <vPortExitCritical+0x4c>)
 8006832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <vPortExitCritical+0x4c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <vPortExitCritical+0x3e>
 800683c:	2300      	movs	r3, #0
 800683e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	2000000c 	.word	0x2000000c
	...

08006860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006860:	f3ef 8009 	mrs	r0, PSP
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <pxCurrentTCBConst>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f01e 0f10 	tst.w	lr, #16
 8006870:	bf08      	it	eq
 8006872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	6010      	str	r0, [r2, #0]
 800687c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006884:	f380 8811 	msr	BASEPRI, r0
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f7ff fb26 	bl	8005ee0 <vTaskSwitchContext>
 8006894:	f04f 0000 	mov.w	r0, #0
 8006898:	f380 8811 	msr	BASEPRI, r0
 800689c:	bc09      	pop	{r0, r3}
 800689e:	6819      	ldr	r1, [r3, #0]
 80068a0:	6808      	ldr	r0, [r1, #0]
 80068a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a6:	f01e 0f10 	tst.w	lr, #16
 80068aa:	bf08      	it	eq
 80068ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068b0:	f380 8809 	msr	PSP, r0
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	f3af 8000 	nop.w

080068c0 <pxCurrentTCBConst>:
 80068c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068e0:	f7ff fa46 	bl	8005d70 <xTaskIncrementTick>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <SysTick_Handler+0x3c>)
 80068ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	2300      	movs	r3, #0
 80068f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <vPortSetupTimerInterrupt+0x34>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <vPortSetupTimerInterrupt+0x38>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <vPortSetupTimerInterrupt+0x3c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <vPortSetupTimerInterrupt+0x40>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	099b      	lsrs	r3, r3, #6
 8006924:	4a09      	ldr	r2, [pc, #36]	; (800694c <vPortSetupTimerInterrupt+0x44>)
 8006926:	3b01      	subs	r3, #1
 8006928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800692a:	4b04      	ldr	r3, [pc, #16]	; (800693c <vPortSetupTimerInterrupt+0x34>)
 800692c:	2207      	movs	r2, #7
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	bf00      	nop
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	e000e010 	.word	0xe000e010
 8006940:	e000e018 	.word	0xe000e018
 8006944:	20000000 	.word	0x20000000
 8006948:	10624dd3 	.word	0x10624dd3
 800694c:	e000e014 	.word	0xe000e014

08006950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006960 <vPortEnableVFP+0x10>
 8006954:	6801      	ldr	r1, [r0, #0]
 8006956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800695a:	6001      	str	r1, [r0, #0]
 800695c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800695e:	bf00      	nop
 8006960:	e000ed88 	.word	0xe000ed88

08006964 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800696a:	f3ef 8305 	mrs	r3, IPSR
 800696e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d913      	bls.n	800699e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <vPortValidateInterruptPriority+0x6c>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006980:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <vPortValidateInterruptPriority+0x70>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	7afa      	ldrb	r2, [r7, #11]
 8006986:	429a      	cmp	r2, r3
 8006988:	d209      	bcs.n	800699e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	e7fe      	b.n	800699c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800699e:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <vPortValidateInterruptPriority+0x74>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <vPortValidateInterruptPriority+0x78>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d909      	bls.n	80069c2 <vPortValidateInterruptPriority+0x5e>
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	e7fe      	b.n	80069c0 <vPortValidateInterruptPriority+0x5c>
	}
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	e000e3f0 	.word	0xe000e3f0
 80069d4:	200003ac 	.word	0x200003ac
 80069d8:	e000ed0c 	.word	0xe000ed0c
 80069dc:	200003b0 	.word	0x200003b0

080069e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069ec:	f7ff f916 	bl	8005c1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069f0:	4b57      	ldr	r3, [pc, #348]	; (8006b50 <pvPortMalloc+0x170>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069f8:	f000 f90c 	bl	8006c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069fc:	4b55      	ldr	r3, [pc, #340]	; (8006b54 <pvPortMalloc+0x174>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 808c 	bne.w	8006b22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01c      	beq.n	8006a4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006a10:	2208      	movs	r2, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4413      	add	r3, r2
 8006a16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f023 0307 	bic.w	r3, r3, #7
 8006a28:	3308      	adds	r3, #8
 8006a2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <pvPortMalloc+0x6a>
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e7fe      	b.n	8006a48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d068      	beq.n	8006b22 <pvPortMalloc+0x142>
 8006a50:	4b41      	ldr	r3, [pc, #260]	; (8006b58 <pvPortMalloc+0x178>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d863      	bhi.n	8006b22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a5a:	4b40      	ldr	r3, [pc, #256]	; (8006b5c <pvPortMalloc+0x17c>)
 8006a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a5e:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <pvPortMalloc+0x17c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a64:	e004      	b.n	8006a70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d903      	bls.n	8006a82 <pvPortMalloc+0xa2>
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f1      	bne.n	8006a66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a82:	4b33      	ldr	r3, [pc, #204]	; (8006b50 <pvPortMalloc+0x170>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d04a      	beq.n	8006b22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2208      	movs	r2, #8
 8006a92:	4413      	add	r3, r2
 8006a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d91e      	bls.n	8006aec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <pvPortMalloc+0xf4>
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	e7fe      	b.n	8006ad2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ae6:	69b8      	ldr	r0, [r7, #24]
 8006ae8:	f000 f8f6 	bl	8006cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aec:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <pvPortMalloc+0x178>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <pvPortMalloc+0x178>)
 8006af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <pvPortMalloc+0x178>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <pvPortMalloc+0x180>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d203      	bcs.n	8006b0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <pvPortMalloc+0x178>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <pvPortMalloc+0x180>)
 8006b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <pvPortMalloc+0x174>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b22:	f7ff f889 	bl	8005c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d009      	beq.n	8006b44 <pvPortMalloc+0x164>
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e7fe      	b.n	8006b42 <pvPortMalloc+0x162>
	return pvReturn;
 8006b44:	69fb      	ldr	r3, [r7, #28]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3728      	adds	r7, #40	; 0x28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20003fbc 	.word	0x20003fbc
 8006b54:	20003fc8 	.word	0x20003fc8
 8006b58:	20003fc0 	.word	0x20003fc0
 8006b5c:	20003fb4 	.word	0x20003fb4
 8006b60:	20003fc4 	.word	0x20003fc4

08006b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d046      	beq.n	8006c04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b76:	2308      	movs	r3, #8
 8006b78:	425b      	negs	r3, r3
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	4b20      	ldr	r3, [pc, #128]	; (8006c0c <vPortFree+0xa8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <vPortFree+0x42>
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e7fe      	b.n	8006ba4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <vPortFree+0x5e>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	e7fe      	b.n	8006bc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <vPortFree+0xa8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d019      	beq.n	8006c04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d115      	bne.n	8006c04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <vPortFree+0xa8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006be8:	f7ff f818 	bl	8005c1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <vPortFree+0xac>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <vPortFree+0xac>)
 8006bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f86c 	bl	8006cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c00:	f7ff f81a 	bl	8005c38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20003fc8 	.word	0x20003fc8
 8006c10:	20003fc0 	.word	0x20003fc0

08006c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c20:	4b27      	ldr	r3, [pc, #156]	; (8006cc0 <prvHeapInit+0xac>)
 8006c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3307      	adds	r3, #7
 8006c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <prvHeapInit+0xac>)
 8006c44:	4413      	add	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c4c:	4a1d      	ldr	r2, [pc, #116]	; (8006cc4 <prvHeapInit+0xb0>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <prvHeapInit+0xb0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c60:	2208      	movs	r2, #8
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <prvHeapInit+0xb8>)
 8006ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a09      	ldr	r2, [pc, #36]	; (8006cd0 <prvHeapInit+0xbc>)
 8006caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvHeapInit+0xc0>)
 8006cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	200003b4 	.word	0x200003b4
 8006cc4:	20003fb4 	.word	0x20003fb4
 8006cc8:	20003fbc 	.word	0x20003fbc
 8006ccc:	20003fc4 	.word	0x20003fc4
 8006cd0:	20003fc0 	.word	0x20003fc0
 8006cd4:	20003fc8 	.word	0x20003fc8

08006cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce0:	4b28      	ldr	r3, [pc, #160]	; (8006d84 <prvInsertBlockIntoFreeList+0xac>)
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e002      	b.n	8006cec <prvInsertBlockIntoFreeList+0x14>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d8f7      	bhi.n	8006ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d108      	bne.n	8006d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d118      	bne.n	8006d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <prvInsertBlockIntoFreeList+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d00d      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e008      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <prvInsertBlockIntoFreeList+0xb0>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e003      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d002      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20003fb4 	.word	0x20003fb4
 8006d88:	20003fbc 	.word	0x20003fbc

08006d8c <__libc_init_array>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	4e0d      	ldr	r6, [pc, #52]	; (8006dc4 <__libc_init_array+0x38>)
 8006d90:	4c0d      	ldr	r4, [pc, #52]	; (8006dc8 <__libc_init_array+0x3c>)
 8006d92:	1ba4      	subs	r4, r4, r6
 8006d94:	10a4      	asrs	r4, r4, #2
 8006d96:	2500      	movs	r5, #0
 8006d98:	42a5      	cmp	r5, r4
 8006d9a:	d109      	bne.n	8006db0 <__libc_init_array+0x24>
 8006d9c:	4e0b      	ldr	r6, [pc, #44]	; (8006dcc <__libc_init_array+0x40>)
 8006d9e:	4c0c      	ldr	r4, [pc, #48]	; (8006dd0 <__libc_init_array+0x44>)
 8006da0:	f000 f82c 	bl	8006dfc <_init>
 8006da4:	1ba4      	subs	r4, r4, r6
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	2500      	movs	r5, #0
 8006daa:	42a5      	cmp	r5, r4
 8006dac:	d105      	bne.n	8006dba <__libc_init_array+0x2e>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006db4:	4798      	blx	r3
 8006db6:	3501      	adds	r5, #1
 8006db8:	e7ee      	b.n	8006d98 <__libc_init_array+0xc>
 8006dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dbe:	4798      	blx	r3
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	e7f2      	b.n	8006daa <__libc_init_array+0x1e>
 8006dc4:	08006eb0 	.word	0x08006eb0
 8006dc8:	08006eb0 	.word	0x08006eb0
 8006dcc:	08006eb0 	.word	0x08006eb0
 8006dd0:	08006eb4 	.word	0x08006eb4

08006dd4 <memcpy>:
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	1e43      	subs	r3, r0, #1
 8006dd8:	440a      	add	r2, r1
 8006dda:	4291      	cmp	r1, r2
 8006ddc:	d100      	bne.n	8006de0 <memcpy+0xc>
 8006dde:	bd10      	pop	{r4, pc}
 8006de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de8:	e7f7      	b.n	8006dda <memcpy+0x6>

08006dea <memset>:
 8006dea:	4402      	add	r2, r0
 8006dec:	4603      	mov	r3, r0
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d100      	bne.n	8006df4 <memset+0xa>
 8006df2:	4770      	bx	lr
 8006df4:	f803 1b01 	strb.w	r1, [r3], #1
 8006df8:	e7f9      	b.n	8006dee <memset+0x4>
	...

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
