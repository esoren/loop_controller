
loop_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800791c  0800791c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007924  08007924  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800792c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004178  200001e0  08007b0c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004358  08007b0c  00024358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a687  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b86  00000000  00000000  0003a897  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b0  00000000  00000000  0003e420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f13  00000000  00000000  00040da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d95  00000000  00000000  00059cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a84b  00000000  00000000  0006ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010729b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a58  00000000  00000000  00107318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007728 	.word	0x08007728

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007728 	.word	0x08007728

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0x98>)
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_ADC1_Init+0x9c>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ADC1_Init+0x98>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ADC1_Init+0x98>)
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_ADC1_Init+0xa0>)
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_ADC1_Init+0x98>)
 800053e:	2201      	movs	r2, #1
 8000540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0x98>)
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <MX_ADC1_Init+0x98>)
 8000552:	f001 fa51 	bl	80019f8 <HAL_ADC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800055c:	f000 fa60 	bl	8000a20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0x98>)
 8000572:	f001 fa85 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800057c:	f000 fa50 	bl	8000a20 <Error_Handler>
  }

}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000419c 	.word	0x2000419c
 800058c:	40012000 	.word	0x40012000
 8000590:	0f000001 	.word	0x0f000001

08000594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <HAL_ADC_MspInit+0x7c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d127      	bne.n	8000606 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c4:	6453      	str	r3, [r2, #68]	; 0x44
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <HAL_ADC_MspInit+0x84>)
 8000602:	f001 fd5f 	bl	80020c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40012000 	.word	0x40012000
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000

0800061c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <vApplicationGetIdleTaskMemory+0x2c>)
 800062c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <vApplicationGetIdleTaskMemory+0x30>)
 8000632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200001fc 	.word	0x200001fc
 800064c:	20000250 	.word	0x20000250

08000650 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


	xMotorQueue = xQueueCreate(30, sizeof(motorMessage_t));
 8000656:	2200      	movs	r2, #0
 8000658:	2108      	movs	r1, #8
 800065a:	201e      	movs	r0, #30
 800065c:	f005 f8aa 	bl	80057b4 <xQueueGenericCreate>
 8000660:	4602      	mov	r2, r0
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_FREERTOS_Init+0x9c>)
 8000664:	601a      	str	r2, [r3, #0]
	xSerialQueue = xQueueCreate(30, 1); //bytes to transfer to UART task
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	201e      	movs	r0, #30
 800066c:	f005 f8a2 	bl	80057b4 <xQueueGenericCreate>
 8000670:	4602      	mov	r2, r0
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_FREERTOS_Init+0xa0>)
 8000674:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_FREERTOS_Init+0xa4>)
 8000678:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f004 ff12 	bl	80054ba <osThreadCreate>
 8000696:	4602      	mov	r2, r0
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_FREERTOS_Init+0xa8>)
 800069a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_FREERTOS_Init+0xac>)
 800069e:	f107 0420 	add.w	r4, r7, #32
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 feff 	bl	80054ba <osThreadCreate>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_FREERTOS_Init+0xb0>)
 80006c0:	601a      	str	r2, [r3, #0]

  osThreadDef(serialTask, StartSerialTask, osPriorityNormal, 0, 128);
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_FREERTOS_Init+0xb4>)
 80006c4:	1d3c      	adds	r4, r7, #4
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialTaskHandle = osThreadCreate(osThread(serialTask), NULL);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 feee 	bl	80054ba <osThreadCreate>
 80006de:	4602      	mov	r2, r0
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_FREERTOS_Init+0xb8>)
 80006e2:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

}
 80006e4:	bf00      	nop
 80006e6:	3758      	adds	r7, #88	; 0x58
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}
 80006ec:	200041f0 	.word	0x200041f0
 80006f0:	2000430c 	.word	0x2000430c
 80006f4:	0800774c 	.word	0x0800774c
 80006f8:	200041e4 	.word	0x200041e4
 80006fc:	08007774 	.word	0x08007774
 8000700:	200041ec 	.word	0x200041ec
 8000704:	0800779c 	.word	0x0800779c
 8000708:	200041e8 	.word	0x200041e8

0800070c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  uint8_t first_run = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	77fb      	strb	r3, [r7, #31]
  motorMessage_t motorMessage;
  BaseType_t xStatus;
  uint8_t manual_run = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	77bb      	strb	r3, [r7, #30]
  uint32_t manual_step = 25000;
 800071c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000720:	61bb      	str	r3, [r7, #24]
  uint8_t turn_off_motor = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	777b      	strb	r3, [r7, #29]
  uint8_t turn_on_motor = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]

	  	//Testing on 06/07/2022
	  	//25300 = CW band of 20m


		if(manual_run) {
 800072a:	7fbb      	ldrb	r3, [r7, #30]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00e      	beq.n	800074e <StartDefaultTask+0x42>
				motorMessage.motorCommand = MOVE_TO_POSITION;
 8000730:	2302      	movs	r3, #2
 8000732:	723b      	strb	r3, [r7, #8]
				motorMessage.steps = manual_step;
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	60fb      	str	r3, [r7, #12]

				xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <StartDefaultTask+0x98>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	2300      	movs	r3, #0
 8000742:	2200      	movs	r2, #0
 8000744:	f005 f894 	bl	8005870 <xQueueGenericSend>
 8000748:	6138      	str	r0, [r7, #16]

				if (xStatus != pdPASS) {
					//todo: add an assert or wait
				}
				manual_run = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	77bb      	strb	r3, [r7, #30]
		}

		if(turn_off_motor) {
 800074e:	7f7b      	ldrb	r3, [r7, #29]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <StartDefaultTask+0x50>
			disable_motor_driver();
 8000754:	f000 f974 	bl	8000a40 <disable_motor_driver>
			turn_off_motor  = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	777b      	strb	r3, [r7, #29]
		}

	if(first_run) {
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d01c      	beq.n	800079c <StartDefaultTask+0x90>
		motorMessage.motorCommand = HOME;
 8000762:	2301      	movs	r3, #1
 8000764:	723b      	strb	r3, [r7, #8]
		motorMessage.steps = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <StartDefaultTask+0x98>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f107 0108 	add.w	r1, r7, #8
 8000772:	2300      	movs	r3, #0
 8000774:	2200      	movs	r2, #0
 8000776:	f005 f87b 	bl	8005870 <xQueueGenericSend>
 800077a:	6138      	str	r0, [r7, #16]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		motorMessage.motorCommand = MOVE_TO_POSITION;
 800077c:	2302      	movs	r3, #2
 800077e:	723b      	strb	r3, [r7, #8]
		//motorMessage.steps = 25300;
		motorMessage.steps = 1000;
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	60fb      	str	r3, [r7, #12]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <StartDefaultTask+0x98>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	f107 0108 	add.w	r1, r7, #8
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	f005 f86d 	bl	8005870 <xQueueGenericSend>
 8000796:	6138      	str	r0, [r7, #16]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		first_run = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	77fb      	strb	r3, [r7, #31]

  	}

      osDelay(50);
 800079c:	2032      	movs	r0, #50	; 0x32
 800079e:	f004 fed8 	bl	8005552 <osDelay>
		if(manual_run) {
 80007a2:	e7c2      	b.n	800072a <StartDefaultTask+0x1e>
 80007a4:	200041f0 	.word	0x200041f0

080007a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b40      	ldr	r3, [pc, #256]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <MX_GPIO_Init+0x128>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000834:	4827      	ldr	r0, [pc, #156]	; (80008d4 <MX_GPIO_Init+0x12c>)
 8000836:	f001 fdc7 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000840:	4825      	ldr	r0, [pc, #148]	; (80008d8 <MX_GPIO_Init+0x130>)
 8000842:	f001 fdc1 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_EN_Pin|TMC_PWR_Pin|MOTOR_CS_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7150 	mov.w	r1, #832	; 0x340
 800084c:	4823      	ldr	r0, [pc, #140]	; (80008dc <MX_GPIO_Init+0x134>)
 800084e:	f001 fdbb 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x138>)
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	481c      	ldr	r0, [pc, #112]	; (80008d8 <MX_GPIO_Init+0x130>)
 8000868:	f001 fc2c 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 800086c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x12c>)
 8000886:	f001 fc1d 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_GPIO_Init+0x130>)
 80008a4:	f001 fc0e 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TMC_EN_Pin|TMC_PWR_Pin|MOTOR_CS_Pin;
 80008a8:	f44f 7350 	mov.w	r3, #832	; 0x340
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_GPIO_Init+0x134>)
 80008c2:	f001 fbff 	bl	80020c4 <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020400 	.word	0x40020400
 80008e0:	10210000 	.word	0x10210000

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f001 f822 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f81a 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f7ff ff5a 	bl	80007a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008f4:	f000 f9d2 	bl	8000c9c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 fe82 	bl	8001600 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008fc:	f7ff fdf8 	bl	80004f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000900:	f000 fb4c 	bl	8000f9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000904:	f000 fbee 	bl	80010e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  enable_motor_driver();
 8000908:	f000 f88e 	bl	8000a28 <enable_motor_driver>
  tmc_init();
 800090c:	f000 fe0e 	bl	800152c <tmc_init>

  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000910:	2003      	movs	r0, #3
 8000912:	f001 fb80 	bl	8002016 <HAL_NVIC_SetPriorityGrouping>

  setup_uart_receive();
 8000916:	f000 ff1d 	bl	8001754 <setup_uart_receive>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800091a:	f7ff fe99 	bl	8000650 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800091e:	f004 fdc5 	bl	80054ac <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000922:	e7fe      	b.n	8000922 <main+0x3e>

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f006 fe3d 	bl	80075b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <SystemClock_Config+0xd0>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <SystemClock_Config+0xd0>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <SystemClock_Config+0xd0>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <SystemClock_Config+0xd4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd4>)
 8000972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000998:	2310      	movs	r3, #16
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800099c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a6:	2307      	movs	r3, #7
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fd24 	bl	80023fc <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009ba:	f000 f831 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 ff7e 	bl	80028dc <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009e6:	f000 f81b 	bl	8000a20 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 ffb1 	bl	8001974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40000c00 	.word	0x40000c00

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x4>
	...

08000a28 <enable_motor_driver>:

void power_off_motor_driver(void) { //turn on by re-init
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
}

void enable_motor_driver(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <enable_motor_driver+0x14>)
 8000a32:	f001 fcc9 	bl	80023c8 <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020400 	.word	0x40020400

08000a40 <disable_motor_driver>:

void disable_motor_driver(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <disable_motor_driver+0x14>)
 8000a4a:	f001 fcbd 	bl	80023c8 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020400 	.word	0x40020400

08000a58 <set_motor_dir>:


void set_motor_dir(uint8_t motor_dir) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	if(motor_dir == 0) {
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d106      	bne.n	8000a76 <set_motor_dir+0x1e>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <set_motor_dir+0x34>)
 8000a70:	f001 fcaa 	bl	80023c8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
	}
}
 8000a74:	e005      	b.n	8000a82 <set_motor_dir+0x2a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <set_motor_dir+0x34>)
 8000a7e:	f001 fca3 	bl	80023c8 <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020000 	.word	0x40020000

08000a90 <send_motor_steps>:

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	enable_motor_driver();
 8000a9a:	f7ff ffc5 	bl	8000a28 <enable_motor_driver>
	__HAL_TIM_SET_AUTORELOAD(&htim1, step_count);
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <send_motor_steps+0x5c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <send_motor_steps+0x5c>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <send_motor_steps+0x5c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <send_motor_steps+0x5c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0201 	orr.w	r2, r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000abc:	2100      	movs	r1, #0
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <send_motor_steps+0x5c>)
 8000ac0:	f002 fc74 	bl	80033ac <HAL_TIM_OC_Start_IT>

	__HAL_TIM_SET_AUTORELOAD(&htim2,delay_in_us);
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <send_motor_steps+0x60>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <send_motor_steps+0x60>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <send_motor_steps+0x60>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ada:	2108      	movs	r1, #8
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <send_motor_steps+0x60>)
 8000ade:	f002 fda1 	bl	8003624 <HAL_TIM_PWM_Start>

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000428c 	.word	0x2000428c
 8000af0:	200042cc 	.word	0x200042cc

08000af4 <stop_motor>:


void stop_motor() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000af8:	2108      	movs	r1, #8
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <stop_motor+0x1c>)
 8000afc:	f002 fdc4 	bl	8003688 <HAL_TIM_PWM_Stop>
	  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000b00:	2100      	movs	r1, #0
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <stop_motor+0x20>)
 8000b04:	f002 fcca 	bl	800349c <HAL_TIM_OC_Stop_IT>
	  disable_motor_driver();
 8000b08:	f7ff ff9a 	bl	8000a40 <disable_motor_driver>
	  return;
 8000b0c:	bf00      	nop
}
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200042cc 	.word	0x200042cc
 8000b14:	2000428c 	.word	0x2000428c

08000b18 <StartMotorTask>:

void StartMotorTask(void const *argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	motorMessage_t motorMessage;
	BaseType_t xStatus;
	uint8_t homing = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t start_movement = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t moving = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint32_t current_position_in_steps = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t target_position_in_steps = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t next_target_position_in_steps = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t step_delta = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
	for(;;)
	  {


		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000b42:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <StartMotorTask+0x170>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f005 f8fc 	bl	8005d44 <uxQueueMessagesWaiting>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d033      	beq.n	8000bba <StartMotorTask+0xa2>
			xStatus = xQueueReceive(xMotorQueue, &motorMessage, 0);
 8000b52:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <StartMotorTask+0x170>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f107 010c 	add.w	r1, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 f815 	bl	8005b8c <xQueueReceive>
 8000b62:	61f8      	str	r0, [r7, #28]
			if (xStatus == pdPASS) {
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d127      	bne.n	8000bba <StartMotorTask+0xa2>

				switch (motorMessage.motorCommand) {
 8000b6a:	7b3b      	ldrb	r3, [r7, #12]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d00d      	beq.n	8000b8c <StartMotorTask+0x74>
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d011      	beq.n	8000b98 <StartMotorTask+0x80>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d120      	bne.n	8000bba <StartMotorTask+0xa2>
					case (HOME):
						debugPrintln(&huart2, "Homing Started.");
 8000b78:	4944      	ldr	r1, [pc, #272]	; (8000c8c <StartMotorTask+0x174>)
 8000b7a:	4845      	ldr	r0, [pc, #276]	; (8000c90 <StartMotorTask+0x178>)
 8000b7c:	f000 fdba 	bl	80016f4 <debugPrintln>
						target_position_in_steps = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
						homing = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8000b8a:	e016      	b.n	8000bba <StartMotorTask+0xa2>
					case(MOVE_TO_POSITION):
						next_target_position_in_steps = motorMessage.steps;
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
						start_movement = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						break;
 8000b96:	e010      	b.n	8000bba <StartMotorTask+0xa2>
					case(STOP_MOTOR):
						if(!homing) {
 8000b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10b      	bne.n	8000bb8 <StartMotorTask+0xa0>
							moving = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							current_position_in_steps = target_position_in_steps; //todo: check the status of the counter and adjust, if necessary
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
							debugPrintln(&huart2, "Motor Stopped.");
 8000baa:	493a      	ldr	r1, [pc, #232]	; (8000c94 <StartMotorTask+0x17c>)
 8000bac:	4838      	ldr	r0, [pc, #224]	; (8000c90 <StartMotorTask+0x178>)
 8000bae:	f000 fda1 	bl	80016f4 <debugPrintln>
							disable_motor_driver();
 8000bb2:	f7ff ff45 	bl	8000a40 <disable_motor_driver>
						}
						break;
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
			} else {
				//todo: error handling
			}
		}

		if(homing) { //todo: make this non-blocking
 8000bba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d036      	beq.n	8000c30 <StartMotorTask+0x118>
			set_motor_dir(0);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff ff48 	bl	8000a58 <set_motor_dir>
			uint32_t wait = 20000;
 8000bc8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bcc:	61bb      	str	r3, [r7, #24]
			uint32_t at_home_position = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
			uint8_t status = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]

			while(homing) {
 8000bd6:	e026      	b.n	8000c26 <StartMotorTask+0x10e>
			  if(!at_home_position) {
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d123      	bne.n	8000c26 <StartMotorTask+0x10e>
				  send_motor_steps(100,wait);
 8000bde:	69b9      	ldr	r1, [r7, #24]
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f7ff ff55 	bl	8000a90 <send_motor_steps>
				  HAL_Delay(50); //wait for motor to settle before checking the stall result
 8000be6:	2032      	movs	r0, #50	; 0x32
 8000be8:	f000 fee4 	bl	80019b4 <HAL_Delay>
				  //Note: this may be causing variability in the homing position. Maybe can help with this by slowing the homing process or tuning this time.
				  //This whole section needs to be reworked to make it more consistent.

				  status = tmc_get_status();
 8000bec:	f000 fbb8 	bl	8001360 <tmc_get_status>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
				  if((status >> 2) & 0x01) { //if stall is detected
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d011      	beq.n	8000c26 <StartMotorTask+0x10e>
					  at_home_position = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
					  homing = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					  current_position_in_steps = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
					  target_position_in_steps = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
					  moving = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  stop_motor();
 8000c1a:	f7ff ff6b 	bl	8000af4 <stop_motor>
					  debugPrintln(&huart2, "At Home Position.");
 8000c1e:	491e      	ldr	r1, [pc, #120]	; (8000c98 <StartMotorTask+0x180>)
 8000c20:	481b      	ldr	r0, [pc, #108]	; (8000c90 <StartMotorTask+0x178>)
 8000c22:	f000 fd67 	bl	80016f4 <debugPrintln>
			while(homing) {
 8000c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1d4      	bne.n	8000bd8 <StartMotorTask+0xc0>
 8000c2e:	e026      	b.n	8000c7e <StartMotorTask+0x166>
				  }
			  }
			}

		} else {
			if(start_movement && !moving) {
 8000c30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d022      	beq.n	8000c7e <StartMotorTask+0x166>
 8000c38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11e      	bne.n	8000c7e <StartMotorTask+0x166>
				target_position_in_steps = next_target_position_in_steps;
 8000c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
				step_delta = target_position_in_steps - current_position_in_steps;
 8000c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	623b      	str	r3, [r7, #32]
				if(step_delta > 0) {
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dd03      	ble.n	8000c5a <StartMotorTask+0x142>
						set_motor_dir(1);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff ff00 	bl	8000a58 <set_motor_dir>
 8000c58:	e002      	b.n	8000c60 <StartMotorTask+0x148>
				} else {
						set_motor_dir(0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fefc 	bl	8000a58 <set_motor_dir>
				}

				send_motor_steps(  abs(step_delta)  , 20000);
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff0f 	bl	8000a90 <send_motor_steps>
				moving = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				start_movement = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36





	    osDelay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f004 fc67 	bl	8005552 <osDelay>
		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000c84:	e75d      	b.n	8000b42 <StartMotorTask+0x2a>
 8000c86:	bf00      	nop
 8000c88:	200041f0 	.word	0x200041f0
 8000c8c:	080077b8 	.word	0x080077b8
 8000c90:	20004310 	.word	0x20004310
 8000c94:	080077c8 	.word	0x080077c8
 8000c98:	080077d8 	.word	0x080077d8

08000c9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000ca2:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <MX_SPI1_Init+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cd0:	2238      	movs	r2, #56	; 0x38
 8000cd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000ce8:	220a      	movs	r2, #10
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_SPI1_Init+0x64>)
 8000cee:	f002 f819 	bl	8002d24 <HAL_SPI_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf8:	f7ff fe92 	bl	8000a20 <Error_Handler>
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200041f4 	.word	0x200041f4
 8000d04:	40013000 	.word	0x40013000

08000d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_SPI_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12b      	bne.n	8000d82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d62:	23e0      	movs	r3, #224	; 0xe0
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d7e:	f001 f9a1 	bl	80020c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_MspInit+0x54>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a11      	ldr	r2, [pc, #68]	; (8000dec <HAL_MspInit+0x54>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x54>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_MspInit+0x54>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_MspInit+0x54>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_MspInit+0x54>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	210f      	movs	r1, #15
 8000dda:	f06f 0001 	mvn.w	r0, #1
 8000dde:	f001 f925 	bl	800202c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	2032      	movs	r0, #50	; 0x32
 8000e06:	f001 f911 	bl	800202c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f001 f92a 	bl	8002064 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 ff42 	bl	8002cc0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e3c:	f001 ff18 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8000e40:	4603      	mov	r3, r0
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_InitTick+0xa8>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3b01      	subs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_InitTick+0xac>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_InitTick+0xb0>)
 8000e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_InitTick+0xac>)
 8000e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e60:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_InitTick+0xac>)
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_InitTick+0xac>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_InitTick+0xac>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_InitTick+0xac>)
 8000e76:	f002 fa15 	bl	80032a4 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_InitTick+0xac>)
 8000e82:	f002 fa3a 	bl	80032fa <HAL_TIM_Base_Start_IT>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	2000424c 	.word	0x2000424c
 8000ea0:	40000c00 	.word	0x40000c00

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  motorMessage_t motorMessage;
  BaseType_t xStatus;


  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000ee2:	f002 fbd1 	bl	8003688 <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000ee8:	f002 fc1a 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000ef0:	f002 fad4 	bl	800349c <HAL_TIM_OC_Stop_IT>


  motorMessage.motorCommand = STOP_MOTOR;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	713b      	strb	r3, [r7, #4]
  motorMessage.steps = 0; //not used
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]

  xStatus = xQueueSendToFrontFromISR(xMotorQueue, &motorMessage, 0); //todo: consider if this should go to front of queue
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	1d39      	adds	r1, r7, #4
 8000f02:	2301      	movs	r3, #1
 8000f04:	2200      	movs	r2, #0
 8000f06:	f004 fdad 	bl	8005a64 <xQueueGenericSendFromISR>
 8000f0a:	60f8      	str	r0, [r7, #12]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200042cc 	.word	0x200042cc
 8000f18:	2000428c 	.word	0x2000428c
 8000f1c:	200041f0 	.word	0x200041f0

08000f20 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f26:	f002 fbfb 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000428c 	.word	0x2000428c

08000f34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM1_CC_IRQHandler+0x10>)
 8000f3a:	f002 fbf1 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 // HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000428c 	.word	0x2000428c

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f003 fc99 	bl	8004884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20004310 	.word	0x20004310

08000f5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM5_IRQHandler+0x10>)
 8000f62:	f002 fbdd 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000424c 	.word	0x2000424c

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SystemInit+0x28>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <SystemInit+0x28>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SystemInit+0x28>)
 8000f86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b096      	sub	sp, #88	; 0x58
 8000fa0:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 faeb 	bl	80075b2 <memset>

  htim1.Instance = TIM1;
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <MX_TIM1_Init+0x140>)
 8000fde:	4a40      	ldr	r2, [pc, #256]	; (80010e0 <MX_TIM1_Init+0x144>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <MX_TIM1_Init+0x140>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <MX_TIM1_Init+0x140>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <MX_TIM1_Init+0x140>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <MX_TIM1_Init+0x140>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <MX_TIM1_Init+0x140>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <MX_TIM1_Init+0x140>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <MX_TIM1_Init+0x140>)
 8001008:	f002 f94c 	bl	80032a4 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001012:	f7ff fd05 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001016:	4831      	ldr	r0, [pc, #196]	; (80010dc <MX_TIM1_Init+0x140>)
 8001018:	f002 f993 	bl	8003342 <HAL_TIM_OC_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001022:	f7ff fcfd 	bl	8000a20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001026:	2307      	movs	r3, #7
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800102a:	2370      	movs	r3, #112	; 0x70
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800102e:	2300      	movs	r3, #0
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	653b      	str	r3, [r7, #80]	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800103a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103e:	4619      	mov	r1, r3
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <MX_TIM1_Init+0x140>)
 8001042:	f002 fe52 	bl	8003cea <HAL_TIM_SlaveConfigSynchro>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800104c:	f7ff fce8 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001058:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800105c:	4619      	mov	r1, r3
 800105e:	481f      	ldr	r0, [pc, #124]	; (80010dc <MX_TIM1_Init+0x140>)
 8001060:	f003 fa00 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800106a:	f7ff fcd9 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4812      	ldr	r0, [pc, #72]	; (80010dc <MX_TIM1_Init+0x140>)
 8001094:	f002 fc4c 	bl	8003930 <HAL_TIM_OC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800109e:	f7ff fcbf 	bl	8000a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM1_Init+0x140>)
 80010c6:	f003 fa3b 	bl	8004540 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80010d0:	f7ff fca6 	bl	8000a20 <Error_Handler>
  }

}
 80010d4:	bf00      	nop
 80010d6:	3758      	adds	r7, #88	; 0x58
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000428c 	.word	0x2000428c
 80010e0:	40010000 	.word	0x40010000

080010e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_TIM2_Init+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_TIM2_Init+0xe8>)
 800112a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800112e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113c:	4823      	ldr	r0, [pc, #140]	; (80011cc <MX_TIM2_Init+0xe8>)
 800113e:	f002 f8b1 	bl	80032a4 <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001148:	f7ff fc6a 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	4619      	mov	r1, r3
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_TIM2_Init+0xe8>)
 800115a:	f002 fd0f 	bl	8003b7c <HAL_TIM_ConfigClockSource>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001164:	f7ff fc5c 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM2_Init+0xe8>)
 800116a:	f002 fa25 	bl	80035b8 <HAL_TIM_PWM_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001174:	f7ff fc54 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001188:	f003 f96c 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001192:	f7ff fc45 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	; 0x60
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800119a:	f242 7310 	movw	r3, #10000	; 0x2710
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2208      	movs	r2, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM2_Init+0xe8>)
 80011b0:	f002 fc1e 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011ba:	f7ff fc31 	bl	8000a20 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM2_Init+0xe8>)
 80011c0:	f000 f87a 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200042cc 	.word	0x200042cc

080011d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_TIM_Base_MspInit+0xdc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d145      	bne.n	800127e <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800123c:	2301      	movs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	481b      	ldr	r0, [pc, #108]	; (80012b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001248:	f000 ff3c 	bl	80020c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2105      	movs	r1, #5
 8001250:	2019      	movs	r0, #25
 8001252:	f000 feeb 	bl	800202c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001256:	2019      	movs	r0, #25
 8001258:	f000 ff04 	bl	8002064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2105      	movs	r1, #5
 8001260:	201a      	movs	r0, #26
 8001262:	f000 fee3 	bl	800202c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001266:	201a      	movs	r0, #26
 8001268:	f000 fefc 	bl	8002064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2105      	movs	r1, #5
 8001270:	201b      	movs	r0, #27
 8001272:	f000 fedb 	bl	800202c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001276:	201b      	movs	r0, #27
 8001278:	f000 fef4 	bl	8002064 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800127c:	e012      	b.n	80012a4 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001286:	d10d      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40010000 	.word	0x40010000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d11e      	bne.n	8001318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <HAL_TIM_MspPostInit+0x6c>)
 8001314:	f000 fed6 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <tmc_enable_stallguard>:
#include "cmsis_os.h"
#include "spi.h"
#include "gpio.h"


uint32_t tmc_enable_stallguard(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	uint32_t reg_data = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
	int8_t sgt = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	70fb      	strb	r3, [r7, #3]


	reg_data = 0x010A0000; //loop antenna
 8001336:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
 800133a:	607b      	str	r3, [r7, #4]
	reg_data = 0x010B0000; //loop antenna
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <tmc_enable_stallguard+0x30>)
 800133e:	607b      	str	r3, [r7, #4]
	reg_data = 0x010D0000;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <tmc_enable_stallguard+0x34>)
 8001342:	607b      	str	r3, [r7, #4]
	//reg_data = 0x013D0000;
	tmc_readwrite_register(TMC_REG_COOLCONF, reg_data, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	206d      	movs	r0, #109	; 0x6d
 800134a:	f000 f85d 	bl	8001408 <tmc_readwrite_register>




	return 0;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	010b0000 	.word	0x010b0000
 800135c:	010d0000 	.word	0x010d0000

08001360 <tmc_get_status>:


uint8_t tmc_get_status() {
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af02      	add	r7, sp, #8
		uint8_t rx_data[5];
		uint8_t tx_data[5];
		uint32_t payload =0;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
		uint8_t status = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	76fb      	strb	r3, [r7, #27]
		uint8_t send_count = 2;
 800136e:	2302      	movs	r3, #2
 8001370:	76bb      	strb	r3, [r7, #26]

		uint8_t addr = TMC_REG_GSTAT;
 8001372:	2301      	movs	r3, #1
 8001374:	767b      	strb	r3, [r7, #25]
		uint32_t data = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]


		tx_data[0] = addr;
 800137a:	7e7b      	ldrb	r3, [r7, #25]
 800137c:	713b      	strb	r3, [r7, #4]
		tx_data[1] = (data >> 24) & 0x00ff;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	0e1b      	lsrs	r3, r3, #24
 8001382:	b2db      	uxtb	r3, r3
 8001384:	717b      	strb	r3, [r7, #5]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	b2db      	uxtb	r3, r3
 800138c:	71bb      	strb	r3, [r7, #6]
		tx_data[3] = (data >> 8)  & 0x00ff;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b2db      	uxtb	r3, r3
 8001394:	71fb      	strb	r3, [r7, #7]
		tx_data[4] = (data)	      & 0x00ff;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	723b      	strb	r3, [r7, #8]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800139c:	bf00      	nop
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <tmc_get_status+0xa0>)
 80013a0:	f001 fec6 	bl	8003130 <HAL_SPI_GetState>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d1f9      	bne.n	800139e <tmc_get_status+0x3e>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	4814      	ldr	r0, [pc, #80]	; (8001404 <tmc_get_status+0xa4>)
 80013b2:	f001 f809 	bl	80023c8 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013b6:	bf00      	nop
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <tmc_get_status+0xa0>)
 80013ba:	f001 feb9 	bl	8003130 <HAL_SPI_GetState>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d1f9      	bne.n	80013b8 <tmc_get_status+0x58>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	1d39      	adds	r1, r7, #4
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2305      	movs	r3, #5
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <tmc_get_status+0xa0>)
 80013d4:	f001 fd0a 	bl	8002dec <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d8:	bf00      	nop
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <tmc_get_status+0xa0>)
 80013dc:	f001 fea8 	bl	8003130 <HAL_SPI_GetState>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d1f9      	bne.n	80013da <tmc_get_status+0x7a>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <tmc_get_status+0xa4>)
 80013ee:	f000 ffeb 	bl	80023c8 <HAL_GPIO_WritePin>





		status = rx_data[0];
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
 80013f4:	76fb      	strb	r3, [r7, #27]

		return status;
 80013f6:	7efb      	ldrb	r3, [r7, #27]




}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200041f4 	.word	0x200041f4
 8001404:	40020400 	.word	0x40020400

08001408 <tmc_readwrite_register>:

uint32_t tmc_readwrite_register(uint8_t addr, uint32_t data, uint8_t set_write_flag) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af02      	add	r7, sp, #8
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4613      	mov	r3, r2
 8001416:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_data[5];
	uint8_t tx_data[5];
	uint32_t payload =0;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
	uint8_t send_count = 2;
 800141c:	2302      	movs	r3, #2
 800141e:	77fb      	strb	r3, [r7, #31]


	if(set_write_flag) {
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <tmc_readwrite_register+0x2a>
		addr |= 0x80;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800142c:	71fb      	strb	r3, [r7, #7]
		send_count = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	77fb      	strb	r3, [r7, #31]

	}

	//send twice according to TMC2130 datasheet
	for (uint8_t i = 0; i < send_count; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	77bb      	strb	r3, [r7, #30]
 8001436:	e03f      	b.n	80014b8 <tmc_readwrite_register+0xb0>

		tx_data[0] = addr;
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	723b      	strb	r3, [r7, #8]
		tx_data[1] = (data >> 24) & 0x00ff;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	0e1b      	lsrs	r3, r3, #24
 8001440:	b2db      	uxtb	r3, r3
 8001442:	727b      	strb	r3, [r7, #9]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	b2db      	uxtb	r3, r3
 800144a:	72bb      	strb	r3, [r7, #10]
		tx_data[3] = (data >> 8)  & 0x00ff;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b2db      	uxtb	r3, r3
 8001452:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = (data)	      & 0x00ff;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	733b      	strb	r3, [r7, #12]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800145a:	bf00      	nop
 800145c:	4820      	ldr	r0, [pc, #128]	; (80014e0 <tmc_readwrite_register+0xd8>)
 800145e:	f001 fe67 	bl	8003130 <HAL_SPI_GetState>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d1f9      	bne.n	800145c <tmc_readwrite_register+0x54>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <tmc_readwrite_register+0xdc>)
 8001470:	f000 ffaa 	bl	80023c8 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001474:	bf00      	nop
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <tmc_readwrite_register+0xd8>)
 8001478:	f001 fe5a 	bl	8003130 <HAL_SPI_GetState>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d1f9      	bne.n	8001476 <tmc_readwrite_register+0x6e>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001482:	f107 0210 	add.w	r2, r7, #16
 8001486:	f107 0108 	add.w	r1, r7, #8
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2305      	movs	r3, #5
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <tmc_readwrite_register+0xd8>)
 8001494:	f001 fcaa 	bl	8002dec <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001498:	bf00      	nop
 800149a:	4811      	ldr	r0, [pc, #68]	; (80014e0 <tmc_readwrite_register+0xd8>)
 800149c:	f001 fe48 	bl	8003130 <HAL_SPI_GetState>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d1f9      	bne.n	800149a <tmc_readwrite_register+0x92>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <tmc_readwrite_register+0xdc>)
 80014ae:	f000 ff8b 	bl	80023c8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < send_count; i++) {
 80014b2:	7fbb      	ldrb	r3, [r7, #30]
 80014b4:	3301      	adds	r3, #1
 80014b6:	77bb      	strb	r3, [r7, #30]
 80014b8:	7fba      	ldrb	r2, [r7, #30]
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3bb      	bcc.n	8001438 <tmc_readwrite_register+0x30>



	}

	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80014c0:	7c7b      	ldrb	r3, [r7, #17]
 80014c2:	061a      	lsls	r2, r3, #24
 80014c4:	7cbb      	ldrb	r3, [r7, #18]
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	441a      	add	r2, r3
			+ (rx_data[3] << 8 ) +  rx_data[4];
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	4413      	add	r3, r2
 80014d0:	7d3a      	ldrb	r2, [r7, #20]
 80014d2:	4413      	add	r3, r2
	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80014d4:	61bb      	str	r3, [r7, #24]


	return payload;
 80014d6:	69bb      	ldr	r3, [r7, #24]


}
 80014d8:	4618      	mov	r0, r3
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200041f4 	.word	0x200041f4
 80014e4:	40020400 	.word	0x40020400

080014e8 <tmc_set_motor_current>:

/* ihold: 		hold current. 5 bits.  0 = 1/32, 31=32/32
 * irun:  		run current.  5 bits.  0 = 1/32, 31=32/32
 * iholddelay: 	number of clock cycles to power down. 4 bits. Delay is 2^18*iholddelay clocks periods.
 */
void tmc_set_motor_current(uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	460b      	mov	r3, r1
 80014f4:	71bb      	strb	r3, [r7, #6]
 80014f6:	4613      	mov	r3, r2
 80014f8:	717b      	strb	r3, [r7, #5]
	uint32_t reg_data = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]

	reg_data = (ihold & 0x1F)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
			+  ((irun & 0x1F) << 8)
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800150c:	431a      	orrs	r2, r3
			+  ((iholddelay & 0x0F) << 16);
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001516:	4413      	add	r3, r2
	reg_data = (ihold & 0x1F)
 8001518:	60fb      	str	r3, [r7, #12]

	tmc_readwrite_register(TMC_REG_IHOLD_IRUN, reg_data, 1);
 800151a:	2201      	movs	r2, #1
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	2010      	movs	r0, #16
 8001520:	f7ff ff72 	bl	8001408 <tmc_readwrite_register>

	return;
 8001524:	bf00      	nop
}
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <tmc_init>:

/*initializes the TMC2130 driver for StealthChop operation with current appropriate for loop antenna
 *
 */
void tmc_init(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8

	uint8_t rx_data[2] = {0,0};
 8001532:	2300      	movs	r3, #0
 8001534:	713b      	strb	r3, [r7, #4]
 8001536:	2300      	movs	r3, #0
 8001538:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[2] = {0,0};
 800153a:	2300      	movs	r3, #0
 800153c:	703b      	strb	r3, [r7, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001548:	4829      	ldr	r0, [pc, #164]	; (80015f0 <tmc_init+0xc4>)
 800154a:	f000 ff3d 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fa30 	bl	80019b4 <HAL_Delay>

	//Power cycle the TMC2130
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155a:	4825      	ldr	r0, [pc, #148]	; (80015f0 <tmc_init+0xc4>)
 800155c:	f000 ff34 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	; 0x64
 8001562:	f000 fa27 	bl	80019b4 <HAL_Delay>
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156c:	4820      	ldr	r0, [pc, #128]	; (80015f0 <tmc_init+0xc4>)
 800156e:	f000 ff2b 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f000 fa1e 	bl	80019b4 <HAL_Delay>

	//write 16 bits out of SPI interface (without clearing CS pin) to set sck polarity correct.
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001578:	bf00      	nop
 800157a:	481e      	ldr	r0, [pc, #120]	; (80015f4 <tmc_init+0xc8>)
 800157c:	f001 fdd8 	bl	8003130 <HAL_SPI_GetState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d1f9      	bne.n	800157a <tmc_init+0x4e>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001586:	1d3a      	adds	r2, r7, #4
 8001588:	4639      	mov	r1, r7
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2302      	movs	r3, #2
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <tmc_init+0xc8>)
 8001594:	f001 fc2a 	bl	8002dec <HAL_SPI_TransmitReceive>

	//clear the status register by reading it
	tmc_readwrite_register(TMC_REG_GSTAT, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff ff33 	bl	8001408 <tmc_readwrite_register>

	//TOFF=4, TBL=2, HSTRT=4. HEND=0
	tmc_readwrite_register(TMC_REG_CHOPCONF, 0x5010044, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	4914      	ldr	r1, [pc, #80]	; (80015f8 <tmc_init+0xcc>)
 80015a6:	206c      	movs	r0, #108	; 0x6c
 80015a8:	f7ff ff2e 	bl	8001408 <tmc_readwrite_register>

	//IHOLD_IRUN: IHOLD=10, IRUN=31 (max. current), IHOLDDELAY=6
	tmc_set_motor_current(3, 10, 10);
 80015ac:	220a      	movs	r2, #10
 80015ae:	210a      	movs	r1, #10
 80015b0:	2003      	movs	r0, #3
 80015b2:	f7ff ff99 	bl	80014e8 <tmc_set_motor_current>

	//approx 1 second to fully power down the motor after motion stops
	tmc_readwrite_register(TMC_REG_TPOWERDOWN, 0x40, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff ff24 	bl	8001408 <tmc_readwrite_register>

	//en_pwm_mode = 1, DIAG1 set to indicate stall, push-pull active high
	tmc_readwrite_register(TMC_REG_GCONF, 0x2104, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f242 1104 	movw	r1, #8452	; 0x2104
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff ff1e 	bl	8001408 <tmc_readwrite_register>

	//enable stallguard and set sensitvity
	tmc_enable_stallguard();
 80015cc:	f7ff feac 	bl	8001328 <tmc_enable_stallguard>

	//switching velocity = 35000
	tmc_readwrite_register(TMC_REG_TPWMTHRS, 0x1F4, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015d6:	2013      	movs	r0, #19
 80015d8:	f7ff ff16 	bl	8001408 <tmc_readwrite_register>

	//approx pwm_autoscale = 1, PWM_GRAD = 1, PWM_AMPL=255
	tmc_readwrite_register(TMC_REG_PWM_CONF, 0x401C8, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	4907      	ldr	r1, [pc, #28]	; (80015fc <tmc_init+0xd0>)
 80015e0:	2070      	movs	r0, #112	; 0x70
 80015e2:	f7ff ff11 	bl	8001408 <tmc_readwrite_register>

	return;
 80015e6:	bf00      	nop
}
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020400 	.word	0x40020400
 80015f4:	200041f4 	.word	0x200041f4
 80015f8:	05010044 	.word	0x05010044
 80015fc:	000401c8 	.word	0x000401c8

08001600 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART2_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART2_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001638:	f002 ffe8 	bl	800460c <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff f9ed 	bl	8000a20 <Error_Handler>
  }

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20004310 	.word	0x20004310
 8001650:	40004400 	.word	0x40004400

08001654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_UART_MspInit+0x94>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d133      	bne.n	80016de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_UART_MspInit+0x98>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_UART_MspInit+0x98>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_UART_MspInit+0x98>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0x98>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_UART_MspInit+0x98>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_UART_MspInit+0x98>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ae:	230c      	movs	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016be:	2307      	movs	r3, #7
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <HAL_UART_MspInit+0x9c>)
 80016ca:	f000 fcfb 	bl	80020c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2105      	movs	r1, #5
 80016d2:	2026      	movs	r0, #38	; 0x26
 80016d4:	f000 fcaa 	bl	800202c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016d8:	2026      	movs	r0, #38	; 0x26
 80016da:	f000 fcc3 	bl	8002064 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000

080016f4 <debugPrintln>:
QueueHandle_t xSerialQueue;


volatile uint8_t uartBuffer;

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 80016fe:	6838      	ldr	r0, [r7, #0]
 8001700:	f7fe fd6e 	bl	80001e0 <strlen>
 8001704:	4603      	mov	r3, r0
 8001706:	b29a      	uxth	r2, r3
 8001708:	230a      	movs	r3, #10
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f002 ffca 	bl	80046a6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001712:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001716:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8001718:	f107 010c 	add.w	r1, r7, #12
 800171c:	230a      	movs	r3, #10
 800171e:	2202      	movs	r2, #2
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f002 ffc0 	bl	80046a6 <HAL_UART_Transmit>
	return;
 8001726:	bf00      	nop
}
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <send_uart>:


void send_uart(UART_HandleTypeDef *huart, char _out[]){
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7fe fd51 	bl	80001e0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	230a      	movs	r3, #10
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f002 ffad 	bl	80046a6 <HAL_UART_Transmit>
	return;
 800174c:	bf00      	nop
}
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <setup_uart_receive>:

void setup_uart_receive() {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &uartBuffer, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	4903      	ldr	r1, [pc, #12]	; (8001768 <setup_uart_receive+0x14>)
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <setup_uart_receive+0x18>)
 800175e:	f003 f83b 	bl	80047d8 <HAL_UART_Receive_IT>
	return;
 8001762:	bf00      	nop
}
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20004350 	.word	0x20004350
 800176c:	20004310 	.word	0x20004310

08001770 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	BaseType_t xStatus;

	xStatus = xQueueSendToBackFromISR(xSerialQueue, &uartBuffer, 0);
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_UART_RxCpltCallback+0x2c>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	2200      	movs	r2, #0
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <HAL_UART_RxCpltCallback+0x30>)
 8001782:	f004 f96f 	bl	8005a64 <xQueueGenericSendFromISR>
 8001786:	60f8      	str	r0, [r7, #12]
	HAL_UART_Receive_IT(&huart2, &uartBuffer, 1);
 8001788:	2201      	movs	r2, #1
 800178a:	4905      	ldr	r1, [pc, #20]	; (80017a0 <HAL_UART_RxCpltCallback+0x30>)
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_UART_RxCpltCallback+0x34>)
 800178e:	f003 f823 	bl	80047d8 <HAL_UART_Receive_IT>


    return;
 8001792:	bf00      	nop
}
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000430c 	.word	0x2000430c
 80017a0:	20004350 	.word	0x20004350
 80017a4:	20004310 	.word	0x20004310

080017a8 <StartSerialTask>:



void StartSerialTask(void const *argument)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0a8      	sub	sp, #160	; 0xa0
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	char serialChar = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	char serialBuffer[99];
	char numStr[20];
	int val = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint8_t bufPos = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	BaseType_t xStatus;
	uint8_t test = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	for(;;) {



		if (uxQueueMessagesWaiting(xSerialQueue) > 0) {
 80017c8:	4b40      	ldr	r3, [pc, #256]	; (80018cc <StartSerialTask+0x124>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fab9 	bl	8005d44 <uxQueueMessagesWaiting>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d074      	beq.n	80018c2 <StartSerialTask+0x11a>
			xStatus = xQueueReceive(xSerialQueue, &serialChar, 0);
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <StartSerialTask+0x124>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f107 0187 	add.w	r1, r7, #135	; 0x87
 80017e0:	2200      	movs	r2, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 f9d2 	bl	8005b8c <xQueueReceive>
 80017e8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			send_uart(&huart2, &serialChar);
 80017ec:	f107 0387 	add.w	r3, r7, #135	; 0x87
 80017f0:	4619      	mov	r1, r3
 80017f2:	4837      	ldr	r0, [pc, #220]	; (80018d0 <StartSerialTask+0x128>)
 80017f4:	f7ff ff9b 	bl	800172e <send_uart>
			serialBuffer[bufPos] = serialChar;
 80017f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80017fc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001800:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001804:	440b      	add	r3, r1
 8001806:	f803 2c7c 	strb.w	r2, [r3, #-124]
			bufPos++;
 800180a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800180e:	3301      	adds	r3, #1
 8001810:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			//VERY crude message handling. Need to re-write this..

			if(serialChar == '\r') { //new line, process and send command
 8001814:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001818:	2b0d      	cmp	r3, #13
 800181a:	d152      	bne.n	80018c2 <StartSerialTask+0x11a>
				send_uart(&huart2, "\n");
 800181c:	492d      	ldr	r1, [pc, #180]	; (80018d4 <StartSerialTask+0x12c>)
 800181e:	482c      	ldr	r0, [pc, #176]	; (80018d0 <StartSerialTask+0x128>)
 8001820:	f7ff ff85 	bl	800172e <send_uart>

				switch(serialBuffer[0]) {
 8001824:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001828:	2b6d      	cmp	r3, #109	; 0x6d
 800182a:	d147      	bne.n	80018bc <StartSerialTask+0x114>
				case('m'):
					for(int j = 0; j < 20; j++) { //empty the buffer
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001832:	e00b      	b.n	800184c <StartSerialTask+0xa4>
						numStr[j] = ' ';
 8001834:	f107 0210 	add.w	r2, r7, #16
 8001838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800183c:	4413      	add	r3, r2
 800183e:	2220      	movs	r2, #32
 8001840:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 20; j++) { //empty the buffer
 8001842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001846:	3301      	adds	r3, #1
 8001848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800184c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001850:	2b13      	cmp	r3, #19
 8001852:	ddef      	ble.n	8001834 <StartSerialTask+0x8c>
					}

					for(int i = 1; i < bufPos-1; i++) {
 8001854:	2301      	movs	r3, #1
 8001856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800185a:	e012      	b.n	8001882 <StartSerialTask+0xda>
						numStr[i-1] = serialBuffer[i];
 800185c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001860:	3b01      	subs	r3, #1
 8001862:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001866:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800186a:	440a      	add	r2, r1
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001872:	440b      	add	r3, r1
 8001874:	f803 2c90 	strb.w	r2, [r3, #-144]
					for(int i = 1; i < bufPos-1; i++) {
 8001878:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800187c:	3301      	adds	r3, #1
 800187e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001882:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001886:	3b01      	subs	r3, #1
 8001888:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800188c:	429a      	cmp	r2, r3
 800188e:	dbe5      	blt.n	800185c <StartSerialTask+0xb4>
					}
					val = atoi(&numStr);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4618      	mov	r0, r3
 8001896:	f005 fe59 	bl	800754c <atoi>
 800189a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

					motorMessage.motorCommand = MOVE_TO_POSITION;
 800189e:	2302      	movs	r3, #2
 80018a0:	723b      	strb	r3, [r7, #8]
					motorMessage.steps = val;
 80018a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a6:	60fb      	str	r3, [r7, #12]

					//todo: add bounds checking for steps
					xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <StartSerialTask+0x130>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	f107 0108 	add.w	r1, r7, #8
 80018b0:	2300      	movs	r3, #0
 80018b2:	2200      	movs	r2, #0
 80018b4:	f003 ffdc 	bl	8005870 <xQueueGenericSend>
 80018b8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

					if (xStatus != pdPASS) {
						//todo: add an assert or wait
					}
				}
				bufPos = 0; //reset the buffer position
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

			}

		}

	    osDelay(10);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f003 fe45 	bl	8005552 <osDelay>
	for(;;) {
 80018c8:	e77e      	b.n	80017c8 <StartSerialTask+0x20>
 80018ca:	bf00      	nop
 80018cc:	2000430c 	.word	0x2000430c
 80018d0:	20004310 	.word	0x20004310
 80018d4:	080077ec 	.word	0x080077ec
 80018d8:	200041f0 	.word	0x200041f0

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018e2:	e003      	b.n	80018ec <LoopCopyDataInit>

080018e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ea:	3104      	adds	r1, #4

080018ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f4:	d3f6      	bcc.n	80018e4 <CopyDataInit>
  ldr  r2, =_sbss
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018f8:	e002      	b.n	8001900 <LoopFillZerobss>

080018fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018fc:	f842 3b04 	str.w	r3, [r2], #4

08001900 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001902:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001904:	d3f9      	bcc.n	80018fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001906:	f7ff fb33 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190a:	f005 fe23 	bl	8007554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7fe ffe9 	bl	80008e4 <main>
  bx  lr    
 8001912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001914:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001918:	0800792c 	.word	0x0800792c
  ldr  r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001920:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001924:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001928:	20004358 	.word	0x20004358

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_Init+0x40>)
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_Init+0x40>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x40>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 fb5c 	bl	8002016 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fa46 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fa18 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	20004354 	.word	0x20004354

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20004354 	.word	0x20004354

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_Delay+0x40>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e033      	b.n	8001a76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe fdbc 	bl	8000594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a3e:	f023 0302 	bic.w	r3, r3, #2
 8001a42:	f043 0202 	orr.w	r2, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f93a 	bl	8001cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
 8001a66:	e001      	b.n	8001a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1c>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e105      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x228>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	d925      	bls.n	8001af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68d9      	ldr	r1, [r3, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4403      	add	r3, r0
 8001aea:	3b1e      	subs	r3, #30
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	e022      	b.n	8001b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4403      	add	r3, r0
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d824      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b05      	subs	r3, #5
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b05      	subs	r3, #5
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	e04c      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d824      	bhi.n	8001be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b23      	subs	r3, #35	; 0x23
 8001baa:	221f      	movs	r2, #31
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b23      	subs	r3, #35	; 0x23
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
 8001be0:	e023      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b41      	subs	r3, #65	; 0x41
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	; 0x41
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_ADC_ConfigChannel+0x234>)
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d123      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d003      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x1e6>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d11b      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d111      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_ADC_ConfigChannel+0x23c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_ADC_ConfigChannel+0x240>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9a      	lsrs	r2, r3, #18
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f9      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <ADC_Init+0x1f0>)
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	021a      	lsls	r2, r3, #8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <ADC_Init+0x1f4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d022      	beq.n	8001da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e00f      	b.n	8001dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0202 	bic.w	r2, r2, #2
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
 8001ddc:	005a      	lsls	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	035a      	lsls	r2, r3, #13
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e007      	b.n	8001e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	051a      	lsls	r2, r3, #20
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e7a:	025a      	lsls	r2, r3, #9
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	029a      	lsls	r2, r3, #10
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	0f000001 	.word	0x0f000001

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff4c 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203e:	f7ff ff61 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002042:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7ff ffb1 	bl	8001fb0 <NVIC_EncodePriority>
 800204e:	4602      	mov	r2, r0
 8002050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff80 	bl	8001f5c <__NVIC_SetPriority>
}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff54 	bl	8001f20 <__NVIC_EnableIRQ>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d004      	beq.n	800209e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00c      	b.n	80020b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2205      	movs	r2, #5
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e159      	b.n	8002394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8148 	bne.w	800238e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d00b      	beq.n	800211e <HAL_GPIO_Init+0x5a>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002112:	2b11      	cmp	r3, #17
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b12      	cmp	r3, #18
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0xfc>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b12      	cmp	r3, #18
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a2 	beq.w	800238e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_GPIO_Init+0x2e4>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_GPIO_Init+0x2e4>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_GPIO_Init+0x2e4>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a48      	ldr	r2, [pc, #288]	; (80023b0 <HAL_GPIO_Init+0x2ec>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x202>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a47      	ldr	r2, [pc, #284]	; (80023b4 <HAL_GPIO_Init+0x2f0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x1fe>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <HAL_GPIO_Init+0x2f4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x1fa>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a45      	ldr	r2, [pc, #276]	; (80023bc <HAL_GPIO_Init+0x2f8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x1f6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <HAL_GPIO_Init+0x2fc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x1f2>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_GPIO_Init+0x300>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230a:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <HAL_GPIO_Init+0x300>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_GPIO_Init+0x300>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_GPIO_Init+0x300>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_GPIO_Init+0x300>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235e:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_GPIO_Init+0x300>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_GPIO_Init+0x300>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_GPIO_Init+0x300>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f aea2 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3724      	adds	r7, #36	; 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e25b      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d075      	beq.n	8002506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241a:	4ba3      	ldr	r3, [pc, #652]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d00c      	beq.n	8002440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4ba0      	ldr	r3, [pc, #640]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242e:	2b08      	cmp	r3, #8
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b9d      	ldr	r3, [pc, #628]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4b99      	ldr	r3, [pc, #612]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05b      	beq.n	8002504 <HAL_RCC_OscConfig+0x108>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d157      	bne.n	8002504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e236      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x74>
 8002462:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a90      	ldr	r2, [pc, #576]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b8b      	ldr	r3, [pc, #556]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a8a      	ldr	r2, [pc, #552]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a87      	ldr	r2, [pc, #540]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002494:	4b84      	ldr	r3, [pc, #528]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a83      	ldr	r2, [pc, #524]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a80      	ldr	r2, [pc, #512]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fa72 	bl	800199c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fa6e 	bl	800199c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1fb      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xc0>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa5e 	bl	800199c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fa5a 	bl	800199c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1e7      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0xe8>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	2b08      	cmp	r3, #8
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1bb      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b56      	ldr	r3, [pc, #344]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4952      	ldr	r1, [pc, #328]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_OscConfig+0x2b0>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7ff fa13 	bl	800199c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257a:	f7ff fa0f 	bl	800199c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e19c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4940      	ldr	r1, [pc, #256]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_OscConfig+0x2b0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff f9f2 	bl	800199c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff f9ee 	bl	800199c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e17b      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d030      	beq.n	8002648 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x2b4>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f9d2 	bl	800199c <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff f9ce 	bl	800199c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e15b      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x200>
 800261a:	e015      	b.n	8002648 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_OscConfig+0x2b4>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff f9bb 	bl	800199c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262a:	f7ff f9b7 	bl	800199c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e144      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a0 	beq.w	8002796 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x2b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d121      	bne.n	80026d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_OscConfig+0x2b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_RCC_OscConfig+0x2b8>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7ff f97d 	bl	800199c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e011      	b.n	80026ca <HAL_RCC_OscConfig+0x2ce>
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470000 	.word	0x42470000
 80026b0:	42470e80 	.word	0x42470e80
 80026b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b8:	f7ff f970 	bl	800199c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0fd      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCC_OscConfig+0x4d4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_OscConfig+0x2f0>
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a7c      	ldr	r2, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ea:	e01c      	b.n	8002726 <HAL_RCC_OscConfig+0x32a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x312>
 80026f4:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a76      	ldr	r2, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	4b74      	ldr	r3, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x32a>
 800270e:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a70      	ldr	r2, [pc, #448]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a6d      	ldr	r2, [pc, #436]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff f935 	bl	800199c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff f931 	bl	800199c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0bc      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <HAL_RCC_OscConfig+0x33a>
 8002758:	e014      	b.n	8002784 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff f91f 	bl	800199c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff f91b 	bl	800199c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0a6      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8092 	beq.w	80028c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d05c      	beq.n	8002866 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d141      	bne.n	8002838 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <HAL_RCC_OscConfig+0x4dc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7ff f8ef 	bl	800199c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7ff f8eb 	bl	800199c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e078      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	019b      	lsls	r3, r3, #6
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	3b01      	subs	r3, #1
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	4933      	ldr	r1, [pc, #204]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_RCC_OscConfig+0x4dc>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff f8c4 	bl	800199c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff f8c0 	bl	800199c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e04d      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x41c>
 8002836:	e045      	b.n	80028c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x4dc>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7ff f8ad 	bl	800199c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff f8a9 	bl	800199c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e036      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x44a>
 8002864:	e02e      	b.n	80028c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e029      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_RCC_OscConfig+0x4d8>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	429a      	cmp	r2, r3
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d115      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10d      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	42470060 	.word	0x42470060

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe ffe6 	bl	800199c <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe ffe2 	bl	800199c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	fa21 f303 	lsr.w	r3, r1, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f9b4 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080077f8 	.word	0x080077f8
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abe:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d007      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x32>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x38>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 80b4 	bne.w	8002c3c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ad6:	60bb      	str	r3, [r7, #8]
       break;
 8002ad8:	e0b3      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002adc:	60bb      	str	r3, [r7, #8]
      break;
 8002ade:	e0b0      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aea:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d04a      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	ea03 0501 	and.w	r5, r3, r1
 8002b0c:	ea04 0602 	and.w	r6, r4, r2
 8002b10:	4629      	mov	r1, r5
 8002b12:	4632      	mov	r2, r6
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	0154      	lsls	r4, r2, #5
 8002b1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b22:	014b      	lsls	r3, r1, #5
 8002b24:	4619      	mov	r1, r3
 8002b26:	4622      	mov	r2, r4
 8002b28:	1b49      	subs	r1, r1, r5
 8002b2a:	eb62 0206 	sbc.w	r2, r2, r6
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	f04f 0400 	mov.w	r4, #0
 8002b36:	0194      	lsls	r4, r2, #6
 8002b38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b3c:	018b      	lsls	r3, r1, #6
 8002b3e:	1a5b      	subs	r3, r3, r1
 8002b40:	eb64 0402 	sbc.w	r4, r4, r2
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	00e2      	lsls	r2, r4, #3
 8002b4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b52:	00d9      	lsls	r1, r3, #3
 8002b54:	460b      	mov	r3, r1
 8002b56:	4614      	mov	r4, r2
 8002b58:	195b      	adds	r3, r3, r5
 8002b5a:	eb44 0406 	adc.w	r4, r4, r6
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	0262      	lsls	r2, r4, #9
 8002b68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b6c:	0259      	lsls	r1, r3, #9
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	4621      	mov	r1, r4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f04f 0400 	mov.w	r4, #0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	f7fd fb36 	bl	80001f0 <__aeabi_uldivmod>
 8002b84:	4603      	mov	r3, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e049      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8c:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	f04f 0400 	mov.w	r4, #0
 8002b96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	ea03 0501 	and.w	r5, r3, r1
 8002ba2:	ea04 0602 	and.w	r6, r4, r2
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	4632      	mov	r2, r6
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	f04f 0400 	mov.w	r4, #0
 8002bb2:	0154      	lsls	r4, r2, #5
 8002bb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bb8:	014b      	lsls	r3, r1, #5
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	1b49      	subs	r1, r1, r5
 8002bc0:	eb62 0206 	sbc.w	r2, r2, r6
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f04f 0400 	mov.w	r4, #0
 8002bcc:	0194      	lsls	r4, r2, #6
 8002bce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bd2:	018b      	lsls	r3, r1, #6
 8002bd4:	1a5b      	subs	r3, r3, r1
 8002bd6:	eb64 0402 	sbc.w	r4, r4, r2
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	00e2      	lsls	r2, r4, #3
 8002be4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002be8:	00d9      	lsls	r1, r3, #3
 8002bea:	460b      	mov	r3, r1
 8002bec:	4614      	mov	r4, r2
 8002bee:	195b      	adds	r3, r3, r5
 8002bf0:	eb44 0406 	adc.w	r4, r4, r6
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	02a2      	lsls	r2, r4, #10
 8002bfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c02:	0299      	lsls	r1, r3, #10
 8002c04:	460b      	mov	r3, r1
 8002c06:	4614      	mov	r4, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f04f 0400 	mov.w	r4, #0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4623      	mov	r3, r4
 8002c16:	f7fd faeb 	bl	80001f0 <__aeabi_uldivmod>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	60bb      	str	r3, [r7, #8]
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c3e:	60bb      	str	r3, [r7, #8]
      break;
 8002c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c42:	68bb      	ldr	r3, [r7, #8]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a9b      	lsrs	r3, r3, #10
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08007808 	.word	0x08007808

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff ffdc 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0b5b      	lsrs	r3, r3, #13
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08007808 	.word	0x08007808

08002cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	220f      	movs	r2, #15
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_RCC_GetClockConfig+0x60>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40023c00 	.word	0x40023c00

08002d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e056      	b.n	8002de4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd ffd9 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	ea42 0103 	orr.w	r1, r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	f003 0104 	and.w	r1, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x26>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e18a      	b.n	8003128 <HAL_SPI_TransmitReceive+0x33c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e1a:	f7fe fdbf 	bl	800199c <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d00f      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x70>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e42:	d107      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x68>
 8002e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d003      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e5a:	e15b      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x82>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x82>
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e74:	e14e      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2205      	movs	r2, #5
 8002e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	887a      	ldrh	r2, [r7, #2]
 8002eb2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d007      	beq.n	8002ede <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee6:	d178      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x10a>
 8002ef0:	8b7b      	ldrh	r3, [r7, #26]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d166      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1a:	e053      	b.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11b      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x176>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x176>
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d113      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1c9a      	adds	r2, r3, #2
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d119      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x1b8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	b292      	uxth	r2, r2
 8002f86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fa4:	f7fe fcfa 	bl	800199c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d807      	bhi.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d003      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fc2:	e0a7      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1a6      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x130>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1a1      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x130>
 8002fd8:	e07c      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x1fc>
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d16b      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800300e:	e057      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d11c      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x26c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d017      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x26c>
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d114      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d119      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2ae>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d014      	beq.n	800309a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003096:	2301      	movs	r3, #1
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800309a:	f7fe fc7f 	bl	800199c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d803      	bhi.n	80030b2 <HAL_SPI_TransmitReceive+0x2c6>
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d102      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x2cc>
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030be:	e029      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1a2      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x224>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d19d      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f8a1 	bl	8003220 <SPI_EndRxTxTransaction>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030f0:	e010      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e000      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003112:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003124:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003128:	4618      	mov	r0, r3
 800312a:	3730      	adds	r7, #48	; 0x30
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313e:	b2db      	uxtb	r3, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315c:	e04c      	b.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d048      	beq.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003166:	f7fe fc19 	bl	800199c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13d      	bne.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003194:	d111      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d004      	beq.n	80031aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d107      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d10f      	bne.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00f      	b.n	8003218 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d1a3      	bne.n	800315e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <SPI_EndRxTxTransaction+0x7c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <SPI_EndRxTxTransaction+0x80>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0d5b      	lsrs	r3, r3, #21
 8003238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324a:	d112      	bne.n	8003272 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff78 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e00f      	b.n	8003292 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3b01      	subs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d0f2      	beq.n	8003272 <SPI_EndRxTxTransaction+0x52>
 800328c:	e000      	b.n	8003290 <SPI_EndRxTxTransaction+0x70>
        break;
 800328e:	bf00      	nop
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000
 80032a0:	165e9f81 	.word	0x165e9f81

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01d      	b.n	80032f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd ff80 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 fd6c 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b06      	cmp	r3, #6
 8003322:	d007      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01d      	b.n	8003390 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f815 	bl	8003398 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 fd1d 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d841      	bhi.n	8003440 <HAL_TIM_OC_Start_IT+0x94>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_TIM_OC_Start_IT+0x18>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	08003441 	.word	0x08003441
 80033cc:	08003441 	.word	0x08003441
 80033d0:	08003441 	.word	0x08003441
 80033d4:	0800340b 	.word	0x0800340b
 80033d8:	08003441 	.word	0x08003441
 80033dc:	08003441 	.word	0x08003441
 80033e0:	08003441 	.word	0x08003441
 80033e4:	0800341d 	.word	0x0800341d
 80033e8:	08003441 	.word	0x08003441
 80033ec:	08003441 	.word	0x08003441
 80033f0:	08003441 	.word	0x08003441
 80033f4:	0800342f 	.word	0x0800342f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0202 	orr.w	r2, r2, #2
 8003406:	60da      	str	r2, [r3, #12]
      break;
 8003408:	e01b      	b.n	8003442 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0204 	orr.w	r2, r2, #4
 8003418:	60da      	str	r2, [r3, #12]
      break;
 800341a:	e012      	b.n	8003442 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0208 	orr.w	r2, r2, #8
 800342a:	60da      	str	r2, [r3, #12]
      break;
 800342c:	e009      	b.n	8003442 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0210 	orr.w	r2, r2, #16
 800343c:	60da      	str	r2, [r3, #12]
      break;
 800343e:	e000      	b.n	8003442 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003440:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2201      	movs	r2, #1
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 ffe4 	bl	8004418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_TIM_OC_Start_IT+0xec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d107      	bne.n	800346a <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d007      	beq.n	800348c <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000

0800349c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d841      	bhi.n	8003530 <HAL_TIM_OC_Stop_IT+0x94>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_TIM_OC_Stop_IT+0x18>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	08003531 	.word	0x08003531
 80034bc:	08003531 	.word	0x08003531
 80034c0:	08003531 	.word	0x08003531
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	08003531 	.word	0x08003531
 80034cc:	08003531 	.word	0x08003531
 80034d0:	08003531 	.word	0x08003531
 80034d4:	0800350d 	.word	0x0800350d
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003531 	.word	0x08003531
 80034e0:	08003531 	.word	0x08003531
 80034e4:	0800351f 	.word	0x0800351f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0202 	bic.w	r2, r2, #2
 80034f6:	60da      	str	r2, [r3, #12]
      break;
 80034f8:	e01b      	b.n	8003532 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0204 	bic.w	r2, r2, #4
 8003508:	60da      	str	r2, [r3, #12]
      break;
 800350a:	e012      	b.n	8003532 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0208 	bic.w	r2, r2, #8
 800351a:	60da      	str	r2, [r3, #12]
      break;
 800351c:	e009      	b.n	8003532 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0210 	bic.w	r2, r2, #16
 800352c:	60da      	str	r2, [r3, #12]
      break;
 800352e:	e000      	b.n	8003532 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003530:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2200      	movs	r2, #0
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 ff6c 	bl	8004418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <HAL_TIM_OC_Stop_IT+0x118>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d117      	bne.n	800357a <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	f241 1311 	movw	r3, #4369	; 0x1111
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_TIM_OC_Stop_IT+0xde>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	f240 4344 	movw	r3, #1092	; 0x444
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_TIM_OC_Stop_IT+0xde>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	f241 1311 	movw	r3, #4369	; 0x1111
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_TIM_OC_Stop_IT+0x10e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	f240 4344 	movw	r3, #1092	; 0x444
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_TIM_OC_Stop_IT+0x10e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40010000 	.word	0x40010000

080035b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01d      	b.n	8003606 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f815 	bl	800360e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fbe2 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2201      	movs	r2, #1
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 feee 	bl	8004418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a10      	ldr	r2, [pc, #64]	; (8003684 <HAL_TIM_PWM_Start+0x60>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d107      	bne.n	8003656 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d007      	beq.n	8003678 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000

08003688 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 febc 	bl	8004418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_TIM_PWM_Stop+0x94>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d117      	bne.n	80036da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_TIM_PWM_Stop+0x52>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	f240 4344 	movw	r3, #1092	; 0x444
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_TIM_PWM_Stop+0x52>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a1a      	ldr	r2, [r3, #32]
 80036e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_TIM_PWM_Stop+0x82>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	f240 4344 	movw	r3, #1092	; 0x444
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_TIM_PWM_Stop+0x82>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40010000 	.word	0x40010000

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d122      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d11b      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0202 	mvn.w	r2, #2
 800374c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fb0d 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 8003768:	e005      	b.n	8003776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 faff 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fb10 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d122      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fae3 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fad5 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fae6 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0208 	mvn.w	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2204      	movs	r2, #4
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fab9 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 faab 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fabc 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b10      	cmp	r3, #16
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b10      	cmp	r3, #16
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0210 	mvn.w	r2, #16
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2208      	movs	r2, #8
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa8f 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa81 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa92 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0201 	mvn.w	r2, #1
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd f8ac 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fe94 	bl	80045f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa57 	bl	8003daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b20      	cmp	r3, #32
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0220 	mvn.w	r2, #32
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fe5e 	bl	80045e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003946:	2302      	movs	r3, #2
 8003948:	e04e      	b.n	80039e8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d839      	bhi.n	80039d4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	0800399d 	.word	0x0800399d
 800396c:	080039d5 	.word	0x080039d5
 8003970:	080039d5 	.word	0x080039d5
 8003974:	080039d5 	.word	0x080039d5
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039d5 	.word	0x080039d5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039b9 	.word	0x080039b9
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039d5 	.word	0x080039d5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039c7 	.word	0x080039c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fa8c 	bl	8003ec0 <TIM_OC1_SetConfig>
      break;
 80039a8:	e015      	b.n	80039d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 faeb 	bl	8003f8c <TIM_OC2_SetConfig>
      break;
 80039b6:	e00e      	b.n	80039d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fb50 	bl	8004064 <TIM_OC3_SetConfig>
      break;
 80039c4:	e007      	b.n	80039d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fbb3 	bl	8004138 <TIM_OC4_SetConfig>
      break;
 80039d2:	e000      	b.n	80039d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80039d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0b4      	b.n	8003b74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	f200 809f 	bhi.w	8003b60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003b61 	.word	0x08003b61
 8003a30:	08003b61 	.word	0x08003b61
 8003a34:	08003b61 	.word	0x08003b61
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003b61 	.word	0x08003b61
 8003a40:	08003b61 	.word	0x08003b61
 8003a44:	08003b61 	.word	0x08003b61
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003b61 	.word	0x08003b61
 8003a50:	08003b61 	.word	0x08003b61
 8003a54:	08003b61 	.word	0x08003b61
 8003a58:	08003b1f 	.word	0x08003b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fa2c 	bl	8003ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e062      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa72 	bl	8003f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
      break;
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fabd 	bl	8004064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
      break;
 8003b1c:	e021      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fb07 	bl	8004138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
      break;
 8003b5e:	e000      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_ConfigClockSource+0x18>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0a6      	b.n	8003ce2 <HAL_TIM_ConfigClockSource+0x166>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d067      	beq.n	8003c9c <HAL_TIM_ConfigClockSource+0x120>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d80b      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x6c>
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d073      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x140>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d802      	bhi.n	8003bde <HAL_TIM_ConfigClockSource+0x62>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d06f      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bdc:	e078      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d06c      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x140>
 8003be2:	2b30      	cmp	r3, #48	; 0x30
 8003be4:	d06a      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003be6:	e073      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003be8:	2b70      	cmp	r3, #112	; 0x70
 8003bea:	d00d      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0x8c>
 8003bec:	2b70      	cmp	r3, #112	; 0x70
 8003bee:	d804      	bhi.n	8003bfa <HAL_TIM_ConfigClockSource+0x7e>
 8003bf0:	2b50      	cmp	r3, #80	; 0x50
 8003bf2:	d033      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0xe0>
 8003bf4:	2b60      	cmp	r3, #96	; 0x60
 8003bf6:	d041      	beq.n	8003c7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bf8:	e06a      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d066      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x152>
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d017      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c06:	e063      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f000 fbde 	bl	80043d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]
      break;
 8003c34:	e04c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f000 fbc7 	bl	80043d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c58:	609a      	str	r2, [r3, #8]
      break;
 8003c5a:	e039      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f000 fb3b 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2150      	movs	r1, #80	; 0x50
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fb94 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003c7a:	e029      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f000 fb5a 	bl	8004342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2160      	movs	r1, #96	; 0x60
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fb84 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003c9a:	e019      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f000 fb1b 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2140      	movs	r1, #64	; 0x40
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fb74 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003cba:	e009      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fb6b 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e000      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e031      	b.n	8003d66 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa5f 	bl	80041d8 <TIM_SlaveTimer_SetConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e018      	b.n	8003d66 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d52:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a31      	ldr	r2, [pc, #196]	; (8003ea8 <TIM_Base_SetConfig+0xe8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a30      	ldr	r2, [pc, #192]	; (8003eac <TIM_Base_SetConfig+0xec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <TIM_Base_SetConfig+0xf0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d017      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <TIM_Base_SetConfig+0xe8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a21      	ldr	r2, [pc, #132]	; (8003eac <TIM_Base_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <TIM_Base_SetConfig+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <TIM_Base_SetConfig+0xf4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <TIM_Base_SetConfig+0xf8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <TIM_Base_SetConfig+0xfc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d103      	bne.n	8003e90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	615a      	str	r2, [r3, #20]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0303 	bic.w	r3, r3, #3
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 0302 	bic.w	r3, r3, #2
 8003f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <TIM_OC1_SetConfig+0xc8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10c      	bne.n	8003f36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0308 	bic.w	r3, r3, #8
 8003f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <TIM_OC1_SetConfig+0xc8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d111      	bne.n	8003f62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000

08003f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0210 	bic.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0320 	bic.w	r3, r3, #32
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <TIM_OC2_SetConfig+0xd4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10d      	bne.n	8004008 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <TIM_OC2_SetConfig+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d113      	bne.n	8004038 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000

08004064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <TIM_OC3_SetConfig+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10d      	bne.n	80040de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC3_SetConfig+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d113      	bne.n	800410e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	621a      	str	r2, [r3, #32]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40010000 	.word	0x40010000

08004138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	031b      	lsls	r3, r3, #12
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <TIM_OC4_SetConfig+0x9c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d109      	bne.n	80041ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800419e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000

080041d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0307 	bic.w	r3, r3, #7
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b30      	cmp	r3, #48	; 0x30
 800421c:	d05c      	beq.n	80042d8 <TIM_SlaveTimer_SetConfig+0x100>
 800421e:	2b30      	cmp	r3, #48	; 0x30
 8004220:	d806      	bhi.n	8004230 <TIM_SlaveTimer_SetConfig+0x58>
 8004222:	2b10      	cmp	r3, #16
 8004224:	d058      	beq.n	80042d8 <TIM_SlaveTimer_SetConfig+0x100>
 8004226:	2b20      	cmp	r3, #32
 8004228:	d056      	beq.n	80042d8 <TIM_SlaveTimer_SetConfig+0x100>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d054      	beq.n	80042d8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800422e:	e054      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d03d      	beq.n	80042b0 <TIM_SlaveTimer_SetConfig+0xd8>
 8004234:	2b50      	cmp	r3, #80	; 0x50
 8004236:	d802      	bhi.n	800423e <TIM_SlaveTimer_SetConfig+0x66>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d010      	beq.n	800425e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800423c:	e04d      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800423e:	2b60      	cmp	r3, #96	; 0x60
 8004240:	d040      	beq.n	80042c4 <TIM_SlaveTimer_SetConfig+0xec>
 8004242:	2b70      	cmp	r3, #112	; 0x70
 8004244:	d000      	beq.n	8004248 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8004246:	e048      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68d9      	ldr	r1, [r3, #12]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f000 f8be 	bl	80043d8 <TIM_ETR_SetConfig>
      break;
 800425c:	e03d      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d101      	bne.n	800426a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e038      	b.n	80042dc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004290:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
      break;
 80042ae:	e014      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6899      	ldr	r1, [r3, #8]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	461a      	mov	r2, r3
 80042be:	f000 f811 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      break;
 80042c2:	e00a      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	461a      	mov	r2, r3
 80042d2:	f000 f836 	bl	8004342 <TIM_TI2_ConfigInputStage>
      break;
 80042d6:	e000      	b.n	80042da <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80042d8:	bf00      	nop
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 030a 	bic.w	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004342:	b480      	push	{r7}
 8004344:	b087      	sub	sp, #28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0210 	bic.w	r2, r3, #16
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	031b      	lsls	r3, r3, #12
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800437e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f043 0307 	orr.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	021a      	lsls	r2, r3, #8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2201      	movs	r2, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e050      	b.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d018      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d013      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4313      	orrs	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000

08004540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e03d      	b.n	80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e03f      	b.n	800469e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fd f80e 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb97 	bl	8004d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b088      	sub	sp, #32
 80046aa:	af02      	add	r7, sp, #8
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	f040 8083 	bne.w	80047ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Transmit+0x2e>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e07b      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Transmit+0x40>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e074      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	; 0x21
 80046f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046fc:	f7fd f94e 	bl	800199c <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004716:	e042      	b.n	800479e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	d122      	bne.n	8004776 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2200      	movs	r2, #0
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f9b6 	bl	8004aac <UART_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e042      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800475c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3302      	adds	r3, #2
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	e017      	b.n	800479e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3301      	adds	r3, #1
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	e013      	b.n	800479e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	2180      	movs	r1, #128	; 0x80
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f993 	bl	8004aac <UART_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e01f      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	60ba      	str	r2, [r7, #8]
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1b7      	bne.n	8004718 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f97a 	bl	8004aac <UART_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e006      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d140      	bne.n	8004874 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_UART_Receive_IT+0x26>
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e039      	b.n	8004876 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_UART_Receive_IT+0x38>
 800480c:	2302      	movs	r3, #2
 800480e:	e032      	b.n	8004876 <HAL_UART_Receive_IT+0x9e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2222      	movs	r2, #34	; 0x22
 8004834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0220 	orr.w	r2, r2, #32
 800486e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10d      	bne.n	80048d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_UART_IRQHandler+0x52>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9d6 	bl	8004c80 <UART_Receive_IT>
      return;
 80048d4:	e0d1      	b.n	8004a7a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80b0 	beq.w	8004a3e <HAL_UART_IRQHandler+0x1ba>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_UART_IRQHandler+0x70>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80a5 	beq.w	8004a3e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_UART_IRQHandler+0x90>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	f043 0201 	orr.w	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_UART_IRQHandler+0xb0>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	f043 0202 	orr.w	r2, r3, #2
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_UART_IRQHandler+0xd0>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00f      	beq.n	800497e <HAL_UART_IRQHandler+0xfa>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_UART_IRQHandler+0xee>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	f043 0208 	orr.w	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d078      	beq.n	8004a78 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_UART_IRQHandler+0x11c>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f970 	bl	8004c80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <HAL_UART_IRQHandler+0x144>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d031      	beq.n	8004a2c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8b9 	bl	8004b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d123      	bne.n	8004a24 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <HAL_UART_IRQHandler+0x1fc>)
 80049fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fb3d 	bl	8002080 <HAL_DMA_Abort_IT>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d016      	beq.n	8004a3a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a16:	4610      	mov	r0, r2
 8004a18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1a:	e00e      	b.n	8004a3a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f83b 	bl	8004a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a22:	e00a      	b.n	8004a3a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f837 	bl	8004a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2a:	e006      	b.n	8004a3a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f833 	bl	8004a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a38:	e01e      	b.n	8004a78 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3a:	bf00      	nop
    return;
 8004a3c:	e01c      	b.n	8004a78 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_UART_IRQHandler+0x1d6>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8a6 	bl	8004ba4 <UART_Transmit_IT>
    return;
 8004a58:	e00f      	b.n	8004a7a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_UART_IRQHandler+0x1f6>
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8ee 	bl	8004c50 <UART_EndTransmit_IT>
    return;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004a78:	bf00      	nop
  }
}
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08004b7d 	.word	0x08004b7d

08004a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	e02c      	b.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d028      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x30>
 8004acc:	f7fc ff66 	bl	800199c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d21d      	bcs.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e00f      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d0c3      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff7e 	bl	8004a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b21      	cmp	r3, #33	; 0x21
 8004bb6:	d144      	bne.n	8004c42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d11a      	bne.n	8004bf8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	1c9a      	adds	r2, r3, #2
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]
 8004bea:	e00e      	b.n	8004c0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]
 8004bf6:	e008      	b.n	8004c0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	1c59      	adds	r1, r3, #1
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6211      	str	r1, [r2, #32]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4619      	mov	r1, r3
 8004c18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff07 	bl	8004a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b22      	cmp	r3, #34	; 0x22
 8004c92:	d171      	bne.n	8004d78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d123      	bne.n	8004ce6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10e      	bne.n	8004cca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc8:	e029      	b.n	8004d1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ce4:	e01b      	b.n	8004d1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6858      	ldr	r0, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6291      	str	r1, [r2, #40]	; 0x28
 8004cfe:	b2c2      	uxtb	r2, r0
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e00c      	b.n	8004d1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	1c58      	adds	r0, r3, #1
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	6288      	str	r0, [r1, #40]	; 0x28
 8004d16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d120      	bne.n	8004d74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0220 	bic.w	r2, r2, #32
 8004d40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc fd00 	bl	8001770 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e002      	b.n	8004d7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dc6:	f023 030c 	bic.w	r3, r3, #12
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df2:	f040 818b 	bne.w	800510c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4ac1      	ldr	r2, [pc, #772]	; (8005100 <UART_SetConfig+0x37c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d005      	beq.n	8004e0c <UART_SetConfig+0x88>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4abf      	ldr	r2, [pc, #764]	; (8005104 <UART_SetConfig+0x380>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	f040 80bd 	bne.w	8004f86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7fd ff44 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8004e10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	461d      	mov	r5, r3
 8004e16:	f04f 0600 	mov.w	r6, #0
 8004e1a:	46a8      	mov	r8, r5
 8004e1c:	46b1      	mov	r9, r6
 8004e1e:	eb18 0308 	adds.w	r3, r8, r8
 8004e22:	eb49 0409 	adc.w	r4, r9, r9
 8004e26:	4698      	mov	r8, r3
 8004e28:	46a1      	mov	r9, r4
 8004e2a:	eb18 0805 	adds.w	r8, r8, r5
 8004e2e:	eb49 0906 	adc.w	r9, r9, r6
 8004e32:	f04f 0100 	mov.w	r1, #0
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e46:	4688      	mov	r8, r1
 8004e48:	4691      	mov	r9, r2
 8004e4a:	eb18 0005 	adds.w	r0, r8, r5
 8004e4e:	eb49 0106 	adc.w	r1, r9, r6
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	461d      	mov	r5, r3
 8004e58:	f04f 0600 	mov.w	r6, #0
 8004e5c:	196b      	adds	r3, r5, r5
 8004e5e:	eb46 0406 	adc.w	r4, r6, r6
 8004e62:	461a      	mov	r2, r3
 8004e64:	4623      	mov	r3, r4
 8004e66:	f7fb f9c3 	bl	80001f0 <__aeabi_uldivmod>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4ba5      	ldr	r3, [pc, #660]	; (8005108 <UART_SetConfig+0x384>)
 8004e72:	fba3 2302 	umull	r2, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	461d      	mov	r5, r3
 8004e80:	f04f 0600 	mov.w	r6, #0
 8004e84:	46a9      	mov	r9, r5
 8004e86:	46b2      	mov	sl, r6
 8004e88:	eb19 0309 	adds.w	r3, r9, r9
 8004e8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e90:	4699      	mov	r9, r3
 8004e92:	46a2      	mov	sl, r4
 8004e94:	eb19 0905 	adds.w	r9, r9, r5
 8004e98:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ea8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004eb0:	4689      	mov	r9, r1
 8004eb2:	4692      	mov	sl, r2
 8004eb4:	eb19 0005 	adds.w	r0, r9, r5
 8004eb8:	eb4a 0106 	adc.w	r1, sl, r6
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	461d      	mov	r5, r3
 8004ec2:	f04f 0600 	mov.w	r6, #0
 8004ec6:	196b      	adds	r3, r5, r5
 8004ec8:	eb46 0406 	adc.w	r4, r6, r6
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	f7fb f98e 	bl	80001f0 <__aeabi_uldivmod>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b8b      	ldr	r3, [pc, #556]	; (8005108 <UART_SetConfig+0x384>)
 8004edc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	2164      	movs	r1, #100	; 0x64
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	3332      	adds	r3, #50	; 0x32
 8004eee:	4a86      	ldr	r2, [pc, #536]	; (8005108 <UART_SetConfig+0x384>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004efc:	4498      	add	r8, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	461d      	mov	r5, r3
 8004f02:	f04f 0600 	mov.w	r6, #0
 8004f06:	46a9      	mov	r9, r5
 8004f08:	46b2      	mov	sl, r6
 8004f0a:	eb19 0309 	adds.w	r3, r9, r9
 8004f0e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f12:	4699      	mov	r9, r3
 8004f14:	46a2      	mov	sl, r4
 8004f16:	eb19 0905 	adds.w	r9, r9, r5
 8004f1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f32:	4689      	mov	r9, r1
 8004f34:	4692      	mov	sl, r2
 8004f36:	eb19 0005 	adds.w	r0, r9, r5
 8004f3a:	eb4a 0106 	adc.w	r1, sl, r6
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	461d      	mov	r5, r3
 8004f44:	f04f 0600 	mov.w	r6, #0
 8004f48:	196b      	adds	r3, r5, r5
 8004f4a:	eb46 0406 	adc.w	r4, r6, r6
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4623      	mov	r3, r4
 8004f52:	f7fb f94d 	bl	80001f0 <__aeabi_uldivmod>
 8004f56:	4603      	mov	r3, r0
 8004f58:	460c      	mov	r4, r1
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <UART_SetConfig+0x384>)
 8004f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2164      	movs	r1, #100	; 0x64
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	3332      	adds	r3, #50	; 0x32
 8004f70:	4a65      	ldr	r2, [pc, #404]	; (8005108 <UART_SetConfig+0x384>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	f003 0207 	and.w	r2, r3, #7
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4442      	add	r2, r8
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	e26f      	b.n	8005466 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f86:	f7fd fe73 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004f8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	461d      	mov	r5, r3
 8004f90:	f04f 0600 	mov.w	r6, #0
 8004f94:	46a8      	mov	r8, r5
 8004f96:	46b1      	mov	r9, r6
 8004f98:	eb18 0308 	adds.w	r3, r8, r8
 8004f9c:	eb49 0409 	adc.w	r4, r9, r9
 8004fa0:	4698      	mov	r8, r3
 8004fa2:	46a1      	mov	r9, r4
 8004fa4:	eb18 0805 	adds.w	r8, r8, r5
 8004fa8:	eb49 0906 	adc.w	r9, r9, r6
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fc0:	4688      	mov	r8, r1
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	eb18 0005 	adds.w	r0, r8, r5
 8004fc8:	eb49 0106 	adc.w	r1, r9, r6
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	461d      	mov	r5, r3
 8004fd2:	f04f 0600 	mov.w	r6, #0
 8004fd6:	196b      	adds	r3, r5, r5
 8004fd8:	eb46 0406 	adc.w	r4, r6, r6
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	f7fb f906 	bl	80001f0 <__aeabi_uldivmod>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <UART_SetConfig+0x384>)
 8004fec:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	461d      	mov	r5, r3
 8004ffa:	f04f 0600 	mov.w	r6, #0
 8004ffe:	46a9      	mov	r9, r5
 8005000:	46b2      	mov	sl, r6
 8005002:	eb19 0309 	adds.w	r3, r9, r9
 8005006:	eb4a 040a 	adc.w	r4, sl, sl
 800500a:	4699      	mov	r9, r3
 800500c:	46a2      	mov	sl, r4
 800500e:	eb19 0905 	adds.w	r9, r9, r5
 8005012:	eb4a 0a06 	adc.w	sl, sl, r6
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800502a:	4689      	mov	r9, r1
 800502c:	4692      	mov	sl, r2
 800502e:	eb19 0005 	adds.w	r0, r9, r5
 8005032:	eb4a 0106 	adc.w	r1, sl, r6
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	461d      	mov	r5, r3
 800503c:	f04f 0600 	mov.w	r6, #0
 8005040:	196b      	adds	r3, r5, r5
 8005042:	eb46 0406 	adc.w	r4, r6, r6
 8005046:	461a      	mov	r2, r3
 8005048:	4623      	mov	r3, r4
 800504a:	f7fb f8d1 	bl	80001f0 <__aeabi_uldivmod>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	461a      	mov	r2, r3
 8005054:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <UART_SetConfig+0x384>)
 8005056:	fba3 1302 	umull	r1, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2164      	movs	r1, #100	; 0x64
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	3332      	adds	r3, #50	; 0x32
 8005068:	4a27      	ldr	r2, [pc, #156]	; (8005108 <UART_SetConfig+0x384>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005076:	4498      	add	r8, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	461d      	mov	r5, r3
 800507c:	f04f 0600 	mov.w	r6, #0
 8005080:	46a9      	mov	r9, r5
 8005082:	46b2      	mov	sl, r6
 8005084:	eb19 0309 	adds.w	r3, r9, r9
 8005088:	eb4a 040a 	adc.w	r4, sl, sl
 800508c:	4699      	mov	r9, r3
 800508e:	46a2      	mov	sl, r4
 8005090:	eb19 0905 	adds.w	r9, r9, r5
 8005094:	eb4a 0a06 	adc.w	sl, sl, r6
 8005098:	f04f 0100 	mov.w	r1, #0
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050ac:	4689      	mov	r9, r1
 80050ae:	4692      	mov	sl, r2
 80050b0:	eb19 0005 	adds.w	r0, r9, r5
 80050b4:	eb4a 0106 	adc.w	r1, sl, r6
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	461d      	mov	r5, r3
 80050be:	f04f 0600 	mov.w	r6, #0
 80050c2:	196b      	adds	r3, r5, r5
 80050c4:	eb46 0406 	adc.w	r4, r6, r6
 80050c8:	461a      	mov	r2, r3
 80050ca:	4623      	mov	r3, r4
 80050cc:	f7fb f890 	bl	80001f0 <__aeabi_uldivmod>
 80050d0:	4603      	mov	r3, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	461a      	mov	r2, r3
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <UART_SetConfig+0x384>)
 80050d8:	fba3 1302 	umull	r1, r3, r3, r2
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	2164      	movs	r1, #100	; 0x64
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	3332      	adds	r3, #50	; 0x32
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <UART_SetConfig+0x384>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	f003 0207 	and.w	r2, r3, #7
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4442      	add	r2, r8
 80050fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050fe:	e1b2      	b.n	8005466 <UART_SetConfig+0x6e2>
 8005100:	40011000 	.word	0x40011000
 8005104:	40011400 	.word	0x40011400
 8005108:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4ad7      	ldr	r2, [pc, #860]	; (8005470 <UART_SetConfig+0x6ec>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d005      	beq.n	8005122 <UART_SetConfig+0x39e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4ad6      	ldr	r2, [pc, #856]	; (8005474 <UART_SetConfig+0x6f0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	f040 80d1 	bne.w	80052c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005122:	f7fd fdb9 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8005126:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	469a      	mov	sl, r3
 800512c:	f04f 0b00 	mov.w	fp, #0
 8005130:	46d0      	mov	r8, sl
 8005132:	46d9      	mov	r9, fp
 8005134:	eb18 0308 	adds.w	r3, r8, r8
 8005138:	eb49 0409 	adc.w	r4, r9, r9
 800513c:	4698      	mov	r8, r3
 800513e:	46a1      	mov	r9, r4
 8005140:	eb18 080a 	adds.w	r8, r8, sl
 8005144:	eb49 090b 	adc.w	r9, r9, fp
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005154:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005158:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800515c:	4688      	mov	r8, r1
 800515e:	4691      	mov	r9, r2
 8005160:	eb1a 0508 	adds.w	r5, sl, r8
 8005164:	eb4b 0609 	adc.w	r6, fp, r9
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4619      	mov	r1, r3
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f04f 0400 	mov.w	r4, #0
 800517a:	0094      	lsls	r4, r2, #2
 800517c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005180:	008b      	lsls	r3, r1, #2
 8005182:	461a      	mov	r2, r3
 8005184:	4623      	mov	r3, r4
 8005186:	4628      	mov	r0, r5
 8005188:	4631      	mov	r1, r6
 800518a:	f7fb f831 	bl	80001f0 <__aeabi_uldivmod>
 800518e:	4603      	mov	r3, r0
 8005190:	460c      	mov	r4, r1
 8005192:	461a      	mov	r2, r3
 8005194:	4bb8      	ldr	r3, [pc, #736]	; (8005478 <UART_SetConfig+0x6f4>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	469b      	mov	fp, r3
 80051a4:	f04f 0c00 	mov.w	ip, #0
 80051a8:	46d9      	mov	r9, fp
 80051aa:	46e2      	mov	sl, ip
 80051ac:	eb19 0309 	adds.w	r3, r9, r9
 80051b0:	eb4a 040a 	adc.w	r4, sl, sl
 80051b4:	4699      	mov	r9, r3
 80051b6:	46a2      	mov	sl, r4
 80051b8:	eb19 090b 	adds.w	r9, r9, fp
 80051bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051d4:	4689      	mov	r9, r1
 80051d6:	4692      	mov	sl, r2
 80051d8:	eb1b 0509 	adds.w	r5, fp, r9
 80051dc:	eb4c 060a 	adc.w	r6, ip, sl
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	0094      	lsls	r4, r2, #2
 80051f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	4623      	mov	r3, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	4631      	mov	r1, r6
 8005202:	f7fa fff5 	bl	80001f0 <__aeabi_uldivmod>
 8005206:	4603      	mov	r3, r0
 8005208:	460c      	mov	r4, r1
 800520a:	461a      	mov	r2, r3
 800520c:	4b9a      	ldr	r3, [pc, #616]	; (8005478 <UART_SetConfig+0x6f4>)
 800520e:	fba3 1302 	umull	r1, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2164      	movs	r1, #100	; 0x64
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	4a95      	ldr	r2, [pc, #596]	; (8005478 <UART_SetConfig+0x6f4>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522c:	4498      	add	r8, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	469b      	mov	fp, r3
 8005232:	f04f 0c00 	mov.w	ip, #0
 8005236:	46d9      	mov	r9, fp
 8005238:	46e2      	mov	sl, ip
 800523a:	eb19 0309 	adds.w	r3, r9, r9
 800523e:	eb4a 040a 	adc.w	r4, sl, sl
 8005242:	4699      	mov	r9, r3
 8005244:	46a2      	mov	sl, r4
 8005246:	eb19 090b 	adds.w	r9, r9, fp
 800524a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800525a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800525e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005262:	4689      	mov	r9, r1
 8005264:	4692      	mov	sl, r2
 8005266:	eb1b 0509 	adds.w	r5, fp, r9
 800526a:	eb4c 060a 	adc.w	r6, ip, sl
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4619      	mov	r1, r3
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	0094      	lsls	r4, r2, #2
 8005282:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	461a      	mov	r2, r3
 800528a:	4623      	mov	r3, r4
 800528c:	4628      	mov	r0, r5
 800528e:	4631      	mov	r1, r6
 8005290:	f7fa ffae 	bl	80001f0 <__aeabi_uldivmod>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	461a      	mov	r2, r3
 800529a:	4b77      	ldr	r3, [pc, #476]	; (8005478 <UART_SetConfig+0x6f4>)
 800529c:	fba3 1302 	umull	r1, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2164      	movs	r1, #100	; 0x64
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	3332      	adds	r3, #50	; 0x32
 80052ae:	4a72      	ldr	r2, [pc, #456]	; (8005478 <UART_SetConfig+0x6f4>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4442      	add	r2, r8
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	e0d0      	b.n	8005466 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7fd fcd4 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 80052c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	469a      	mov	sl, r3
 80052ce:	f04f 0b00 	mov.w	fp, #0
 80052d2:	46d0      	mov	r8, sl
 80052d4:	46d9      	mov	r9, fp
 80052d6:	eb18 0308 	adds.w	r3, r8, r8
 80052da:	eb49 0409 	adc.w	r4, r9, r9
 80052de:	4698      	mov	r8, r3
 80052e0:	46a1      	mov	r9, r4
 80052e2:	eb18 080a 	adds.w	r8, r8, sl
 80052e6:	eb49 090b 	adc.w	r9, r9, fp
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052fe:	4688      	mov	r8, r1
 8005300:	4691      	mov	r9, r2
 8005302:	eb1a 0508 	adds.w	r5, sl, r8
 8005306:	eb4b 0609 	adc.w	r6, fp, r9
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4619      	mov	r1, r3
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	0094      	lsls	r4, r2, #2
 800531e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005322:	008b      	lsls	r3, r1, #2
 8005324:	461a      	mov	r2, r3
 8005326:	4623      	mov	r3, r4
 8005328:	4628      	mov	r0, r5
 800532a:	4631      	mov	r1, r6
 800532c:	f7fa ff60 	bl	80001f0 <__aeabi_uldivmod>
 8005330:	4603      	mov	r3, r0
 8005332:	460c      	mov	r4, r1
 8005334:	461a      	mov	r2, r3
 8005336:	4b50      	ldr	r3, [pc, #320]	; (8005478 <UART_SetConfig+0x6f4>)
 8005338:	fba3 2302 	umull	r2, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	469b      	mov	fp, r3
 8005346:	f04f 0c00 	mov.w	ip, #0
 800534a:	46d9      	mov	r9, fp
 800534c:	46e2      	mov	sl, ip
 800534e:	eb19 0309 	adds.w	r3, r9, r9
 8005352:	eb4a 040a 	adc.w	r4, sl, sl
 8005356:	4699      	mov	r9, r3
 8005358:	46a2      	mov	sl, r4
 800535a:	eb19 090b 	adds.w	r9, r9, fp
 800535e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800536e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005372:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005376:	4689      	mov	r9, r1
 8005378:	4692      	mov	sl, r2
 800537a:	eb1b 0509 	adds.w	r5, fp, r9
 800537e:	eb4c 060a 	adc.w	r6, ip, sl
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4619      	mov	r1, r3
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	0094      	lsls	r4, r2, #2
 8005396:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800539a:	008b      	lsls	r3, r1, #2
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	4631      	mov	r1, r6
 80053a4:	f7fa ff24 	bl	80001f0 <__aeabi_uldivmod>
 80053a8:	4603      	mov	r3, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b32      	ldr	r3, [pc, #200]	; (8005478 <UART_SetConfig+0x6f4>)
 80053b0:	fba3 1302 	umull	r1, r3, r3, r2
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	2164      	movs	r1, #100	; 0x64
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	3332      	adds	r3, #50	; 0x32
 80053c2:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <UART_SetConfig+0x6f4>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ce:	4498      	add	r8, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	469b      	mov	fp, r3
 80053d4:	f04f 0c00 	mov.w	ip, #0
 80053d8:	46d9      	mov	r9, fp
 80053da:	46e2      	mov	sl, ip
 80053dc:	eb19 0309 	adds.w	r3, r9, r9
 80053e0:	eb4a 040a 	adc.w	r4, sl, sl
 80053e4:	4699      	mov	r9, r3
 80053e6:	46a2      	mov	sl, r4
 80053e8:	eb19 090b 	adds.w	r9, r9, fp
 80053ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005404:	4689      	mov	r9, r1
 8005406:	4692      	mov	sl, r2
 8005408:	eb1b 0509 	adds.w	r5, fp, r9
 800540c:	eb4c 060a 	adc.w	r6, ip, sl
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4619      	mov	r1, r3
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	f04f 0400 	mov.w	r4, #0
 8005422:	0094      	lsls	r4, r2, #2
 8005424:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005428:	008b      	lsls	r3, r1, #2
 800542a:	461a      	mov	r2, r3
 800542c:	4623      	mov	r3, r4
 800542e:	4628      	mov	r0, r5
 8005430:	4631      	mov	r1, r6
 8005432:	f7fa fedd 	bl	80001f0 <__aeabi_uldivmod>
 8005436:	4603      	mov	r3, r0
 8005438:	460c      	mov	r4, r1
 800543a:	461a      	mov	r2, r3
 800543c:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <UART_SetConfig+0x6f4>)
 800543e:	fba3 1302 	umull	r1, r3, r3, r2
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2164      	movs	r1, #100	; 0x64
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	3332      	adds	r3, #50	; 0x32
 8005450:	4a09      	ldr	r2, [pc, #36]	; (8005478 <UART_SetConfig+0x6f4>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4442      	add	r2, r8
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	e7ff      	b.n	8005466 <UART_SetConfig+0x6e2>
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005470:	40011000 	.word	0x40011000
 8005474:	40011400 	.word	0x40011400
 8005478:	51eb851f 	.word	0x51eb851f

0800547c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800548a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800548e:	2b84      	cmp	r3, #132	; 0x84
 8005490:	d005      	beq.n	800549e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	3303      	adds	r3, #3
 800549c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054b0:	f000 ff38 	bl	8006324 <vTaskStartScheduler>
  
  return osOK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}

080054ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054bc:	b089      	sub	sp, #36	; 0x24
 80054be:	af04      	add	r7, sp, #16
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <osThreadCreate+0x54>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01c      	beq.n	800550e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685c      	ldr	r4, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681d      	ldr	r5, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691e      	ldr	r6, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ffc8 	bl	800547c <makeFreeRtosPriority>
 80054ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	9100      	str	r1, [sp, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4632      	mov	r2, r6
 8005500:	4629      	mov	r1, r5
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fd4b 	bl	8005f9e <xTaskCreateStatic>
 8005508:	4603      	mov	r3, r0
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e01c      	b.n	8005548 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685c      	ldr	r4, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800551a:	b29e      	uxth	r6, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ffaa 	bl	800547c <makeFreeRtosPriority>
 8005528:	4602      	mov	r2, r0
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	9200      	str	r2, [sp, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	4632      	mov	r2, r6
 8005536:	4629      	mov	r1, r5
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fd8a 	bl	8006052 <xTaskCreate>
 800553e:	4603      	mov	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005552 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <osDelay+0x16>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	e000      	b.n	800556a <osDelay+0x18>
 8005568:	2301      	movs	r3, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fea6 	bl	80062bc <vTaskDelay>
  
  return osOK;
 8005570:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 0208 	add.w	r2, r3, #8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0208 	add.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f103 0208 	add.w	r2, r3, #8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d103      	bne.n	800563c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e00c      	b.n	8005656 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3308      	adds	r3, #8
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e002      	b.n	800564a <vListInsert+0x2e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	d2f6      	bcs.n	8005644 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
 80056a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6852      	ldr	r2, [r2, #4]
 80056ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d103      	bne.n	80056c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	e7fe      	b.n	800570a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800570c:	f001 fc2e 	bl	8006f6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	3b01      	subs	r3, #1
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	22ff      	movs	r2, #255	; 0xff
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	22ff      	movs	r2, #255	; 0xff
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d114      	bne.n	800578c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01a      	beq.n	80057a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3310      	adds	r3, #16
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f816 	bl	80067a0 <xTaskRemoveFromEventList>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <xQueueGenericReset+0xcc>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	e009      	b.n	80057a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3310      	adds	r3, #16
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fef2 	bl	800557a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3324      	adds	r3, #36	; 0x24
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff feed 	bl	800557a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057a0:	f001 fc12 	bl	8006fc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a4:	2301      	movs	r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <xQueueGenericCreate+0x28>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	e7fe      	b.n	80057da <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	e004      	b.n	80057f2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	fb02 f303 	mul.w	r3, r2, r3
 80057f0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3348      	adds	r3, #72	; 0x48
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fcd2 	bl	80071a0 <pvPortMalloc>
 80057fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d011      	beq.n	8005828 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3348      	adds	r3, #72	; 0x48
 800580c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005816:	79fa      	ldrb	r2, [r7, #7]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f805 	bl	8005832 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005828:	69bb      	ldr	r3, [r7, #24]
	}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e002      	b.n	8005854 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005860:	2101      	movs	r1, #1
 8005862:	69b8      	ldr	r0, [r7, #24]
 8005864:	f7ff ff3e 	bl	80056e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	; 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <xQueueGenericSend+0x30>
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
 800589e:	e7fe      	b.n	800589e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <xQueueGenericSend+0x3e>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <xQueueGenericSend+0x42>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <xQueueGenericSend+0x44>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <xQueueGenericSend+0x5c>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	e7fe      	b.n	80058ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d103      	bne.n	80058da <xQueueGenericSend+0x6a>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <xQueueGenericSend+0x6e>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueGenericSend+0x70>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <xQueueGenericSend+0x88>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	e7fe      	b.n	80058f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058f8:	f001 f908 	bl	8006b0c <xTaskGetSchedulerState>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <xQueueGenericSend+0x98>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <xQueueGenericSend+0x9c>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <xQueueGenericSend+0x9e>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <xQueueGenericSend+0xb6>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005926:	f001 fb21 	bl	8006f6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <xQueueGenericSend+0xcc>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d129      	bne.n	8005990 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005942:	f000 fa1c 	bl	8005d7e <prvCopyDataToQueue>
 8005946:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ff23 	bl	80067a0 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <xQueueGenericSend+0x1f0>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e00a      	b.n	8005988 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <xQueueGenericSend+0x1f0>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005988:	f001 fb1e 	bl	8006fc8 <vPortExitCritical>
				return pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	e063      	b.n	8005a58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005996:	f001 fb17 	bl	8006fc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800599a:	2300      	movs	r3, #0
 800599c:	e05c      	b.n	8005a58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ff5b 	bl	8006864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b2:	f001 fb09 	bl	8006fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b6:	f000 fd13 	bl	80063e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ba:	f001 fad7 	bl	8006f6c <vPortEnterCritical>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <xQueueGenericSend+0x164>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x17a>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ea:	f001 faed 	bl	8006fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 ff4a 	bl	8006890 <xTaskCheckForTimeOut>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d124      	bne.n	8005a4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a04:	f000 fab3 	bl	8005f6e <prvIsQueueFull>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	3310      	adds	r3, #16
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fe9e 	bl	8006758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1e:	f000 fa3e 	bl	8005e9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a22:	f000 fceb 	bl	80063fc <xTaskResumeAll>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f af7c 	bne.w	8005926 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xQueueGenericSend+0x1f0>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e772      	b.n	8005926 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 fa2c 	bl	8005e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a46:	f000 fcd9 	bl	80063fc <xTaskResumeAll>
 8005a4a:	e76c      	b.n	8005926 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4e:	f000 fa26 	bl	8005e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a52:	f000 fcd3 	bl	80063fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3738      	adds	r7, #56	; 0x38
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <xQueueGenericSendFromISR+0x2c>
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e7fe      	b.n	8005a8e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <xQueueGenericSendFromISR+0x3a>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueGenericSendFromISR+0x3e>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueGenericSendFromISR+0x40>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xQueueGenericSendFromISR+0x58>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	e7fe      	b.n	8005aba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSendFromISR+0x66>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <xQueueGenericSendFromISR+0x6a>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericSendFromISR+0x6c>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <xQueueGenericSendFromISR+0x84>
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	e7fe      	b.n	8005ae6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ae8:	f001 fb1c 	bl	8007124 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aec:	f3ef 8211 	mrs	r2, BASEPRI
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	61ba      	str	r2, [r7, #24]
 8005b02:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b04:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <xQueueGenericSendFromISR+0xb6>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d12c      	bne.n	8005b74 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b2a:	f000 f928 	bl	8005d7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b2e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d112      	bne.n	8005b5e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d016      	beq.n	8005b6e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fe2b 	bl	80067a0 <xTaskRemoveFromEventList>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e007      	b.n	8005b6e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	b25a      	sxtb	r2, r3
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b72:	e001      	b.n	8005b78 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3738      	adds	r7, #56	; 0x38
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08c      	sub	sp, #48	; 0x30
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <xQueueReceive+0x2e>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <xQueueReceive+0x3c>
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <xQueueReceive+0x40>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <xQueueReceive+0x42>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <xQueueReceive+0x5a>
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e7fe      	b.n	8005be4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005be6:	f000 ff91 	bl	8006b0c <xTaskGetSchedulerState>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <xQueueReceive+0x6a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <xQueueReceive+0x6e>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <xQueueReceive+0x70>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <xQueueReceive+0x88>
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e7fe      	b.n	8005c12 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c14:	f001 f9aa 	bl	8006f6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01f      	beq.n	8005c64 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c28:	f000 f913 	bl	8005e52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	3310      	adds	r3, #16
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fdad 	bl	80067a0 <xTaskRemoveFromEventList>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c4c:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <xQueueReceive+0x1b4>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c5c:	f001 f9b4 	bl	8006fc8 <vPortExitCritical>
				return pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e069      	b.n	8005d38 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c6a:	f001 f9ad 	bl	8006fc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e062      	b.n	8005d38 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c78:	f107 0310 	add.w	r3, r7, #16
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fdf1 	bl	8006864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c86:	f001 f99f 	bl	8006fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c8a:	f000 fba9 	bl	80063e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c8e:	f001 f96d 	bl	8006f6c <vPortEnterCritical>
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d103      	bne.n	8005ca8 <xQueueReceive+0x11c>
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d103      	bne.n	8005cbe <xQueueReceive+0x132>
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbe:	f001 f983 	bl	8006fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cc2:	1d3a      	adds	r2, r7, #4
 8005cc4:	f107 0310 	add.w	r3, r7, #16
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fde0 	bl	8006890 <xTaskCheckForTimeOut>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d123      	bne.n	8005d1e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd8:	f000 f933 	bl	8005f42 <prvIsQueueEmpty>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d017      	beq.n	8005d12 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fd34 	bl	8006758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf2:	f000 f8d4 	bl	8005e9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cf6:	f000 fb81 	bl	80063fc <xTaskResumeAll>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d189      	bne.n	8005c14 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <xQueueReceive+0x1b4>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	e780      	b.n	8005c14 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d14:	f000 f8c3 	bl	8005e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d18:	f000 fb70 	bl	80063fc <xTaskResumeAll>
 8005d1c:	e77a      	b.n	8005c14 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d20:	f000 f8bd 	bl	8005e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d24:	f000 fb6a 	bl	80063fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2a:	f000 f90a 	bl	8005f42 <prvIsQueueEmpty>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f43f af6f 	beq.w	8005c14 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3730      	adds	r7, #48	; 0x30
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <uxQueueMessagesWaiting+0x22>
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	e7fe      	b.n	8005d64 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005d66:	f001 f901 	bl	8006f6c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005d70:	f001 f92a 	bl	8006fc8 <vPortExitCritical>

	return uxReturn;
 8005d74:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10d      	bne.n	8005db8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d14d      	bne.n	8005e40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fecd 	bl	8006b48 <xTaskPriorityDisinherit>
 8005dae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	609a      	str	r2, [r3, #8]
 8005db6:	e043      	b.n	8005e40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d119      	bne.n	8005df2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6858      	ldr	r0, [r3, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	f001 fbe7 	bl	800759c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d32b      	bcc.n	8005e40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	e026      	b.n	8005e40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68d8      	ldr	r0, [r3, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	f001 fbcd 	bl	800759c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d207      	bcs.n	8005e2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	425b      	negs	r3, r3
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d105      	bne.n	8005e40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d018      	beq.n	8005e96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d303      	bcc.n	8005e86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68d9      	ldr	r1, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6838      	ldr	r0, [r7, #0]
 8005e92:	f001 fb83 	bl	800759c <memcpy>
	}
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ea6:	f001 f861 	bl	8006f6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eb2:	e011      	b.n	8005ed8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d012      	beq.n	8005ee2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3324      	adds	r3, #36	; 0x24
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fc6d 	bl	80067a0 <xTaskRemoveFromEventList>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ecc:	f000 fd40 	bl	8006950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dce9      	bgt.n	8005eb4 <prvUnlockQueue+0x16>
 8005ee0:	e000      	b.n	8005ee4 <prvUnlockQueue+0x46>
					break;
 8005ee2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	22ff      	movs	r2, #255	; 0xff
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005eec:	f001 f86c 	bl	8006fc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ef0:	f001 f83c 	bl	8006f6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005efa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005efc:	e011      	b.n	8005f22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d012      	beq.n	8005f2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3310      	adds	r3, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fc48 	bl	80067a0 <xTaskRemoveFromEventList>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f16:	f000 fd1b 	bl	8006950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	dce9      	bgt.n	8005efe <prvUnlockQueue+0x60>
 8005f2a:	e000      	b.n	8005f2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f36:	f001 f847 	bl	8006fc8 <vPortExitCritical>
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f4a:	f001 f80f 	bl	8006f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e001      	b.n	8005f60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f60:	f001 f832 	bl	8006fc8 <vPortExitCritical>

	return xReturn;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f76:	f000 fff9 	bl	8006f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d102      	bne.n	8005f8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f86:	2301      	movs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e001      	b.n	8005f90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f90:	f001 f81a 	bl	8006fc8 <vPortExitCritical>

	return xReturn;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08e      	sub	sp, #56	; 0x38
 8005fa2:	af04      	add	r7, sp, #16
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <xTaskCreateStatic+0x28>
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	e7fe      	b.n	8005fc4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <xTaskCreateStatic+0x42>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	e7fe      	b.n	8005fde <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fe0:	2354      	movs	r3, #84	; 0x54
 8005fe2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b54      	cmp	r3, #84	; 0x54
 8005fe8:	d009      	beq.n	8005ffe <xTaskCreateStatic+0x60>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e7fe      	b.n	8005ffc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ffe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01e      	beq.n	8006044 <xTaskCreateStatic+0xa6>
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006014:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2202      	movs	r2, #2
 800601a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800601e:	2300      	movs	r3, #0
 8006020:	9303      	str	r3, [sp, #12]
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	9302      	str	r3, [sp, #8]
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f850 	bl	80060dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800603c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800603e:	f000 f8d3 	bl	80061e8 <prvAddNewTaskToReadyList>
 8006042:	e001      	b.n	8006048 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006048:	697b      	ldr	r3, [r7, #20]
	}
 800604a:	4618      	mov	r0, r3
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006052:	b580      	push	{r7, lr}
 8006054:	b08c      	sub	sp, #48	; 0x30
 8006056:	af04      	add	r7, sp, #16
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4618      	mov	r0, r3
 8006068:	f001 f89a 	bl	80071a0 <pvPortMalloc>
 800606c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00e      	beq.n	8006092 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006074:	2054      	movs	r0, #84	; 0x54
 8006076:	f001 f893 	bl	80071a0 <pvPortMalloc>
 800607a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
 8006088:	e005      	b.n	8006096 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800608a:	6978      	ldr	r0, [r7, #20]
 800608c:	f001 f94a 	bl	8007324 <vPortFree>
 8006090:	e001      	b.n	8006096 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d017      	beq.n	80060cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	2300      	movs	r3, #0
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	9302      	str	r3, [sp, #8]
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f80e 	bl	80060dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c0:	69f8      	ldr	r0, [r7, #28]
 80060c2:	f000 f891 	bl	80061e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e002      	b.n	80060d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
 80060d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060d2:	69bb      	ldr	r3, [r7, #24]
	}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060f4:	3b01      	subs	r3, #1
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <prvInitialiseNewTask+0x46>
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e7fe      	b.n	8006120 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01f      	beq.n	8006168 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e012      	b.n	8006154 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	7819      	ldrb	r1, [r3, #0]
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	3334      	adds	r3, #52	; 0x34
 800613e:	460a      	mov	r2, r1
 8006140:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	d9e9      	bls.n	800612e <prvInitialiseNewTask+0x52>
 800615a:	e000      	b.n	800615e <prvInitialiseNewTask+0x82>
			{
				break;
 800615c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006166:	e003      	b.n	8006170 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	2b06      	cmp	r3, #6
 8006174:	d901      	bls.n	800617a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006176:	2306      	movs	r3, #6
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006184:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2200      	movs	r2, #0
 800618a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	3304      	adds	r3, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fa12 	bl	80055ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	3318      	adds	r3, #24
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff fa0d 	bl	80055ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	f1c3 0207 	rsb	r2, r3, #7
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2200      	movs	r2, #0
 80061ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	69b8      	ldr	r0, [r7, #24]
 80061ca:	f000 fda7 	bl	8006d1c <pxPortInitialiseStack>
 80061ce:	4602      	mov	r2, r0
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e0:	bf00      	nop
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061f0:	f000 febc 	bl	8006f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061f4:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <prvAddNewTaskToReadyList+0xb8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a29      	ldr	r2, [pc, #164]	; (80062a0 <prvAddNewTaskToReadyList+0xb8>)
 80061fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <prvAddNewTaskToReadyList+0xbc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006206:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <prvAddNewTaskToReadyList+0xbc>)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800620c:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <prvAddNewTaskToReadyList+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d110      	bne.n	8006236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006214:	f000 fbc0 	bl	8006998 <prvInitialiseTaskLists>
 8006218:	e00d      	b.n	8006236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800621a:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <prvAddNewTaskToReadyList+0xc0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <prvAddNewTaskToReadyList+0xbc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	429a      	cmp	r2, r3
 800622e:	d802      	bhi.n	8006236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <prvAddNewTaskToReadyList+0xbc>)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006236:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <prvAddNewTaskToReadyList+0xc4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <prvAddNewTaskToReadyList+0xc4>)
 800623e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	2201      	movs	r2, #1
 8006246:	409a      	lsls	r2, r3
 8006248:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4313      	orrs	r3, r2
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <prvAddNewTaskToReadyList+0xcc>)
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3304      	adds	r3, #4
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7ff f9b3 	bl	80055d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800626e:	f000 feab 	bl	8006fc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <prvAddNewTaskToReadyList+0xc0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00e      	beq.n	8006298 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800627a:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <prvAddNewTaskToReadyList+0xbc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	429a      	cmp	r2, r3
 8006286:	d207      	bcs.n	8006298 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <prvAddNewTaskToReadyList+0xd0>)
 800628a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000550 	.word	0x20000550
 80062a4:	20000450 	.word	0x20000450
 80062a8:	2000055c 	.word	0x2000055c
 80062ac:	2000056c 	.word	0x2000056c
 80062b0:	20000558 	.word	0x20000558
 80062b4:	20000454 	.word	0x20000454
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <vTaskDelay+0x60>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <vTaskDelay+0x2e>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	e7fe      	b.n	80062e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80062ea:	f000 f879 	bl	80063e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062ee:	2100      	movs	r1, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fcad 	bl	8006c50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062f6:	f000 f881 	bl	80063fc <xTaskResumeAll>
 80062fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <vTaskDelay+0x64>)
 8006304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000578 	.word	0x20000578
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	; 0x28
 8006328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006332:	463a      	mov	r2, r7
 8006334:	1d39      	adds	r1, r7, #4
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa f96e 	bl	800061c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	9202      	str	r2, [sp, #8]
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	460a      	mov	r2, r1
 8006352:	491d      	ldr	r1, [pc, #116]	; (80063c8 <vTaskStartScheduler+0xa4>)
 8006354:	481d      	ldr	r0, [pc, #116]	; (80063cc <vTaskStartScheduler+0xa8>)
 8006356:	f7ff fe22 	bl	8005f9e <xTaskCreateStatic>
 800635a:	4602      	mov	r2, r0
 800635c:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <vTaskStartScheduler+0xac>)
 800635e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006360:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <vTaskStartScheduler+0xac>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e001      	b.n	8006372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d115      	bne.n	80063a4 <vTaskStartScheduler+0x80>
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <vTaskStartScheduler+0xb0>)
 800638c:	f04f 32ff 	mov.w	r2, #4294967295
 8006390:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006392:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <vTaskStartScheduler+0xb4>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <vTaskStartScheduler+0xb8>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800639e:	f000 fd47 	bl	8006e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063a2:	e00d      	b.n	80063c0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d109      	bne.n	80063c0 <vTaskStartScheduler+0x9c>
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	e7fe      	b.n	80063be <vTaskStartScheduler+0x9a>
}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	080077f0 	.word	0x080077f0
 80063cc:	08006969 	.word	0x08006969
 80063d0:	20000574 	.word	0x20000574
 80063d4:	20000570 	.word	0x20000570
 80063d8:	2000055c 	.word	0x2000055c
 80063dc:	20000554 	.word	0x20000554

080063e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <vTaskSuspendAll+0x18>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a03      	ldr	r2, [pc, #12]	; (80063f8 <vTaskSuspendAll+0x18>)
 80063ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80063ee:	bf00      	nop
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000578 	.word	0x20000578

080063fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800640a:	4b41      	ldr	r3, [pc, #260]	; (8006510 <xTaskResumeAll+0x114>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <xTaskResumeAll+0x2a>
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	e7fe      	b.n	8006424 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006426:	f000 fda1 	bl	8006f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800642a:	4b39      	ldr	r3, [pc, #228]	; (8006510 <xTaskResumeAll+0x114>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	4a37      	ldr	r2, [pc, #220]	; (8006510 <xTaskResumeAll+0x114>)
 8006432:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006434:	4b36      	ldr	r3, [pc, #216]	; (8006510 <xTaskResumeAll+0x114>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d161      	bne.n	8006500 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800643c:	4b35      	ldr	r3, [pc, #212]	; (8006514 <xTaskResumeAll+0x118>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d05d      	beq.n	8006500 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006444:	e02e      	b.n	80064a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006446:	4b34      	ldr	r3, [pc, #208]	; (8006518 <xTaskResumeAll+0x11c>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3318      	adds	r3, #24
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f91b 	bl	800568e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3304      	adds	r3, #4
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff f916 	bl	800568e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	2201      	movs	r2, #1
 8006468:	409a      	lsls	r2, r3
 800646a:	4b2c      	ldr	r3, [pc, #176]	; (800651c <xTaskResumeAll+0x120>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4313      	orrs	r3, r2
 8006470:	4a2a      	ldr	r2, [pc, #168]	; (800651c <xTaskResumeAll+0x120>)
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <xTaskResumeAll+0x124>)
 8006482:	441a      	add	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7ff f8a2 	bl	80055d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4b23      	ldr	r3, [pc, #140]	; (8006524 <xTaskResumeAll+0x128>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800649e:	4b22      	ldr	r3, [pc, #136]	; (8006528 <xTaskResumeAll+0x12c>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064a4:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <xTaskResumeAll+0x11c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1cc      	bne.n	8006446 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064b2:	f000 fb0b 	bl	8006acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064b6:	4b1d      	ldr	r3, [pc, #116]	; (800652c <xTaskResumeAll+0x130>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064c2:	f000 f837 	bl	8006534 <xTaskIncrementTick>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80064cc:	4b16      	ldr	r3, [pc, #88]	; (8006528 <xTaskResumeAll+0x12c>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f1      	bne.n	80064c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <xTaskResumeAll+0x130>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064e4:	4b10      	ldr	r3, [pc, #64]	; (8006528 <xTaskResumeAll+0x12c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064f0:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <xTaskResumeAll+0x134>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006500:	f000 fd62 	bl	8006fc8 <vPortExitCritical>

	return xAlreadyYielded;
 8006504:	68bb      	ldr	r3, [r7, #8]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000578 	.word	0x20000578
 8006514:	20000550 	.word	0x20000550
 8006518:	20000510 	.word	0x20000510
 800651c:	20000558 	.word	0x20000558
 8006520:	20000454 	.word	0x20000454
 8006524:	20000450 	.word	0x20000450
 8006528:	20000564 	.word	0x20000564
 800652c:	20000560 	.word	0x20000560
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653e:	4b4e      	ldr	r3, [pc, #312]	; (8006678 <xTaskIncrementTick+0x144>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 8087 	bne.w	8006656 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006548:	4b4c      	ldr	r3, [pc, #304]	; (800667c <xTaskIncrementTick+0x148>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006550:	4a4a      	ldr	r2, [pc, #296]	; (800667c <xTaskIncrementTick+0x148>)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11f      	bne.n	800659c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800655c:	4b48      	ldr	r3, [pc, #288]	; (8006680 <xTaskIncrementTick+0x14c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <xTaskIncrementTick+0x46>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	e7fe      	b.n	8006578 <xTaskIncrementTick+0x44>
 800657a:	4b41      	ldr	r3, [pc, #260]	; (8006680 <xTaskIncrementTick+0x14c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	4b40      	ldr	r3, [pc, #256]	; (8006684 <xTaskIncrementTick+0x150>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a3e      	ldr	r2, [pc, #248]	; (8006680 <xTaskIncrementTick+0x14c>)
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	4a3e      	ldr	r2, [pc, #248]	; (8006684 <xTaskIncrementTick+0x150>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b3e      	ldr	r3, [pc, #248]	; (8006688 <xTaskIncrementTick+0x154>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a3c      	ldr	r2, [pc, #240]	; (8006688 <xTaskIncrementTick+0x154>)
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	f000 fa98 	bl	8006acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800659c:	4b3b      	ldr	r3, [pc, #236]	; (800668c <xTaskIncrementTick+0x158>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d348      	bcc.n	8006638 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a6:	4b36      	ldr	r3, [pc, #216]	; (8006680 <xTaskIncrementTick+0x14c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b0:	4b36      	ldr	r3, [pc, #216]	; (800668c <xTaskIncrementTick+0x158>)
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	601a      	str	r2, [r3, #0]
					break;
 80065b8:	e03e      	b.n	8006638 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ba:	4b31      	ldr	r3, [pc, #196]	; (8006680 <xTaskIncrementTick+0x14c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d203      	bcs.n	80065da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065d2:	4a2e      	ldr	r2, [pc, #184]	; (800668c <xTaskIncrementTick+0x158>)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065d8:	e02e      	b.n	8006638 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff f855 	bl	800568e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	3318      	adds	r3, #24
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff f84c 	bl	800568e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	2201      	movs	r2, #1
 80065fc:	409a      	lsls	r2, r3
 80065fe:	4b24      	ldr	r3, [pc, #144]	; (8006690 <xTaskIncrementTick+0x15c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	4a22      	ldr	r2, [pc, #136]	; (8006690 <xTaskIncrementTick+0x15c>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <xTaskIncrementTick+0x160>)
 8006616:	441a      	add	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe ffd8 	bl	80055d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <xTaskIncrementTick+0x164>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	429a      	cmp	r2, r3
 8006630:	d3b9      	bcc.n	80065a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006636:	e7b6      	b.n	80065a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006638:	4b17      	ldr	r3, [pc, #92]	; (8006698 <xTaskIncrementTick+0x164>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663e:	4915      	ldr	r1, [pc, #84]	; (8006694 <xTaskIncrementTick+0x160>)
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d907      	bls.n	8006660 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e004      	b.n	8006660 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <xTaskIncrementTick+0x168>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	4a0f      	ldr	r2, [pc, #60]	; (800669c <xTaskIncrementTick+0x168>)
 800665e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <xTaskIncrementTick+0x16c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800666c:	697b      	ldr	r3, [r7, #20]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000578 	.word	0x20000578
 800667c:	20000554 	.word	0x20000554
 8006680:	20000508 	.word	0x20000508
 8006684:	2000050c 	.word	0x2000050c
 8006688:	20000568 	.word	0x20000568
 800668c:	20000570 	.word	0x20000570
 8006690:	20000558 	.word	0x20000558
 8006694:	20000454 	.word	0x20000454
 8006698:	20000450 	.word	0x20000450
 800669c:	20000560 	.word	0x20000560
 80066a0:	20000564 	.word	0x20000564

080066a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066aa:	4b26      	ldr	r3, [pc, #152]	; (8006744 <vTaskSwitchContext+0xa0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066b2:	4b25      	ldr	r3, [pc, #148]	; (8006748 <vTaskSwitchContext+0xa4>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066b8:	e03e      	b.n	8006738 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80066ba:	4b23      	ldr	r3, [pc, #140]	; (8006748 <vTaskSwitchContext+0xa4>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c0:	4b22      	ldr	r3, [pc, #136]	; (800674c <vTaskSwitchContext+0xa8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	fab3 f383 	clz	r3, r3
 80066cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80066ce:	7afb      	ldrb	r3, [r7, #11]
 80066d0:	f1c3 031f 	rsb	r3, r3, #31
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	491e      	ldr	r1, [pc, #120]	; (8006750 <vTaskSwitchContext+0xac>)
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <vTaskSwitchContext+0x5a>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	e7fe      	b.n	80066fc <vTaskSwitchContext+0x58>
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a11      	ldr	r2, [pc, #68]	; (8006750 <vTaskSwitchContext+0xac>)
 800670a:	4413      	add	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3308      	adds	r3, #8
 8006720:	429a      	cmp	r2, r3
 8006722:	d104      	bne.n	800672e <vTaskSwitchContext+0x8a>
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4a07      	ldr	r2, [pc, #28]	; (8006754 <vTaskSwitchContext+0xb0>)
 8006736:	6013      	str	r3, [r2, #0]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000578 	.word	0x20000578
 8006748:	20000564 	.word	0x20000564
 800674c:	20000558 	.word	0x20000558
 8006750:	20000454 	.word	0x20000454
 8006754:	20000450 	.word	0x20000450

08006758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <vTaskPlaceOnEventList+0x24>
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e7fe      	b.n	800677a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <vTaskPlaceOnEventList+0x44>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3318      	adds	r3, #24
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fe ff49 	bl	800561c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800678a:	2101      	movs	r1, #1
 800678c:	6838      	ldr	r0, [r7, #0]
 800678e:	f000 fa5f 	bl	8006c50 <prvAddCurrentTaskToDelayedList>
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000450 	.word	0x20000450

080067a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <xTaskRemoveFromEventList+0x2a>
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	e7fe      	b.n	80067c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3318      	adds	r3, #24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe ff5d 	bl	800568e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <xTaskRemoveFromEventList+0xac>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11c      	bne.n	8006816 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3304      	adds	r3, #4
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe ff54 	bl	800568e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	2201      	movs	r2, #1
 80067ec:	409a      	lsls	r2, r3
 80067ee:	4b18      	ldr	r3, [pc, #96]	; (8006850 <xTaskRemoveFromEventList+0xb0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	4a16      	ldr	r2, [pc, #88]	; (8006850 <xTaskRemoveFromEventList+0xb0>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <xTaskRemoveFromEventList+0xb4>)
 8006806:	441a      	add	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7fe fee0 	bl	80055d4 <vListInsertEnd>
 8006814:	e005      	b.n	8006822 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3318      	adds	r3, #24
 800681a:	4619      	mov	r1, r3
 800681c:	480e      	ldr	r0, [pc, #56]	; (8006858 <xTaskRemoveFromEventList+0xb8>)
 800681e:	f7fe fed9 	bl	80055d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <xTaskRemoveFromEventList+0xbc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	429a      	cmp	r2, r3
 800682e:	d905      	bls.n	800683c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <xTaskRemoveFromEventList+0xc0>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e001      	b.n	8006840 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006840:	697b      	ldr	r3, [r7, #20]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000578 	.word	0x20000578
 8006850:	20000558 	.word	0x20000558
 8006854:	20000454 	.word	0x20000454
 8006858:	20000510 	.word	0x20000510
 800685c:	20000450 	.word	0x20000450
 8006860:	20000564 	.word	0x20000564

08006864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <vTaskInternalSetTimeOutState+0x24>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <vTaskInternalSetTimeOutState+0x28>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	605a      	str	r2, [r3, #4]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20000568 	.word	0x20000568
 800688c:	20000554 	.word	0x20000554

08006890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <xTaskCheckForTimeOut+0x24>
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	e7fe      	b.n	80068b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <xTaskCheckForTimeOut+0x3e>
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e7fe      	b.n	80068cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80068ce:	f000 fb4d 	bl	8006f6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <xTaskCheckForTimeOut+0xb8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d102      	bne.n	80068f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e023      	b.n	800693a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <xTaskCheckForTimeOut+0xbc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d007      	beq.n	800690e <xTaskCheckForTimeOut+0x7e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	e015      	b.n	800693a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	429a      	cmp	r2, r3
 8006916:	d20b      	bcs.n	8006930 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff9d 	bl	8006864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	e004      	b.n	800693a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006936:	2301      	movs	r3, #1
 8006938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800693a:	f000 fb45 	bl	8006fc8 <vPortExitCritical>

	return xReturn;
 800693e:	69fb      	ldr	r3, [r7, #28]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000554 	.word	0x20000554
 800694c:	20000568 	.word	0x20000568

08006950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006954:	4b03      	ldr	r3, [pc, #12]	; (8006964 <vTaskMissedYield+0x14>)
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000564 	.word	0x20000564

08006968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006970:	f000 f852 	bl	8006a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <prvIdleTask+0x28>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d9f9      	bls.n	8006970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <prvIdleTask+0x2c>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800698c:	e7f0      	b.n	8006970 <prvIdleTask+0x8>
 800698e:	bf00      	nop
 8006990:	20000454 	.word	0x20000454
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800699e:	2300      	movs	r3, #0
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	e00c      	b.n	80069be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <prvInitialiseTaskLists+0x60>)
 80069b0:	4413      	add	r3, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fde1 	bl	800557a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3301      	adds	r3, #1
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b06      	cmp	r3, #6
 80069c2:	d9ef      	bls.n	80069a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069c4:	480d      	ldr	r0, [pc, #52]	; (80069fc <prvInitialiseTaskLists+0x64>)
 80069c6:	f7fe fdd8 	bl	800557a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069ca:	480d      	ldr	r0, [pc, #52]	; (8006a00 <prvInitialiseTaskLists+0x68>)
 80069cc:	f7fe fdd5 	bl	800557a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069d0:	480c      	ldr	r0, [pc, #48]	; (8006a04 <prvInitialiseTaskLists+0x6c>)
 80069d2:	f7fe fdd2 	bl	800557a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069d6:	480c      	ldr	r0, [pc, #48]	; (8006a08 <prvInitialiseTaskLists+0x70>)
 80069d8:	f7fe fdcf 	bl	800557a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069dc:	480b      	ldr	r0, [pc, #44]	; (8006a0c <prvInitialiseTaskLists+0x74>)
 80069de:	f7fe fdcc 	bl	800557a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <prvInitialiseTaskLists+0x78>)
 80069e4:	4a05      	ldr	r2, [pc, #20]	; (80069fc <prvInitialiseTaskLists+0x64>)
 80069e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <prvInitialiseTaskLists+0x7c>)
 80069ea:	4a05      	ldr	r2, [pc, #20]	; (8006a00 <prvInitialiseTaskLists+0x68>)
 80069ec:	601a      	str	r2, [r3, #0]
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000454 	.word	0x20000454
 80069fc:	200004e0 	.word	0x200004e0
 8006a00:	200004f4 	.word	0x200004f4
 8006a04:	20000510 	.word	0x20000510
 8006a08:	20000524 	.word	0x20000524
 8006a0c:	2000053c 	.word	0x2000053c
 8006a10:	20000508 	.word	0x20000508
 8006a14:	2000050c 	.word	0x2000050c

08006a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a1e:	e019      	b.n	8006a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a20:	f000 faa4 	bl	8006f6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <prvCheckTasksWaitingTermination+0x4c>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe fe2c 	bl	800568e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <prvCheckTasksWaitingTermination+0x50>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <prvCheckTasksWaitingTermination+0x50>)
 8006a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <prvCheckTasksWaitingTermination+0x54>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <prvCheckTasksWaitingTermination+0x54>)
 8006a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a4a:	f000 fabd 	bl	8006fc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f80e 	bl	8006a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <prvCheckTasksWaitingTermination+0x54>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e1      	bne.n	8006a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20000524 	.word	0x20000524
 8006a68:	20000550 	.word	0x20000550
 8006a6c:	20000538 	.word	0x20000538

08006a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fc4c 	bl	8007324 <vPortFree>
				vPortFree( pxTCB );
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc49 	bl	8007324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a92:	e017      	b.n	8006ac4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d103      	bne.n	8006aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fc40 	bl	8007324 <vPortFree>
	}
 8006aa4:	e00e      	b.n	8006ac4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d009      	beq.n	8006ac4 <prvDeleteTCB+0x54>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	e7fe      	b.n	8006ac2 <prvDeleteTCB+0x52>
	}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <prvResetNextTaskUnblockTime+0x38>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ae4:	e008      	b.n	8006af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <prvResetNextTaskUnblockTime+0x38>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4a04      	ldr	r2, [pc, #16]	; (8006b08 <prvResetNextTaskUnblockTime+0x3c>)
 8006af6:	6013      	str	r3, [r2, #0]
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	20000508 	.word	0x20000508
 8006b08:	20000570 	.word	0x20000570

08006b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <xTaskGetSchedulerState+0x34>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	e008      	b.n	8006b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b20:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <xTaskGetSchedulerState+0x38>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	e001      	b.n	8006b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b32:	687b      	ldr	r3, [r7, #4]
	}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	2000055c 	.word	0x2000055c
 8006b44:	20000578 	.word	0x20000578

08006b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d06c      	beq.n	8006c38 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b5e:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <xTaskPriorityDisinherit+0xfc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d009      	beq.n	8006b7c <xTaskPriorityDisinherit+0x34>
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	e7fe      	b.n	8006b7a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d109      	bne.n	8006b98 <xTaskPriorityDisinherit+0x50>
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	e7fe      	b.n	8006b96 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9c:	1e5a      	subs	r2, r3, #1
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d044      	beq.n	8006c38 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d140      	bne.n	8006c38 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fd67 	bl	800568e <uxListRemove>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d115      	bne.n	8006bf2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	491f      	ldr	r1, [pc, #124]	; (8006c48 <xTaskPriorityDisinherit+0x100>)
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xTaskPriorityDisinherit+0xaa>
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	2201      	movs	r2, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	43da      	mvns	r2, r3
 8006be8:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <xTaskPriorityDisinherit+0x104>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4013      	ands	r3, r2
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <xTaskPriorityDisinherit+0x104>)
 8006bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	f1c3 0207 	rsb	r2, r3, #7
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	409a      	lsls	r2, r3
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <xTaskPriorityDisinherit+0x104>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <xTaskPriorityDisinherit+0x104>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <xTaskPriorityDisinherit+0x100>)
 8006c26:	441a      	add	r2, r3
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7fe fcd0 	bl	80055d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c38:	697b      	ldr	r3, [r7, #20]
	}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000450 	.word	0x20000450
 8006c48:	20000454 	.word	0x20000454
 8006c4c:	20000558 	.word	0x20000558

08006c50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c5a:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c60:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fd11 	bl	800568e <uxListRemove>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c72:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	2201      	movs	r2, #1
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	43da      	mvns	r2, r3
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4013      	ands	r3, r2
 8006c86:	4a20      	ldr	r2, [pc, #128]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d10a      	bne.n	8006ca8 <prvAddCurrentTaskToDelayedList+0x58>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	481a      	ldr	r0, [pc, #104]	; (8006d0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ca2:	f7fe fc97 	bl	80055d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ca6:	e026      	b.n	8006cf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cb0:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d209      	bcs.n	8006cd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4610      	mov	r0, r2
 8006cce:	f7fe fca5 	bl	800561c <vListInsert>
}
 8006cd2:	e010      	b.n	8006cf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd4:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f7fe fc9b 	bl	800561c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d202      	bcs.n	8006cf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006cf0:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6013      	str	r3, [r2, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000554 	.word	0x20000554
 8006d04:	20000450 	.word	0x20000450
 8006d08:	20000558 	.word	0x20000558
 8006d0c:	2000053c 	.word	0x2000053c
 8006d10:	2000050c 	.word	0x2000050c
 8006d14:	20000508 	.word	0x20000508
 8006d18:	20000570 	.word	0x20000570

08006d1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3b04      	subs	r3, #4
 8006d2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3b04      	subs	r3, #4
 8006d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3b04      	subs	r3, #4
 8006d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d4c:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <pxPortInitialiseStack+0x64>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3b14      	subs	r3, #20
 8006d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3b04      	subs	r3, #4
 8006d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f06f 0202 	mvn.w	r2, #2
 8006d6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3b20      	subs	r3, #32
 8006d70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d72:	68fb      	ldr	r3, [r7, #12]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	08006d85 	.word	0x08006d85

08006d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d8e:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <prvTaskExitError+0x50>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d96:	d009      	beq.n	8006dac <prvTaskExitError+0x28>
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	e7fe      	b.n	8006daa <prvTaskExitError+0x26>
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dbe:	bf00      	nop
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0fc      	beq.n	8006dc0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	2000000c 	.word	0x2000000c
	...

08006de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <pxCurrentTCBConst2>)
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	6808      	ldr	r0, [r1, #0]
 8006de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dea:	f380 8809 	msr	PSP, r0
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f380 8811 	msr	BASEPRI, r0
 8006dfa:	4770      	bx	lr
 8006dfc:	f3af 8000 	nop.w

08006e00 <pxCurrentTCBConst2>:
 8006e00:	20000450 	.word	0x20000450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop

08006e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e08:	4808      	ldr	r0, [pc, #32]	; (8006e2c <prvPortStartFirstTask+0x24>)
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	6800      	ldr	r0, [r0, #0]
 8006e0e:	f380 8808 	msr	MSP, r0
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f380 8814 	msr	CONTROL, r0
 8006e1a:	b662      	cpsie	i
 8006e1c:	b661      	cpsie	f
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	df00      	svc	0
 8006e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e2a:	bf00      	nop
 8006e2c:	e000ed08 	.word	0xe000ed08

08006e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e36:	4b44      	ldr	r3, [pc, #272]	; (8006f48 <xPortStartScheduler+0x118>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a44      	ldr	r2, [pc, #272]	; (8006f4c <xPortStartScheduler+0x11c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d109      	bne.n	8006e54 <xPortStartScheduler+0x24>
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	e7fe      	b.n	8006e52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e54:	4b3c      	ldr	r3, [pc, #240]	; (8006f48 <xPortStartScheduler+0x118>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a3d      	ldr	r2, [pc, #244]	; (8006f50 <xPortStartScheduler+0x120>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d109      	bne.n	8006e72 <xPortStartScheduler+0x42>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e7fe      	b.n	8006e70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e72:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <xPortStartScheduler+0x124>)
 8006e74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	22ff      	movs	r2, #255	; 0xff
 8006e82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	4b30      	ldr	r3, [pc, #192]	; (8006f58 <xPortStartScheduler+0x128>)
 8006e98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e9a:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006e9c:	2207      	movs	r2, #7
 8006e9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ea0:	e009      	b.n	8006eb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006ea2:	4b2e      	ldr	r3, [pc, #184]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d0ef      	beq.n	8006ea2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ec2:	4b26      	ldr	r3, [pc, #152]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f1c3 0307 	rsb	r3, r3, #7
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d009      	beq.n	8006ee2 <xPortStartScheduler+0xb2>
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	e7fe      	b.n	8006ee0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ee2:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006eea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ef4:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <xPortStartScheduler+0x12c>)
 8006ef6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f00:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <xPortStartScheduler+0x130>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <xPortStartScheduler+0x130>)
 8006f06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f0c:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <xPortStartScheduler+0x130>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <xPortStartScheduler+0x130>)
 8006f12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f18:	f000 f8d6 	bl	80070c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f1c:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <xPortStartScheduler+0x134>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f22:	f000 f8f5 	bl	8007110 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f26:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <xPortStartScheduler+0x138>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <xPortStartScheduler+0x138>)
 8006f2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f32:	f7ff ff69 	bl	8006e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f36:	f7ff fbb5 	bl	80066a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006f3a:	f7ff ff23 	bl	8006d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed00 	.word	0xe000ed00
 8006f4c:	410fc271 	.word	0x410fc271
 8006f50:	410fc270 	.word	0x410fc270
 8006f54:	e000e400 	.word	0xe000e400
 8006f58:	2000057c 	.word	0x2000057c
 8006f5c:	20000580 	.word	0x20000580
 8006f60:	e000ed20 	.word	0xe000ed20
 8006f64:	2000000c 	.word	0x2000000c
 8006f68:	e000ef34 	.word	0xe000ef34

08006f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <vPortEnterCritical+0x54>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a0d      	ldr	r2, [pc, #52]	; (8006fc0 <vPortEnterCritical+0x54>)
 8006f8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <vPortEnterCritical+0x54>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10e      	bne.n	8006fb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <vPortEnterCritical+0x58>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <vPortEnterCritical+0x48>
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	e7fe      	b.n	8006fb2 <vPortEnterCritical+0x46>
	}
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	2000000c 	.word	0x2000000c
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <vPortExitCritical+0x4c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <vPortExitCritical+0x22>
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	e7fe      	b.n	8006fe8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <vPortExitCritical+0x4c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	4a08      	ldr	r2, [pc, #32]	; (8007014 <vPortExitCritical+0x4c>)
 8006ff2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <vPortExitCritical+0x4c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <vPortExitCritical+0x3e>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	2000000c 	.word	0x2000000c
	...

08007020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007020:	f3ef 8009 	mrs	r0, PSP
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4b15      	ldr	r3, [pc, #84]	; (8007080 <pxCurrentTCBConst>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f01e 0f10 	tst.w	lr, #16
 8007030:	bf08      	it	eq
 8007032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007044:	f380 8811 	msr	BASEPRI, r0
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f7ff fb28 	bl	80066a4 <vTaskSwitchContext>
 8007054:	f04f 0000 	mov.w	r0, #0
 8007058:	f380 8811 	msr	BASEPRI, r0
 800705c:	bc09      	pop	{r0, r3}
 800705e:	6819      	ldr	r1, [r3, #0]
 8007060:	6808      	ldr	r0, [r1, #0]
 8007062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007066:	f01e 0f10 	tst.w	lr, #16
 800706a:	bf08      	it	eq
 800706c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007070:	f380 8809 	msr	PSP, r0
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst>:
 8007080:	20000450 	.word	0x20000450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070a0:	f7ff fa48 	bl	8006534 <xTaskIncrementTick>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <SysTick_Handler+0x3c>)
 80070ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <vPortSetupTimerInterrupt+0x34>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <vPortSetupTimerInterrupt+0x38>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <vPortSetupTimerInterrupt+0x3c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a0a      	ldr	r2, [pc, #40]	; (8007108 <vPortSetupTimerInterrupt+0x40>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	4a09      	ldr	r2, [pc, #36]	; (800710c <vPortSetupTimerInterrupt+0x44>)
 80070e6:	3b01      	subs	r3, #1
 80070e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ea:	4b04      	ldr	r3, [pc, #16]	; (80070fc <vPortSetupTimerInterrupt+0x34>)
 80070ec:	2207      	movs	r2, #7
 80070ee:	601a      	str	r2, [r3, #0]
}
 80070f0:	bf00      	nop
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	e000e010 	.word	0xe000e010
 8007100:	e000e018 	.word	0xe000e018
 8007104:	20000000 	.word	0x20000000
 8007108:	10624dd3 	.word	0x10624dd3
 800710c:	e000e014 	.word	0xe000e014

08007110 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007110:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007120 <vPortEnableVFP+0x10>
 8007114:	6801      	ldr	r1, [r0, #0]
 8007116:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800711a:	6001      	str	r1, [r0, #0]
 800711c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800711e:	bf00      	nop
 8007120:	e000ed88 	.word	0xe000ed88

08007124 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800712a:	f3ef 8305 	mrs	r3, IPSR
 800712e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b0f      	cmp	r3, #15
 8007134:	d913      	bls.n	800715e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007136:	4a16      	ldr	r2, [pc, #88]	; (8007190 <vPortValidateInterruptPriority+0x6c>)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007140:	4b14      	ldr	r3, [pc, #80]	; (8007194 <vPortValidateInterruptPriority+0x70>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	7afa      	ldrb	r2, [r7, #11]
 8007146:	429a      	cmp	r2, r3
 8007148:	d209      	bcs.n	800715e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	e7fe      	b.n	800715c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <vPortValidateInterruptPriority+0x74>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007166:	4b0d      	ldr	r3, [pc, #52]	; (800719c <vPortValidateInterruptPriority+0x78>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d909      	bls.n	8007182 <vPortValidateInterruptPriority+0x5e>
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	e7fe      	b.n	8007180 <vPortValidateInterruptPriority+0x5c>
	}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	e000e3f0 	.word	0xe000e3f0
 8007194:	2000057c 	.word	0x2000057c
 8007198:	e000ed0c 	.word	0xe000ed0c
 800719c:	20000580 	.word	0x20000580

080071a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071ac:	f7ff f918 	bl	80063e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071b0:	4b57      	ldr	r3, [pc, #348]	; (8007310 <pvPortMalloc+0x170>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071b8:	f000 f90c 	bl	80073d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071bc:	4b55      	ldr	r3, [pc, #340]	; (8007314 <pvPortMalloc+0x174>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 808c 	bne.w	80072e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01c      	beq.n	800720a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80071d0:	2208      	movs	r2, #8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d013      	beq.n	800720a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f023 0307 	bic.w	r3, r3, #7
 80071e8:	3308      	adds	r3, #8
 80071ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <pvPortMalloc+0x6a>
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e7fe      	b.n	8007208 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d068      	beq.n	80072e2 <pvPortMalloc+0x142>
 8007210:	4b41      	ldr	r3, [pc, #260]	; (8007318 <pvPortMalloc+0x178>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d863      	bhi.n	80072e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800721a:	4b40      	ldr	r3, [pc, #256]	; (800731c <pvPortMalloc+0x17c>)
 800721c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800721e:	4b3f      	ldr	r3, [pc, #252]	; (800731c <pvPortMalloc+0x17c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007224:	e004      	b.n	8007230 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d903      	bls.n	8007242 <pvPortMalloc+0xa2>
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f1      	bne.n	8007226 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007242:	4b33      	ldr	r3, [pc, #204]	; (8007310 <pvPortMalloc+0x170>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007248:	429a      	cmp	r2, r3
 800724a:	d04a      	beq.n	80072e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2208      	movs	r2, #8
 8007252:	4413      	add	r3, r2
 8007254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	1ad2      	subs	r2, r2, r3
 8007266:	2308      	movs	r3, #8
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	429a      	cmp	r2, r3
 800726c:	d91e      	bls.n	80072ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4413      	add	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <pvPortMalloc+0xf4>
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	e7fe      	b.n	8007292 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	1ad2      	subs	r2, r2, r3
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072a6:	69b8      	ldr	r0, [r7, #24]
 80072a8:	f000 f8f6 	bl	8007498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072ac:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <pvPortMalloc+0x178>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	4a18      	ldr	r2, [pc, #96]	; (8007318 <pvPortMalloc+0x178>)
 80072b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072ba:	4b17      	ldr	r3, [pc, #92]	; (8007318 <pvPortMalloc+0x178>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <pvPortMalloc+0x180>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d203      	bcs.n	80072ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <pvPortMalloc+0x178>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a15      	ldr	r2, [pc, #84]	; (8007320 <pvPortMalloc+0x180>)
 80072cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <pvPortMalloc+0x174>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072e2:	f7ff f88b 	bl	80063fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <pvPortMalloc+0x164>
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e7fe      	b.n	8007302 <pvPortMalloc+0x162>
	return pvReturn;
 8007304:	69fb      	ldr	r3, [r7, #28]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3728      	adds	r7, #40	; 0x28
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2000418c 	.word	0x2000418c
 8007314:	20004198 	.word	0x20004198
 8007318:	20004190 	.word	0x20004190
 800731c:	20004184 	.word	0x20004184
 8007320:	20004194 	.word	0x20004194

08007324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d046      	beq.n	80073c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007336:	2308      	movs	r3, #8
 8007338:	425b      	negs	r3, r3
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4413      	add	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	4b20      	ldr	r3, [pc, #128]	; (80073cc <vPortFree+0xa8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <vPortFree+0x42>
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e7fe      	b.n	8007364 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <vPortFree+0x5e>
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	e7fe      	b.n	8007380 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	4b11      	ldr	r3, [pc, #68]	; (80073cc <vPortFree+0xa8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d019      	beq.n	80073c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d115      	bne.n	80073c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <vPortFree+0xa8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073a8:	f7ff f81a 	bl	80063e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <vPortFree+0xac>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <vPortFree+0xac>)
 80073b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f000 f86c 	bl	8007498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073c0:	f7ff f81c 	bl	80063fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073c4:	bf00      	nop
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20004198 	.word	0x20004198
 80073d0:	20004190 	.word	0x20004190

080073d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073e0:	4b27      	ldr	r3, [pc, #156]	; (8007480 <prvHeapInit+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00c      	beq.n	8007408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3307      	adds	r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <prvHeapInit+0xac>)
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <prvHeapInit+0xb0>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <prvHeapInit+0xb0>)
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007420:	2208      	movs	r2, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0307 	bic.w	r3, r3, #7
 800742e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <prvHeapInit+0xb4>)
 8007434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <prvHeapInit+0xb4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <prvHeapInit+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvHeapInit+0xb4>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <prvHeapInit+0xb8>)
 8007462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a09      	ldr	r2, [pc, #36]	; (8007490 <prvHeapInit+0xbc>)
 800746a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <prvHeapInit+0xc0>)
 800746e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000584 	.word	0x20000584
 8007484:	20004184 	.word	0x20004184
 8007488:	2000418c 	.word	0x2000418c
 800748c:	20004194 	.word	0x20004194
 8007490:	20004190 	.word	0x20004190
 8007494:	20004198 	.word	0x20004198

08007498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074a0:	4b28      	ldr	r3, [pc, #160]	; (8007544 <prvInsertBlockIntoFreeList+0xac>)
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e002      	b.n	80074ac <prvInsertBlockIntoFreeList+0x14>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d8f7      	bhi.n	80074a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d108      	bne.n	80074da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d118      	bne.n	8007520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d00d      	beq.n	8007516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	441a      	add	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e008      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e003      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d002      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20004184 	.word	0x20004184
 8007548:	2000418c 	.word	0x2000418c

0800754c <atoi>:
 800754c:	220a      	movs	r2, #10
 800754e:	2100      	movs	r1, #0
 8007550:	f000 b8b2 	b.w	80076b8 <strtol>

08007554 <__libc_init_array>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	4e0d      	ldr	r6, [pc, #52]	; (800758c <__libc_init_array+0x38>)
 8007558:	4c0d      	ldr	r4, [pc, #52]	; (8007590 <__libc_init_array+0x3c>)
 800755a:	1ba4      	subs	r4, r4, r6
 800755c:	10a4      	asrs	r4, r4, #2
 800755e:	2500      	movs	r5, #0
 8007560:	42a5      	cmp	r5, r4
 8007562:	d109      	bne.n	8007578 <__libc_init_array+0x24>
 8007564:	4e0b      	ldr	r6, [pc, #44]	; (8007594 <__libc_init_array+0x40>)
 8007566:	4c0c      	ldr	r4, [pc, #48]	; (8007598 <__libc_init_array+0x44>)
 8007568:	f000 f8de 	bl	8007728 <_init>
 800756c:	1ba4      	subs	r4, r4, r6
 800756e:	10a4      	asrs	r4, r4, #2
 8007570:	2500      	movs	r5, #0
 8007572:	42a5      	cmp	r5, r4
 8007574:	d105      	bne.n	8007582 <__libc_init_array+0x2e>
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800757c:	4798      	blx	r3
 800757e:	3501      	adds	r5, #1
 8007580:	e7ee      	b.n	8007560 <__libc_init_array+0xc>
 8007582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007586:	4798      	blx	r3
 8007588:	3501      	adds	r5, #1
 800758a:	e7f2      	b.n	8007572 <__libc_init_array+0x1e>
 800758c:	08007924 	.word	0x08007924
 8007590:	08007924 	.word	0x08007924
 8007594:	08007924 	.word	0x08007924
 8007598:	08007928 	.word	0x08007928

0800759c <memcpy>:
 800759c:	b510      	push	{r4, lr}
 800759e:	1e43      	subs	r3, r0, #1
 80075a0:	440a      	add	r2, r1
 80075a2:	4291      	cmp	r1, r2
 80075a4:	d100      	bne.n	80075a8 <memcpy+0xc>
 80075a6:	bd10      	pop	{r4, pc}
 80075a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075b0:	e7f7      	b.n	80075a2 <memcpy+0x6>

080075b2 <memset>:
 80075b2:	4402      	add	r2, r0
 80075b4:	4603      	mov	r3, r0
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d100      	bne.n	80075bc <memset+0xa>
 80075ba:	4770      	bx	lr
 80075bc:	f803 1b01 	strb.w	r1, [r3], #1
 80075c0:	e7f9      	b.n	80075b6 <memset+0x4>

080075c2 <_strtol_l.isra.0>:
 80075c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c6:	4680      	mov	r8, r0
 80075c8:	4689      	mov	r9, r1
 80075ca:	4692      	mov	sl, r2
 80075cc:	461e      	mov	r6, r3
 80075ce:	460f      	mov	r7, r1
 80075d0:	463d      	mov	r5, r7
 80075d2:	9808      	ldr	r0, [sp, #32]
 80075d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075d8:	f000 f884 	bl	80076e4 <__locale_ctype_ptr_l>
 80075dc:	4420      	add	r0, r4
 80075de:	7843      	ldrb	r3, [r0, #1]
 80075e0:	f013 0308 	ands.w	r3, r3, #8
 80075e4:	d132      	bne.n	800764c <_strtol_l.isra.0+0x8a>
 80075e6:	2c2d      	cmp	r4, #45	; 0x2d
 80075e8:	d132      	bne.n	8007650 <_strtol_l.isra.0+0x8e>
 80075ea:	787c      	ldrb	r4, [r7, #1]
 80075ec:	1cbd      	adds	r5, r7, #2
 80075ee:	2201      	movs	r2, #1
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	d05d      	beq.n	80076b0 <_strtol_l.isra.0+0xee>
 80075f4:	2e10      	cmp	r6, #16
 80075f6:	d109      	bne.n	800760c <_strtol_l.isra.0+0x4a>
 80075f8:	2c30      	cmp	r4, #48	; 0x30
 80075fa:	d107      	bne.n	800760c <_strtol_l.isra.0+0x4a>
 80075fc:	782b      	ldrb	r3, [r5, #0]
 80075fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007602:	2b58      	cmp	r3, #88	; 0x58
 8007604:	d14f      	bne.n	80076a6 <_strtol_l.isra.0+0xe4>
 8007606:	786c      	ldrb	r4, [r5, #1]
 8007608:	2610      	movs	r6, #16
 800760a:	3502      	adds	r5, #2
 800760c:	2a00      	cmp	r2, #0
 800760e:	bf14      	ite	ne
 8007610:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007614:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007618:	2700      	movs	r7, #0
 800761a:	fbb1 fcf6 	udiv	ip, r1, r6
 800761e:	4638      	mov	r0, r7
 8007620:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007624:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007628:	2b09      	cmp	r3, #9
 800762a:	d817      	bhi.n	800765c <_strtol_l.isra.0+0x9a>
 800762c:	461c      	mov	r4, r3
 800762e:	42a6      	cmp	r6, r4
 8007630:	dd23      	ble.n	800767a <_strtol_l.isra.0+0xb8>
 8007632:	1c7b      	adds	r3, r7, #1
 8007634:	d007      	beq.n	8007646 <_strtol_l.isra.0+0x84>
 8007636:	4584      	cmp	ip, r0
 8007638:	d31c      	bcc.n	8007674 <_strtol_l.isra.0+0xb2>
 800763a:	d101      	bne.n	8007640 <_strtol_l.isra.0+0x7e>
 800763c:	45a6      	cmp	lr, r4
 800763e:	db19      	blt.n	8007674 <_strtol_l.isra.0+0xb2>
 8007640:	fb00 4006 	mla	r0, r0, r6, r4
 8007644:	2701      	movs	r7, #1
 8007646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800764a:	e7eb      	b.n	8007624 <_strtol_l.isra.0+0x62>
 800764c:	462f      	mov	r7, r5
 800764e:	e7bf      	b.n	80075d0 <_strtol_l.isra.0+0xe>
 8007650:	2c2b      	cmp	r4, #43	; 0x2b
 8007652:	bf04      	itt	eq
 8007654:	1cbd      	addeq	r5, r7, #2
 8007656:	787c      	ldrbeq	r4, [r7, #1]
 8007658:	461a      	mov	r2, r3
 800765a:	e7c9      	b.n	80075f0 <_strtol_l.isra.0+0x2e>
 800765c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007660:	2b19      	cmp	r3, #25
 8007662:	d801      	bhi.n	8007668 <_strtol_l.isra.0+0xa6>
 8007664:	3c37      	subs	r4, #55	; 0x37
 8007666:	e7e2      	b.n	800762e <_strtol_l.isra.0+0x6c>
 8007668:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800766c:	2b19      	cmp	r3, #25
 800766e:	d804      	bhi.n	800767a <_strtol_l.isra.0+0xb8>
 8007670:	3c57      	subs	r4, #87	; 0x57
 8007672:	e7dc      	b.n	800762e <_strtol_l.isra.0+0x6c>
 8007674:	f04f 37ff 	mov.w	r7, #4294967295
 8007678:	e7e5      	b.n	8007646 <_strtol_l.isra.0+0x84>
 800767a:	1c7b      	adds	r3, r7, #1
 800767c:	d108      	bne.n	8007690 <_strtol_l.isra.0+0xce>
 800767e:	2322      	movs	r3, #34	; 0x22
 8007680:	f8c8 3000 	str.w	r3, [r8]
 8007684:	4608      	mov	r0, r1
 8007686:	f1ba 0f00 	cmp.w	sl, #0
 800768a:	d107      	bne.n	800769c <_strtol_l.isra.0+0xda>
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	b102      	cbz	r2, 8007694 <_strtol_l.isra.0+0xd2>
 8007692:	4240      	negs	r0, r0
 8007694:	f1ba 0f00 	cmp.w	sl, #0
 8007698:	d0f8      	beq.n	800768c <_strtol_l.isra.0+0xca>
 800769a:	b10f      	cbz	r7, 80076a0 <_strtol_l.isra.0+0xde>
 800769c:	f105 39ff 	add.w	r9, r5, #4294967295
 80076a0:	f8ca 9000 	str.w	r9, [sl]
 80076a4:	e7f2      	b.n	800768c <_strtol_l.isra.0+0xca>
 80076a6:	2430      	movs	r4, #48	; 0x30
 80076a8:	2e00      	cmp	r6, #0
 80076aa:	d1af      	bne.n	800760c <_strtol_l.isra.0+0x4a>
 80076ac:	2608      	movs	r6, #8
 80076ae:	e7ad      	b.n	800760c <_strtol_l.isra.0+0x4a>
 80076b0:	2c30      	cmp	r4, #48	; 0x30
 80076b2:	d0a3      	beq.n	80075fc <_strtol_l.isra.0+0x3a>
 80076b4:	260a      	movs	r6, #10
 80076b6:	e7a9      	b.n	800760c <_strtol_l.isra.0+0x4a>

080076b8 <strtol>:
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <strtol+0x24>)
 80076ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076bc:	681c      	ldr	r4, [r3, #0]
 80076be:	4d08      	ldr	r5, [pc, #32]	; (80076e0 <strtol+0x28>)
 80076c0:	6a23      	ldr	r3, [r4, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bf08      	it	eq
 80076c6:	462b      	moveq	r3, r5
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	460a      	mov	r2, r1
 80076ce:	4601      	mov	r1, r0
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7ff ff76 	bl	80075c2 <_strtol_l.isra.0>
 80076d6:	b003      	add	sp, #12
 80076d8:	bd30      	pop	{r4, r5, pc}
 80076da:	bf00      	nop
 80076dc:	20000010 	.word	0x20000010
 80076e0:	20000074 	.word	0x20000074

080076e4 <__locale_ctype_ptr_l>:
 80076e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80076e8:	4770      	bx	lr

080076ea <__ascii_mbtowc>:
 80076ea:	b082      	sub	sp, #8
 80076ec:	b901      	cbnz	r1, 80076f0 <__ascii_mbtowc+0x6>
 80076ee:	a901      	add	r1, sp, #4
 80076f0:	b142      	cbz	r2, 8007704 <__ascii_mbtowc+0x1a>
 80076f2:	b14b      	cbz	r3, 8007708 <__ascii_mbtowc+0x1e>
 80076f4:	7813      	ldrb	r3, [r2, #0]
 80076f6:	600b      	str	r3, [r1, #0]
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	1c10      	adds	r0, r2, #0
 80076fc:	bf18      	it	ne
 80076fe:	2001      	movne	r0, #1
 8007700:	b002      	add	sp, #8
 8007702:	4770      	bx	lr
 8007704:	4610      	mov	r0, r2
 8007706:	e7fb      	b.n	8007700 <__ascii_mbtowc+0x16>
 8007708:	f06f 0001 	mvn.w	r0, #1
 800770c:	e7f8      	b.n	8007700 <__ascii_mbtowc+0x16>

0800770e <__ascii_wctomb>:
 800770e:	b149      	cbz	r1, 8007724 <__ascii_wctomb+0x16>
 8007710:	2aff      	cmp	r2, #255	; 0xff
 8007712:	bf85      	ittet	hi
 8007714:	238a      	movhi	r3, #138	; 0x8a
 8007716:	6003      	strhi	r3, [r0, #0]
 8007718:	700a      	strbls	r2, [r1, #0]
 800771a:	f04f 30ff 	movhi.w	r0, #4294967295
 800771e:	bf98      	it	ls
 8007720:	2001      	movls	r0, #1
 8007722:	4770      	bx	lr
 8007724:	4608      	mov	r0, r1
 8007726:	4770      	bx	lr

08007728 <_init>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr

08007734 <_fini>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr
