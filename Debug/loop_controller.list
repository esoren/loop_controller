
loop_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c5c  08006c5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000416c  20000010  08006c74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  08006c74  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000385f  00000000  00000000  00038819  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e8  00000000  00000000  0003c078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184fc  00000000  00000000  0003e880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012045  00000000  00000000  00056d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a3f4  00000000  00000000  00068dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001031b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005588  00000000  00000000  00103230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bcc 	.word	0x08006bcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006bcc 	.word	0x08006bcc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC1_Init+0x98>)
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_ADC1_Init+0x9c>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC1_Init+0x98>)
 80004fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_ADC1_Init+0x98>)
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_ADC1_Init+0xa0>)
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_ADC1_Init+0x98>)
 800052e:	2201      	movs	r2, #1
 8000530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_ADC1_Init+0x98>)
 800053c:	2201      	movs	r2, #1
 800053e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_ADC1_Init+0x98>)
 8000542:	f001 f8ef 	bl	8001724 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 fa34 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_ADC1_Init+0x98>)
 8000562:	f001 f923 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800056c:	f000 fa24 	bl	80009b8 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20003fcc 	.word	0x20003fcc
 800057c:	40012000 	.word	0x40012000
 8000580:	0f000001 	.word	0x0f000001

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_ADC_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_ADC_MspInit+0x84>)
 80005f2:	f001 fbdb 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012000 	.word	0x40012000
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000002c 	.word	0x2000002c
 800063c:	20000080 	.word	0x20000080

08000640 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


	xMotorQueue = xQueueCreate(30, sizeof(motorMessage_t));
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	201e      	movs	r0, #30
 800064c:	f004 fbb8 	bl	8004dc0 <xQueueGenericCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_FREERTOS_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_FREERTOS_Init+0x6c>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f004 fa28 	bl	8004ac6 <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_FREERTOS_Init+0x70>)
 800067a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_FREERTOS_Init+0x74>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fa17 	bl	8004ac6 <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_FREERTOS_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 800069e:	bf00      	nop
 80006a0:	3738      	adds	r7, #56	; 0x38
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdb0      	pop	{r4, r5, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000401c 	.word	0x2000401c
 80006ac:	08006bf0 	.word	0x08006bf0
 80006b0:	20004014 	.word	0x20004014
 80006b4:	08006c18 	.word	0x08006c18
 80006b8:	20004018 	.word	0x20004018

080006bc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  uint8_t first_run = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	77fb      	strb	r3, [r7, #31]
  motorMessage_t motorMessage;
  BaseType_t xStatus;
  uint8_t manual_run = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	77bb      	strb	r3, [r7, #30]
  uint32_t manual_step = 25000;
 80006cc:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80006d0:	61bb      	str	r3, [r7, #24]
  {




	if(manual_run) {
 80006d2:	7fbb      	ldrb	r3, [r7, #30]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00e      	beq.n	80006f6 <StartDefaultTask+0x3a>
				motorMessage.motorCommand = MOVE_TO_POSITION;
 80006d8:	2302      	movs	r3, #2
 80006da:	733b      	strb	r3, [r7, #12]
				motorMessage.steps = manual_step;
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	613b      	str	r3, [r7, #16]

				xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <StartDefaultTask+0x84>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	f107 010c 	add.w	r1, r7, #12
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	f004 fbc6 	bl	8004e7c <xQueueGenericSend>
 80006f0:	6178      	str	r0, [r7, #20]

				if (xStatus != pdPASS) {
					//todo: add an assert or wait
				}
				manual_run = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	77bb      	strb	r3, [r7, #30]
	}


	if(first_run) {
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d01c      	beq.n	8000736 <StartDefaultTask+0x7a>
		motorMessage.motorCommand = HOME;
 80006fc:	2301      	movs	r3, #1
 80006fe:	733b      	strb	r3, [r7, #12]
		motorMessage.steps = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <StartDefaultTask+0x84>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	2300      	movs	r3, #0
 800070e:	2200      	movs	r2, #0
 8000710:	f004 fbb4 	bl	8004e7c <xQueueGenericSend>
 8000714:	6178      	str	r0, [r7, #20]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		motorMessage.motorCommand = MOVE_TO_POSITION;
 8000716:	2302      	movs	r3, #2
 8000718:	733b      	strb	r3, [r7, #12]
		motorMessage.steps = 19000;
 800071a:	f644 2338 	movw	r3, #19000	; 0x4a38
 800071e:	613b      	str	r3, [r7, #16]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <StartDefaultTask+0x84>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	f107 010c 	add.w	r1, r7, #12
 8000728:	2300      	movs	r3, #0
 800072a:	2200      	movs	r2, #0
 800072c:	f004 fba6 	bl	8004e7c <xQueueGenericSend>
 8000730:	6178      	str	r0, [r7, #20]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		first_run = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	77fb      	strb	r3, [r7, #31]

  	}

      osDelay(50);
 8000736:	2032      	movs	r0, #50	; 0x32
 8000738:	f004 fa11 	bl	8004b5e <osDelay>
	if(manual_run) {
 800073c:	e7c9      	b.n	80006d2 <StartDefaultTask+0x16>
 800073e:	bf00      	nop
 8000740:	2000401c 	.word	0x2000401c

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <MX_GPIO_Init+0x128>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a42      	ldr	r2, [pc, #264]	; (800086c <MX_GPIO_Init+0x128>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b40      	ldr	r3, [pc, #256]	; (800086c <MX_GPIO_Init+0x128>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b3c      	ldr	r3, [pc, #240]	; (800086c <MX_GPIO_Init+0x128>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a3b      	ldr	r2, [pc, #236]	; (800086c <MX_GPIO_Init+0x128>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <MX_GPIO_Init+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a34      	ldr	r2, [pc, #208]	; (800086c <MX_GPIO_Init+0x128>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <MX_GPIO_Init+0x128>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_GPIO_Init+0x128>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2d      	ldr	r2, [pc, #180]	; (800086c <MX_GPIO_Init+0x128>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_GPIO_Init+0x128>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <MX_GPIO_Init+0x12c>)
 80007d2:	f001 fc6d 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007dc:	4825      	ldr	r0, [pc, #148]	; (8000874 <MX_GPIO_Init+0x130>)
 80007de:	f001 fc67 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_PWR_Pin|MOTOR_CS_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007e8:	4823      	ldr	r0, [pc, #140]	; (8000878 <MX_GPIO_Init+0x134>)
 80007ea:	f001 fc61 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_GPIO_Init+0x138>)
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <MX_GPIO_Init+0x130>)
 8000804:	f001 fad2 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 8000808:	f44f 7304 	mov.w	r3, #528	; 0x210
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000822:	f001 fac3 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_GPIO_Init+0x130>)
 8000840:	f001 fab4 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TMC_PWR_Pin|MOTOR_CS_Pin;
 8000844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_GPIO_Init+0x134>)
 800085e:	f001 faa5 	bl	8001dac <HAL_GPIO_Init>

}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	; 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800
 8000878:	40020400 	.word	0x40020400
 800087c:	10210000 	.word	0x10210000

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 feea 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f818 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f7ff ff5a 	bl	8000744 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000890:	f000 f9a8 	bl	8000be4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000894:	f000 fe46 	bl	8001524 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000898:	f7ff fe22 	bl	80004e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800089c:	f000 fb18 	bl	8000ed0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008a0:	f000 fbba 	bl	8001018 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  enable_motor_driver();
 80008a4:	f000 f88c 	bl	80009c0 <enable_motor_driver>
  tmc_init();
 80008a8:	f000 fdd2 	bl	8001450 <tmc_init>

  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 80008ac:	2003      	movs	r0, #3
 80008ae:	f001 fa48 	bl	8001d42 <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80008b2:	f7ff fec5 	bl	8000640 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008b6:	f004 f8ff 	bl	8004ab8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <main+0x3a>

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	; 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 f975 	bl	8006bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <SystemClock_Config+0xd0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a28      	ldr	r2, [pc, #160]	; (800098c <SystemClock_Config+0xd0>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <SystemClock_Config+0xd0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <SystemClock_Config+0xd4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SystemClock_Config+0xd4>)
 800090a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SystemClock_Config+0xd4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000930:	2310      	movs	r3, #16
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000934:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093a:	2304      	movs	r3, #4
 800093c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800093e:	2307      	movs	r3, #7
 8000940:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fbcc 	bl	80020e4 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000952:	f000 f831 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fe26 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800097e:	f000 f81b 	bl	80009b8 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f000 fe7b 	bl	80016a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40000c00 	.word	0x40000c00

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x4>
	...

080009c0 <enable_motor_driver>:

//extern QueueHandle_t xMotorQueue;

QueueHandle_t xMotorQueue;

void enable_motor_driver(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <enable_motor_driver+0x14>)
 80009ca:	f001 fb71 	bl	80020b0 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020000 	.word	0x40020000

080009d8 <set_motor_dir>:
void disable_motor_driver(void) {
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
}


void set_motor_dir(uint8_t motor_dir) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	if(motor_dir == 0) {
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d106      	bne.n	80009f6 <set_motor_dir+0x1e>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <set_motor_dir+0x34>)
 80009f0:	f001 fb5e 	bl	80020b0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
	}
}
 80009f4:	e005      	b.n	8000a02 <set_motor_dir+0x2a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <set_motor_dir+0x34>)
 80009fe:	f001 fb57 	bl	80020b0 <HAL_GPIO_WritePin>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40020000 	.word	0x40020000

08000a10 <send_motor_steps>:

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim1, step_count);
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <send_motor_steps+0x58>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <send_motor_steps+0x58>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <send_motor_steps+0x58>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <send_motor_steps+0x58>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0201 	orr.w	r2, r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	480b      	ldr	r0, [pc, #44]	; (8000a68 <send_motor_steps+0x58>)
 8000a3c:	f002 fb2a 	bl	8003094 <HAL_TIM_OC_Start_IT>

	__HAL_TIM_SET_AUTORELOAD(&htim2,delay_in_us);
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <send_motor_steps+0x5c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <send_motor_steps+0x5c>)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <send_motor_steps+0x5c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2264      	movs	r2, #100	; 0x64
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a56:	2108      	movs	r1, #8
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <send_motor_steps+0x5c>)
 8000a5a:	f002 fc57 	bl	800330c <HAL_TIM_PWM_Start>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200040b8 	.word	0x200040b8
 8000a6c:	200040f8 	.word	0x200040f8

08000a70 <stop_motor>:


void stop_motor() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000a74:	2108      	movs	r1, #8
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <stop_motor+0x18>)
 8000a78:	f002 fc7a 	bl	8003370 <HAL_TIM_PWM_Stop>
	  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <stop_motor+0x1c>)
 8000a80:	f002 fb80 	bl	8003184 <HAL_TIM_OC_Stop_IT>
	  return;
 8000a84:	bf00      	nop
}
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200040f8 	.word	0x200040f8
 8000a8c:	200040b8 	.word	0x200040b8

08000a90 <StartMotorTask>:

void StartMotorTask(void const *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	motorMessage_t motorMessage;
	BaseType_t xStatus;
	uint8_t homing = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t start_movement = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t moving = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint32_t current_position_in_steps = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t target_position_in_steps = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t next_target_position_in_steps = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t step_delta = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
	for(;;)
	  {


		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000aba:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <StartMotorTask+0x150>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 fc46 	bl	8005350 <uxQueueMessagesWaiting>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d029      	beq.n	8000b1e <StartMotorTask+0x8e>
			xStatus = xQueueReceive(xMotorQueue, &motorMessage, 0);
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <StartMotorTask+0x150>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f107 010c 	add.w	r1, r7, #12
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 fb5f 	bl	8005198 <xQueueReceive>
 8000ada:	61f8      	str	r0, [r7, #28]
			if (xStatus == pdPASS) {
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d11d      	bne.n	8000b1e <StartMotorTask+0x8e>

				switch (motorMessage.motorCommand) {
 8000ae2:	7b3b      	ldrb	r3, [r7, #12]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d009      	beq.n	8000afc <StartMotorTask+0x6c>
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d00d      	beq.n	8000b08 <StartMotorTask+0x78>
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d116      	bne.n	8000b1e <StartMotorTask+0x8e>
					case (HOME):
						target_position_in_steps = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
						homing = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8000afa:	e010      	b.n	8000b1e <StartMotorTask+0x8e>
					case(MOVE_TO_POSITION):
						next_target_position_in_steps = motorMessage.steps;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
						start_movement = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						break;
 8000b06:	e00a      	b.n	8000b1e <StartMotorTask+0x8e>
					case(STOP_MOTOR):
						if(!homing) {
 8000b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d105      	bne.n	8000b1c <StartMotorTask+0x8c>
							moving = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							current_position_in_steps = target_position_in_steps; //todo: check the status of the counter and adjust, if necessary
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
						}
						break;
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
			} else {
				//todo: error handling
			}
		}

		if(homing) { //todo: make this non-blocking
 8000b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d031      	beq.n	8000b8a <StartMotorTask+0xfa>
			set_motor_dir(0);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ff56 	bl	80009d8 <set_motor_dir>
			uint32_t wait = 20000;
 8000b2c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b30:	61bb      	str	r3, [r7, #24]
			uint32_t at_home_position = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
			uint8_t status = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	75fb      	strb	r3, [r7, #23]

			while(homing) {
 8000b3a:	e021      	b.n	8000b80 <StartMotorTask+0xf0>
			  if(!at_home_position) {
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d11e      	bne.n	8000b80 <StartMotorTask+0xf0>
				  send_motor_steps(400,wait);
 8000b42:	69b9      	ldr	r1, [r7, #24]
 8000b44:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b48:	f7ff ff62 	bl	8000a10 <send_motor_steps>
				  HAL_Delay(40); //wait for motor to settle before checking the stall result
 8000b4c:	2028      	movs	r0, #40	; 0x28
 8000b4e:	f000 fdc7 	bl	80016e0 <HAL_Delay>

				  status = tmc_get_status();
 8000b52:	f000 fb97 	bl	8001284 <tmc_get_status>
 8000b56:	4603      	mov	r3, r0
 8000b58:	75fb      	strb	r3, [r7, #23]
				  if((status >> 2) & 0x01) { //if stall is detected
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00b      	beq.n	8000b80 <StartMotorTask+0xf0>
					  at_home_position = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
					  homing = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					  current_position_in_steps = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
					  moving = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  stop_motor();
 8000b7c:	f7ff ff78 	bl	8000a70 <stop_motor>
			while(homing) {
 8000b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1d9      	bne.n	8000b3c <StartMotorTask+0xac>
 8000b88:	e026      	b.n	8000bd8 <StartMotorTask+0x148>
				  }
			  }
			}

		} else {
			if(start_movement && !moving) {
 8000b8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d022      	beq.n	8000bd8 <StartMotorTask+0x148>
 8000b92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11e      	bne.n	8000bd8 <StartMotorTask+0x148>
				target_position_in_steps = next_target_position_in_steps;
 8000b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
				step_delta = target_position_in_steps - current_position_in_steps;
 8000b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	623b      	str	r3, [r7, #32]
				if(step_delta > 0) {
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dd03      	ble.n	8000bb4 <StartMotorTask+0x124>
						set_motor_dir(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff ff13 	bl	80009d8 <set_motor_dir>
 8000bb2:	e002      	b.n	8000bba <StartMotorTask+0x12a>
				} else {
						set_motor_dir(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff0f 	bl	80009d8 <set_motor_dir>
				}

				send_motor_steps(  abs(step_delta)  , 20000);
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bfb8      	it	lt
 8000bc0:	425b      	neglt	r3, r3
 8000bc2:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff22 	bl	8000a10 <send_motor_steps>
				moving = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				start_movement = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36





	    osDelay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f003 ffc0 	bl	8004b5e <osDelay>
		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000bde:	e76c      	b.n	8000aba <StartMotorTask+0x2a>
 8000be0:	2000401c 	.word	0x2000401c

08000be4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <MX_SPI1_Init+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c18:	2238      	movs	r2, #56	; 0x38
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c30:	220a      	movs	r2, #10
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_SPI1_Init+0x64>)
 8000c36:	f001 fee9 	bl	8002a0c <HAL_SPI_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c40:	f7ff feba 	bl	80009b8 <Error_Handler>
  }

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20004020 	.word	0x20004020
 8000c4c:	40013000 	.word	0x40013000

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_SPI_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000caa:	23e0      	movs	r3, #224	; 0xe0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000cc6:	f001 f871 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x54>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_MspInit+0x54>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x54>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_MspInit+0x54>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_MspInit+0x54>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_MspInit+0x54>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f001 f817 	bl	8001d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2032      	movs	r0, #50	; 0x32
 8000d4e:	f001 f803 	bl	8001d58 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000d52:	2032      	movs	r0, #50	; 0x32
 8000d54:	f001 f81c 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d74:	f107 0210 	add.w	r2, r7, #16
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fe12 	bl	80029a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d84:	f001 fde8 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_InitTick+0xa8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_InitTick+0xac>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_InitTick+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_InitTick+0xac>)
 8000da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_InitTick+0xac>)
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_InitTick+0xac>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_InitTick+0xac>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_InitTick+0xac>)
 8000dbe:	f002 f8e5 	bl	8002f8c <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_InitTick+0xac>)
 8000dca:	f002 f90a 	bl	8002fe2 <HAL_TIM_Base_Start_IT>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20004078 	.word	0x20004078
 8000de8:	40000c00 	.word	0x40000c00

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  motorMessage_t motorMessage;
  BaseType_t xStatus;


  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000e26:	2108      	movs	r1, #8
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000e2a:	f002 faa1 	bl	8003370 <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000e30:	f002 faea 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000e34:	2100      	movs	r1, #0
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000e38:	f002 f9a4 	bl	8003184 <HAL_TIM_OC_Stop_IT>


  motorMessage.motorCommand = STOP_MOTOR;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	713b      	strb	r3, [r7, #4]
  motorMessage.steps = 0; //not used
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]

  xStatus = xQueueSendToFrontFromISR(xMotorQueue, &motorMessage, 0); //todo: consider if this should go to front of queue
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	1d39      	adds	r1, r7, #4
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f004 f90f 	bl	8005070 <xQueueGenericSendFromISR>
 8000e52:	60f8      	str	r0, [r7, #12]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200040f8 	.word	0x200040f8
 8000e60:	200040b8 	.word	0x200040b8
 8000e64:	2000401c 	.word	0x2000401c

08000e68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e6e:	f002 facb 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200040b8 	.word	0x200040b8

08000e7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM1_CC_IRQHandler+0x10>)
 8000e82:	f002 fac1 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 // HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200040b8 	.word	0x200040b8

08000e90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM5_IRQHandler+0x10>)
 8000e96:	f002 fab7 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20004078 	.word	0x20004078

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <SystemInit+0x28>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <SystemInit+0x28>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SystemInit+0x28>)
 8000eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b096      	sub	sp, #88	; 0x58
 8000ed4:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ed6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fe55 	bl	8006bba <memset>

  htim1.Instance = TIM1;
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f12:	4a40      	ldr	r2, [pc, #256]	; (8001014 <MX_TIM1_Init+0x144>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f3a:	4835      	ldr	r0, [pc, #212]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f3c:	f002 f826 	bl	8002f8c <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f46:	f7ff fd37 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f4a:	4831      	ldr	r0, [pc, #196]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f4c:	f002 f86d 	bl	800302a <HAL_TIM_OC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f7ff fd2f 	bl	80009b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000f5e:	2370      	movs	r3, #112	; 0x70
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000f62:	2300      	movs	r3, #0
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	653b      	str	r3, [r7, #80]	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f72:	4619      	mov	r1, r3
 8000f74:	4826      	ldr	r0, [pc, #152]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f76:	f002 fd2c 	bl	80039d2 <HAL_TIM_SlaveConfigSynchro>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000f80:	f7ff fd1a 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f90:	4619      	mov	r1, r3
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <MX_TIM1_Init+0x140>)
 8000f94:	f003 f8da 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000f9e:	f7ff fd0b 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4812      	ldr	r0, [pc, #72]	; (8001010 <MX_TIM1_Init+0x140>)
 8000fc8:	f002 fb26 	bl	8003618 <HAL_TIM_OC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000fd2:	f7ff fcf1 	bl	80009b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_TIM1_Init+0x140>)
 8000ffa:	f003 f915 	bl	8004228 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001004:	f7ff fcd8 	bl	80009b8 <Error_Handler>
  }

}
 8001008:	bf00      	nop
 800100a:	3758      	adds	r7, #88	; 0x58
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200040b8 	.word	0x200040b8
 8001014:	40010000 	.word	0x40010000

08001018 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_TIM2_Init+0xe8>)
 800104a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_TIM2_Init+0xe8>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_TIM2_Init+0xe8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_TIM2_Init+0xe8>)
 800105e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_TIM2_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_TIM2_Init+0xe8>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001070:	4823      	ldr	r0, [pc, #140]	; (8001100 <MX_TIM2_Init+0xe8>)
 8001072:	f001 ff8b 	bl	8002f8c <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800107c:	f7ff fc9c 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108a:	4619      	mov	r1, r3
 800108c:	481c      	ldr	r0, [pc, #112]	; (8001100 <MX_TIM2_Init+0xe8>)
 800108e:	f002 fbe9 	bl	8003864 <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001098:	f7ff fc8e 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800109c:	4818      	ldr	r0, [pc, #96]	; (8001100 <MX_TIM2_Init+0xe8>)
 800109e:	f002 f8ff 	bl	80032a0 <HAL_TIM_PWM_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010a8:	f7ff fc86 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4619      	mov	r1, r3
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <MX_TIM2_Init+0xe8>)
 80010bc:	f003 f846 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010c6:	f7ff fc77 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ca:	2360      	movs	r3, #96	; 0x60
 80010cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 80010ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2208      	movs	r2, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM2_Init+0xe8>)
 80010e4:	f002 faf8 	bl	80036d8 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010ee:	f7ff fc63 	bl	80009b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM2_Init+0xe8>)
 80010f4:	f000 f87a 	bl	80011ec <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3738      	adds	r7, #56	; 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200040f8 	.word	0x200040f8

08001104 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <HAL_TIM_Base_MspInit+0xdc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d145      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	481b      	ldr	r0, [pc, #108]	; (80011e8 <HAL_TIM_Base_MspInit+0xe4>)
 800117c:	f000 fe16 	bl	8001dac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2105      	movs	r1, #5
 8001184:	2019      	movs	r0, #25
 8001186:	f000 fde7 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800118a:	2019      	movs	r0, #25
 800118c:	f000 fe00 	bl	8001d90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2105      	movs	r1, #5
 8001194:	201a      	movs	r0, #26
 8001196:	f000 fddf 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800119a:	201a      	movs	r0, #26
 800119c:	f000 fdf8 	bl	8001d90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2105      	movs	r1, #5
 80011a4:	201b      	movs	r0, #27
 80011a6:	f000 fdd7 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011aa:	201b      	movs	r0, #27
 80011ac:	f000 fdf0 	bl	8001d90 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011b0:	e012      	b.n	80011d8 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ba:	d10d      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010000 	.word	0x40010000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d11e      	bne.n	800124c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_TIM_MspPostInit+0x68>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_TIM_MspPostInit+0x68>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_TIM_MspPostInit+0x68>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <HAL_TIM_MspPostInit+0x6c>)
 8001248:	f000 fdb0 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400

0800125c <tmc_enable_stallguard>:
#include "cmsis_os.h"
#include "spi.h"
#include "gpio.h"


uint32_t tmc_enable_stallguard(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	uint32_t reg_data = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
	int8_t sgt = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	70fb      	strb	r3, [r7, #3]


	reg_data = 0x010A0000; //sgt = 64, filt = 1;
 800126a:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
 800126e:	607b      	str	r3, [r7, #4]

	tmc_readwrite_register(TMC_REG_COOLCONF, reg_data, 1);
 8001270:	2201      	movs	r2, #1
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	206d      	movs	r0, #109	; 0x6d
 8001276:	f000 f859 	bl	800132c <tmc_readwrite_register>




	return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <tmc_get_status>:


uint8_t tmc_get_status() {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af02      	add	r7, sp, #8
		uint8_t rx_data[5];
		uint8_t tx_data[5];
		uint32_t payload =0;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
		uint8_t status = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	76fb      	strb	r3, [r7, #27]
		uint8_t send_count = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	76bb      	strb	r3, [r7, #26]

		uint8_t addr = TMC_REG_GSTAT;
 8001296:	2301      	movs	r3, #1
 8001298:	767b      	strb	r3, [r7, #25]
		uint32_t data = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]


		tx_data[0] = addr;
 800129e:	7e7b      	ldrb	r3, [r7, #25]
 80012a0:	713b      	strb	r3, [r7, #4]
		tx_data[1] = (data >> 24) & 0x00ff;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	717b      	strb	r3, [r7, #5]
		tx_data[2] = (data >> 16) & 0x00ff;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	0c1b      	lsrs	r3, r3, #16
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	71bb      	strb	r3, [r7, #6]
		tx_data[3] = (data >> 8)  & 0x00ff;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	71fb      	strb	r3, [r7, #7]
		tx_data[4] = (data)	      & 0x00ff;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	723b      	strb	r3, [r7, #8]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012c0:	bf00      	nop
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <tmc_get_status+0xa0>)
 80012c4:	f001 fda8 	bl	8002e18 <HAL_SPI_GetState>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d1f9      	bne.n	80012c2 <tmc_get_status+0x3e>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	4814      	ldr	r0, [pc, #80]	; (8001328 <tmc_get_status+0xa4>)
 80012d6:	f000 feeb 	bl	80020b0 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012da:	bf00      	nop
 80012dc:	4811      	ldr	r0, [pc, #68]	; (8001324 <tmc_get_status+0xa0>)
 80012de:	f001 fd9b 	bl	8002e18 <HAL_SPI_GetState>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d1f9      	bne.n	80012dc <tmc_get_status+0x58>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80012e8:	f107 020c 	add.w	r2, r7, #12
 80012ec:	1d39      	adds	r1, r7, #4
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2305      	movs	r3, #5
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <tmc_get_status+0xa0>)
 80012f8:	f001 fbec 	bl	8002ad4 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012fc:	bf00      	nop
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <tmc_get_status+0xa0>)
 8001300:	f001 fd8a 	bl	8002e18 <HAL_SPI_GetState>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d1f9      	bne.n	80012fe <tmc_get_status+0x7a>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <tmc_get_status+0xa4>)
 8001312:	f000 fecd 	bl	80020b0 <HAL_GPIO_WritePin>





		status = rx_data[0];
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	76fb      	strb	r3, [r7, #27]

		return status;
 800131a:	7efb      	ldrb	r3, [r7, #27]




}
 800131c:	4618      	mov	r0, r3
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20004020 	.word	0x20004020
 8001328:	40020400 	.word	0x40020400

0800132c <tmc_readwrite_register>:

uint32_t tmc_readwrite_register(uint8_t addr, uint32_t data, uint8_t set_write_flag) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af02      	add	r7, sp, #8
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_data[5];
	uint8_t tx_data[5];
	uint32_t payload =0;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
	uint8_t send_count = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	77fb      	strb	r3, [r7, #31]


	if(set_write_flag) {
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <tmc_readwrite_register+0x2a>
		addr |= 0x80;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001350:	71fb      	strb	r3, [r7, #7]
		send_count = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	77fb      	strb	r3, [r7, #31]

	}

	//send twice according to TMC2130 datasheet
	for (uint8_t i = 0; i < send_count; i++) {
 8001356:	2300      	movs	r3, #0
 8001358:	77bb      	strb	r3, [r7, #30]
 800135a:	e03f      	b.n	80013dc <tmc_readwrite_register+0xb0>

		tx_data[0] = addr;
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	723b      	strb	r3, [r7, #8]
		tx_data[1] = (data >> 24) & 0x00ff;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	0e1b      	lsrs	r3, r3, #24
 8001364:	b2db      	uxtb	r3, r3
 8001366:	727b      	strb	r3, [r7, #9]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	0c1b      	lsrs	r3, r3, #16
 800136c:	b2db      	uxtb	r3, r3
 800136e:	72bb      	strb	r3, [r7, #10]
		tx_data[3] = (data >> 8)  & 0x00ff;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b2db      	uxtb	r3, r3
 8001376:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = (data)	      & 0x00ff;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	733b      	strb	r3, [r7, #12]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800137e:	bf00      	nop
 8001380:	4820      	ldr	r0, [pc, #128]	; (8001404 <tmc_readwrite_register+0xd8>)
 8001382:	f001 fd49 	bl	8002e18 <HAL_SPI_GetState>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1f9      	bne.n	8001380 <tmc_readwrite_register+0x54>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	481d      	ldr	r0, [pc, #116]	; (8001408 <tmc_readwrite_register+0xdc>)
 8001394:	f000 fe8c 	bl	80020b0 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001398:	bf00      	nop
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <tmc_readwrite_register+0xd8>)
 800139c:	f001 fd3c 	bl	8002e18 <HAL_SPI_GetState>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1f9      	bne.n	800139a <tmc_readwrite_register+0x6e>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80013a6:	f107 0210 	add.w	r2, r7, #16
 80013aa:	f107 0108 	add.w	r1, r7, #8
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2305      	movs	r3, #5
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <tmc_readwrite_register+0xd8>)
 80013b8:	f001 fb8c 	bl	8002ad4 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013bc:	bf00      	nop
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <tmc_readwrite_register+0xd8>)
 80013c0:	f001 fd2a 	bl	8002e18 <HAL_SPI_GetState>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d1f9      	bne.n	80013be <tmc_readwrite_register+0x92>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <tmc_readwrite_register+0xdc>)
 80013d2:	f000 fe6d 	bl	80020b0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < send_count; i++) {
 80013d6:	7fbb      	ldrb	r3, [r7, #30]
 80013d8:	3301      	adds	r3, #1
 80013da:	77bb      	strb	r3, [r7, #30]
 80013dc:	7fba      	ldrb	r2, [r7, #30]
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3bb      	bcc.n	800135c <tmc_readwrite_register+0x30>



	}

	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80013e4:	7c7b      	ldrb	r3, [r7, #17]
 80013e6:	061a      	lsls	r2, r3, #24
 80013e8:	7cbb      	ldrb	r3, [r7, #18]
 80013ea:	041b      	lsls	r3, r3, #16
 80013ec:	441a      	add	r2, r3
			+ (rx_data[3] << 8 ) +  rx_data[4];
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	4413      	add	r3, r2
 80013f4:	7d3a      	ldrb	r2, [r7, #20]
 80013f6:	4413      	add	r3, r2
	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80013f8:	61bb      	str	r3, [r7, #24]


	return payload;
 80013fa:	69bb      	ldr	r3, [r7, #24]


}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20004020 	.word	0x20004020
 8001408:	40020400 	.word	0x40020400

0800140c <tmc_set_motor_current>:

/* ihold: 		hold current. 5 bits.  0 = 1/32, 31=32/32
 * irun:  		run current.  5 bits.  0 = 1/32, 31=32/32
 * iholddelay: 	number of clock cycles to power down. 4 bits. Delay is 2^18*iholddelay clocks periods.
 */
void tmc_set_motor_current(uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	460b      	mov	r3, r1
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	4613      	mov	r3, r2
 800141c:	717b      	strb	r3, [r7, #5]
	uint32_t reg_data = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]

	reg_data = (ihold & 0x1F)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
			+  ((irun & 0x1F) << 8)
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001430:	431a      	orrs	r2, r3
			+  ((iholddelay & 0x0F) << 16);
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800143a:	4413      	add	r3, r2
	reg_data = (ihold & 0x1F)
 800143c:	60fb      	str	r3, [r7, #12]

	tmc_readwrite_register(TMC_REG_IHOLD_IRUN, reg_data, 1);
 800143e:	2201      	movs	r2, #1
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	2010      	movs	r0, #16
 8001444:	f7ff ff72 	bl	800132c <tmc_readwrite_register>

	return;
 8001448:	bf00      	nop
}
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <tmc_init>:

/*initializes the TMC2130 driver for StealthChop operation with current appropriate for loop antenna
 *
 */
void tmc_init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af02      	add	r7, sp, #8

	uint8_t rx_data[2] = {0,0};
 8001456:	2300      	movs	r3, #0
 8001458:	713b      	strb	r3, [r7, #4]
 800145a:	2300      	movs	r3, #0
 800145c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[2] = {0,0};
 800145e:	2300      	movs	r3, #0
 8001460:	703b      	strb	r3, [r7, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146c:	4829      	ldr	r0, [pc, #164]	; (8001514 <tmc_init+0xc4>)
 800146e:	f000 fe1f 	bl	80020b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f000 f934 	bl	80016e0 <HAL_Delay>

	//Power cycle the TMC2130
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147e:	4825      	ldr	r0, [pc, #148]	; (8001514 <tmc_init+0xc4>)
 8001480:	f000 fe16 	bl	80020b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	; 0x64
 8001486:	f000 f92b 	bl	80016e0 <HAL_Delay>
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001490:	4820      	ldr	r0, [pc, #128]	; (8001514 <tmc_init+0xc4>)
 8001492:	f000 fe0d 	bl	80020b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001496:	2064      	movs	r0, #100	; 0x64
 8001498:	f000 f922 	bl	80016e0 <HAL_Delay>

	//write 16 bits out of SPI interface (without clearing CS pin) to set sck polarity correct.
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800149c:	bf00      	nop
 800149e:	481e      	ldr	r0, [pc, #120]	; (8001518 <tmc_init+0xc8>)
 80014a0:	f001 fcba 	bl	8002e18 <HAL_SPI_GetState>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1f9      	bne.n	800149e <tmc_init+0x4e>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80014aa:	1d3a      	adds	r2, r7, #4
 80014ac:	4639      	mov	r1, r7
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2302      	movs	r3, #2
 80014b6:	4818      	ldr	r0, [pc, #96]	; (8001518 <tmc_init+0xc8>)
 80014b8:	f001 fb0c 	bl	8002ad4 <HAL_SPI_TransmitReceive>

	//clear the status register by reading it
	tmc_readwrite_register(TMC_REG_GSTAT, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff ff33 	bl	800132c <tmc_readwrite_register>

	//TOFF=4, TBL=2, HSTRT=4. HEND=0
	tmc_readwrite_register(TMC_REG_CHOPCONF, 0x5010044, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	4914      	ldr	r1, [pc, #80]	; (800151c <tmc_init+0xcc>)
 80014ca:	206c      	movs	r0, #108	; 0x6c
 80014cc:	f7ff ff2e 	bl	800132c <tmc_readwrite_register>

	//IHOLD_IRUN: IHOLD=10, IRUN=31 (max. current), IHOLDDELAY=6
	tmc_set_motor_current(3, 10, 10);
 80014d0:	220a      	movs	r2, #10
 80014d2:	210a      	movs	r1, #10
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7ff ff99 	bl	800140c <tmc_set_motor_current>

	//approx 1 second to fully power down the motor after motion stops
	tmc_readwrite_register(TMC_REG_TPOWERDOWN, 0x40, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	2011      	movs	r0, #17
 80014e0:	f7ff ff24 	bl	800132c <tmc_readwrite_register>

	//en_pwm_mode = 1, DIAG1 set to indicate stall, push-pull active high
	tmc_readwrite_register(TMC_REG_GCONF, 0x2104, 1);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f242 1104 	movw	r1, #8452	; 0x2104
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ff1e 	bl	800132c <tmc_readwrite_register>

	//enable stallguard and set sensitvity
	tmc_enable_stallguard();
 80014f0:	f7ff feb4 	bl	800125c <tmc_enable_stallguard>

	//switching velocity = 35000
	tmc_readwrite_register(TMC_REG_TPWMTHRS, 0x1F4, 1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014fa:	2013      	movs	r0, #19
 80014fc:	f7ff ff16 	bl	800132c <tmc_readwrite_register>

	//approx pwm_autoscale = 1, PWM_GRAD = 1, PWM_AMPL=255
	tmc_readwrite_register(TMC_REG_PWM_CONF, 0x401C8, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	4907      	ldr	r1, [pc, #28]	; (8001520 <tmc_init+0xd0>)
 8001504:	2070      	movs	r0, #112	; 0x70
 8001506:	f7ff ff11 	bl	800132c <tmc_readwrite_register>

	return;
 800150a:	bf00      	nop
}
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020400 	.word	0x40020400
 8001518:	20004020 	.word	0x20004020
 800151c:	05010044 	.word	0x05010044
 8001520:	000401c8 	.word	0x000401c8

08001524 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART2_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800155c:	f002 feca 	bl	80042f4 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f7ff fa27 	bl	80009b8 <Error_Handler>
  }

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004138 	.word	0x20004138
 8001574:	40004400 	.word	0x40004400

08001578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_UART_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d2:	230c      	movs	r3, #12
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e2:	2307      	movs	r3, #7
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0x8c>)
 80015ee:	f000 fbdd 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004400 	.word	0x40004400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800160c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800160e:	e003      	b.n	8001618 <LoopCopyDataInit>

08001610 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001612:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001614:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001616:	3104      	adds	r1, #4

08001618 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800161c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800161e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001620:	d3f6      	bcc.n	8001610 <CopyDataInit>
  ldr  r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001624:	e002      	b.n	800162c <LoopFillZerobss>

08001626 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001626:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001628:	f842 3b04 	str.w	r3, [r2], #4

0800162c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001630:	d3f9      	bcc.n	8001626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001632:	f7ff fc37 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f005 fa91 	bl	8006b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff f921 	bl	8000880 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001640:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001644:	08006c64 	.word	0x08006c64
  ldr  r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800164c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001650:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001654:	2000417c 	.word	0x2000417c

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fb5c 	bl	8001d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fb54 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fb26 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20004178 	.word	0x20004178

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20004178 	.word	0x20004178

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_Delay+0x40>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000008 	.word	0x20000008

08001724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e033      	b.n	80017a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe ff1e 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800176a:	f023 0302 	bic.w	r3, r3, #2
 800176e:	f043 0202 	orr.w	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f93a 	bl	80019f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
 8001792:	e001      	b.n	8001798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e105      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x228>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d925      	bls.n	8001824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	3b1e      	subs	r3, #30
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68d9      	ldr	r1, [r3, #12]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4403      	add	r3, r0
 8001816:	3b1e      	subs	r3, #30
 8001818:	409a      	lsls	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e022      	b.n	800186a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	2207      	movs	r2, #7
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6919      	ldr	r1, [r3, #16]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	4603      	mov	r3, r0
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4403      	add	r3, r0
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d824      	bhi.n	80018bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	3b05      	subs	r3, #5
 8001884:	221f      	movs	r2, #31
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b05      	subs	r3, #5
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ba:	e04c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d824      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b23      	subs	r3, #35	; 0x23
 80018d6:	221f      	movs	r2, #31
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b23      	subs	r3, #35	; 0x23
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
 800190c:	e023      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b41      	subs	r3, #65	; 0x41
 8001920:	221f      	movs	r2, #31
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b41      	subs	r3, #65	; 0x41
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_ADC_ConfigChannel+0x234>)
 8001958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_ADC_ConfigChannel+0x238>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d109      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1cc>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d105      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_ADC_ConfigChannel+0x238>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d123      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d003      	beq.n	8001992 <HAL_ADC_ConfigChannel+0x1e6>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b11      	cmp	r3, #17
 8001990:	d11b      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d111      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_ADC_ConfigChannel+0x23c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_ADC_ConfigChannel+0x240>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9a      	lsrs	r2, r3, #18
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	40012000 	.word	0x40012000
 80019e8:	20000000 	.word	0x20000000
 80019ec:	431bde83 	.word	0x431bde83

080019f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f8:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <ADC_Init+0x1f0>)
 80019fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	021a      	lsls	r2, r3, #8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <ADC_Init+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6899      	ldr	r1, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e00f      	b.n	8001aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0202 	bic.w	r2, r2, #2
 8001afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e1b      	ldrb	r3, [r3, #24]
 8001b08:	005a      	lsls	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	3b01      	subs	r3, #1
 8001b48:	035a      	lsls	r2, r3, #13
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	e007      	b.n	8001b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	051a      	lsls	r2, r3, #20
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ba6:	025a      	lsls	r2, r3, #9
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	029a      	lsls	r2, r3, #10
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40012300 	.word	0x40012300
 8001be4:	0f000001 	.word	0x0f000001

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff4c 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6a:	f7ff ff61 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff ffb1 	bl	8001cdc <NVIC_EncodePriority>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff80 	bl	8001c88 <__NVIC_SetPriority>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff54 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e159      	b.n	800207c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8148 	bne.w	8002076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d00b      	beq.n	8001e06 <HAL_GPIO_Init+0x5a>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfa:	2b11      	cmp	r3, #17
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0xfc>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d123      	bne.n	8001ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a2 	beq.w	8002076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b56      	ldr	r3, [pc, #344]	; (8002090 <HAL_GPIO_Init+0x2e4>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a55      	ldr	r2, [pc, #340]	; (8002090 <HAL_GPIO_Init+0x2e4>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_GPIO_Init+0x2e4>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4e:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2ec>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x202>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_GPIO_Init+0x2f0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x1fe>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <HAL_GPIO_Init+0x2f4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a45      	ldr	r2, [pc, #276]	; (80020a4 <HAL_GPIO_Init+0x2f8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x1f6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a44      	ldr	r2, [pc, #272]	; (80020a8 <HAL_GPIO_Init+0x2fc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x1f2>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x204>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc0:	4934      	ldr	r1, [pc, #208]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fce:	4b37      	ldr	r3, [pc, #220]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff2:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201c:	4a23      	ldr	r2, [pc, #140]	; (80020ac <HAL_GPIO_Init+0x300>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_GPIO_Init+0x300>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002046:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_GPIO_Init+0x300>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_GPIO_Init+0x300>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <HAL_GPIO_Init+0x300>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	f67f aea2 	bls.w	8001dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3724      	adds	r7, #36	; 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40023800 	.word	0x40023800
 8002094:	40013800 	.word	0x40013800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e25b      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d075      	beq.n	80021ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002102:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d00c      	beq.n	8002128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	4ba0      	ldr	r3, [pc, #640]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002116:	2b08      	cmp	r3, #8
 8002118:	d112      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211a:	4b9d      	ldr	r3, [pc, #628]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4b99      	ldr	r3, [pc, #612]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d05b      	beq.n	80021ec <HAL_RCC_OscConfig+0x108>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d157      	bne.n	80021ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e236      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x74>
 800214a:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a90      	ldr	r2, [pc, #576]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xb0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a8a      	ldr	r2, [pc, #552]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a87      	ldr	r2, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xb0>
 800217c:	4b84      	ldr	r3, [pc, #528]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a83      	ldr	r2, [pc, #524]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a80      	ldr	r2, [pc, #512]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fa94 	bl	80016c8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fa90 	bl	80016c8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1fb      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xc0>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fa80 	bl	80016c8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff fa7c 	bl	80016c8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1e7      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b6c      	ldr	r3, [pc, #432]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0xe8>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002206:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002212:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x152>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1bb      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4952      	ldr	r1, [pc, #328]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <HAL_RCC_OscConfig+0x2b0>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff fa35 	bl	80016c8 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff fa31 	bl	80016c8 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e19c      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b46      	ldr	r3, [pc, #280]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4940      	ldr	r1, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_OscConfig+0x2b0>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff fa14 	bl	80016c8 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a4:	f7ff fa10 	bl	80016c8 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e17b      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d030      	beq.n	8002330 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x2b4>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff f9f4 	bl	80016c8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff f9f0 	bl	80016c8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e15b      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x200>
 8002302:	e015      	b.n	8002330 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x2b4>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7ff f9dd 	bl	80016c8 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002312:	f7ff f9d9 	bl	80016c8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e144      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a0 	beq.w	800247e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x2b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCC_OscConfig+0x2b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_RCC_OscConfig+0x2b8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7ff f99f 	bl	80016c8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e011      	b.n	80023b2 <HAL_RCC_OscConfig+0x2ce>
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	42470000 	.word	0x42470000
 8002398:	42470e80 	.word	0x42470e80
 800239c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7ff f992 	bl	80016c8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0fd      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x4d4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
 80023c6:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	4a7c      	ldr	r2, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6713      	str	r3, [r2, #112]	; 0x70
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x32a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x312>
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a76      	ldr	r2, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	4b74      	ldr	r3, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a73      	ldr	r2, [pc, #460]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x32a>
 80023f6:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a70      	ldr	r2, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7ff f957 	bl	80016c8 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff f953 	bl	80016c8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0bc      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x33a>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff f941 	bl	80016c8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff f93d 	bl	80016c8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0a6      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8092 	beq.w	80025ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d05c      	beq.n	800254e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d141      	bne.n	8002520 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_RCC_OscConfig+0x4dc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff f911 	bl	80016c8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff f90d 	bl	80016c8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e078      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	019b      	lsls	r3, r3, #6
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	4933      	ldr	r1, [pc, #204]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f2:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_RCC_OscConfig+0x4dc>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff f8e6 	bl	80016c8 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff f8e2 	bl	80016c8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e04d      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x41c>
 800251e:	e045      	b.n	80025ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff f8cf 	bl	80016c8 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff f8cb 	bl	80016c8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e036      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x44a>
 800254c:	e02e      	b.n	80025ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e029      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_RCC_OscConfig+0x4d8>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	429a      	cmp	r2, r3
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d115      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002588:	4293      	cmp	r3, r2
 800258a:	d10d      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40007000 	.word	0x40007000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470060 	.word	0x42470060

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0cc      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d90c      	bls.n	8002600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800263a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d044      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d119      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e067      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4934      	ldr	r1, [pc, #208]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7ff f808 	bl	80016c8 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7ff f804 	bl	80016c8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e04f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20c      	bcs.n	800270c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4601      	mov	r1, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	fa21 f303 	lsr.w	r3, r1, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fae4 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00
 8002780:	40023800 	.word	0x40023800
 8002784:	08006c3c 	.word	0x08006c3c
 8002788:	20000000 	.word	0x20000000
 800278c:	20000004 	.word	0x20000004

08002790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a6:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d007      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x32>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d008      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x38>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80b4 	bne.w	8002924 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027be:	60bb      	str	r3, [r7, #8]
       break;
 80027c0:	e0b3      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027c4:	60bb      	str	r3, [r7, #8]
      break;
 80027c6:	e0b0      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d2:	4b58      	ldr	r3, [pc, #352]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04a      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	4b55      	ldr	r3, [pc, #340]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	f04f 0400 	mov.w	r4, #0
 80027e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	ea03 0501 	and.w	r5, r3, r1
 80027f4:	ea04 0602 	and.w	r6, r4, r2
 80027f8:	4629      	mov	r1, r5
 80027fa:	4632      	mov	r2, r6
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f04f 0400 	mov.w	r4, #0
 8002804:	0154      	lsls	r4, r2, #5
 8002806:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800280a:	014b      	lsls	r3, r1, #5
 800280c:	4619      	mov	r1, r3
 800280e:	4622      	mov	r2, r4
 8002810:	1b49      	subs	r1, r1, r5
 8002812:	eb62 0206 	sbc.w	r2, r2, r6
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	f04f 0400 	mov.w	r4, #0
 800281e:	0194      	lsls	r4, r2, #6
 8002820:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002824:	018b      	lsls	r3, r1, #6
 8002826:	1a5b      	subs	r3, r3, r1
 8002828:	eb64 0402 	sbc.w	r4, r4, r2
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	00e2      	lsls	r2, r4, #3
 8002836:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800283a:	00d9      	lsls	r1, r3, #3
 800283c:	460b      	mov	r3, r1
 800283e:	4614      	mov	r4, r2
 8002840:	195b      	adds	r3, r3, r5
 8002842:	eb44 0406 	adc.w	r4, r4, r6
 8002846:	f04f 0100 	mov.w	r1, #0
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	0262      	lsls	r2, r4, #9
 8002850:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002854:	0259      	lsls	r1, r3, #9
 8002856:	460b      	mov	r3, r1
 8002858:	4614      	mov	r4, r2
 800285a:	4618      	mov	r0, r3
 800285c:	4621      	mov	r1, r4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	461a      	mov	r2, r3
 8002866:	4623      	mov	r3, r4
 8002868:	f7fd fcba 	bl	80001e0 <__aeabi_uldivmod>
 800286c:	4603      	mov	r3, r0
 800286e:	460c      	mov	r4, r1
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e049      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	f04f 0400 	mov.w	r4, #0
 800287e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	ea03 0501 	and.w	r5, r3, r1
 800288a:	ea04 0602 	and.w	r6, r4, r2
 800288e:	4629      	mov	r1, r5
 8002890:	4632      	mov	r2, r6
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	f04f 0400 	mov.w	r4, #0
 800289a:	0154      	lsls	r4, r2, #5
 800289c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028a0:	014b      	lsls	r3, r1, #5
 80028a2:	4619      	mov	r1, r3
 80028a4:	4622      	mov	r2, r4
 80028a6:	1b49      	subs	r1, r1, r5
 80028a8:	eb62 0206 	sbc.w	r2, r2, r6
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	0194      	lsls	r4, r2, #6
 80028b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028ba:	018b      	lsls	r3, r1, #6
 80028bc:	1a5b      	subs	r3, r3, r1
 80028be:	eb64 0402 	sbc.w	r4, r4, r2
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028d0:	00d9      	lsls	r1, r3, #3
 80028d2:	460b      	mov	r3, r1
 80028d4:	4614      	mov	r4, r2
 80028d6:	195b      	adds	r3, r3, r5
 80028d8:	eb44 0406 	adc.w	r4, r4, r6
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	02a2      	lsls	r2, r4, #10
 80028e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028ea:	0299      	lsls	r1, r3, #10
 80028ec:	460b      	mov	r3, r1
 80028ee:	4614      	mov	r4, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	4621      	mov	r1, r4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f04f 0400 	mov.w	r4, #0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4623      	mov	r3, r4
 80028fe:	f7fd fc6f 	bl	80001e0 <__aeabi_uldivmod>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	60bb      	str	r3, [r7, #8]
      break;
 8002922:	e002      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002926:	60bb      	str	r3, [r7, #8]
      break;
 8002928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292a:	68bb      	ldr	r3, [r7, #8]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	00f42400 	.word	0x00f42400
 800293c:	007a1200 	.word	0x007a1200

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_GetHCLKFreq+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800295c:	f7ff fff0 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002960:	4601      	mov	r1, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08006c4c 	.word	0x08006c4c

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002984:	f7ff ffdc 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002988:	4601      	mov	r1, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0b5b      	lsrs	r3, r3, #13
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08006c4c 	.word	0x08006c4c

080029a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	220f      	movs	r2, #15
 80029b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_RCC_GetClockConfig+0x60>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 020f 	and.w	r2, r3, #15
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	601a      	str	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40023c00 	.word	0x40023c00

08002a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e056      	b.n	8002acc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe f909 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	ea42 0103 	orr.w	r1, r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	f003 0104 	and.w	r1, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x26>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e18a      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x33c>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b02:	f7fe fde1 	bl	80016c8 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d00f      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x70>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2a:	d107      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x68>
 8002b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d003      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b42:	e15b      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_SPI_TransmitReceive+0x82>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_SPI_TransmitReceive+0x82>
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b5c:	e14e      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d003      	beq.n	8002b72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	887a      	ldrh	r2, [r7, #2]
 8002b82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	887a      	ldrh	r2, [r7, #2]
 8002b9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d007      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bce:	d178      	bne.n	8002cc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x10a>
 8002bd8:	8b7b      	ldrh	r3, [r7, #26]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d166      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c02:	e053      	b.n	8002cac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d11b      	bne.n	8002c4a <HAL_SPI_TransmitReceive+0x176>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x176>
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d113      	bne.n	8002c4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d119      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x1b8>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d014      	beq.n	8002c8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c8c:	f7fe fd1c 	bl	80016c8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d807      	bhi.n	8002cac <HAL_SPI_TransmitReceive+0x1d8>
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d003      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002caa:	e0a7      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1a6      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x130>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1a1      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x130>
 8002cc0:	e07c      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x1fc>
 8002cca:	8b7b      	ldrh	r3, [r7, #26]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d16b      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf6:	e057      	b.n	8002da8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d11c      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x26c>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d017      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x26c>
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d114      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d119      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x2ae>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d014      	beq.n	8002d82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d82:	f7fe fca1 	bl	80016c8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d803      	bhi.n	8002d9a <HAL_SPI_TransmitReceive+0x2c6>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d102      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x2cc>
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002da6:	e029      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1a2      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x224>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d19d      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f8a1 	bl	8002f08 <SPI_EndRxTxTransaction>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002dd8:	e010      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	e000      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002dfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3730      	adds	r7, #48	; 0x30
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e26:	b2db      	uxtb	r3, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e44:	e04c      	b.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d048      	beq.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fc3b 	bl	80016c8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d902      	bls.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d13d      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7c:	d111      	bne.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e86:	d004      	beq.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d107      	bne.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	d10f      	bne.n	8002ecc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e00f      	b.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d1a3      	bne.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <SPI_EndRxTxTransaction+0x7c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <SPI_EndRxTxTransaction+0x80>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0d5b      	lsrs	r3, r3, #21
 8002f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f32:	d112      	bne.n	8002f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff ff78 	bl	8002e34 <SPI_WaitFlagStateUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e00f      	b.n	8002f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d0f2      	beq.n	8002f5a <SPI_EndRxTxTransaction+0x52>
 8002f74:	e000      	b.n	8002f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f76:	bf00      	nop
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000000 	.word	0x20000000
 8002f88:	165e9f81 	.word	0x165e9f81

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e01d      	b.n	8002fda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe f8a6 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fd6c 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d007      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e01d      	b.n	8003078 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f815 	bl	8003080 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fd1d 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d841      	bhi.n	8003128 <HAL_TIM_OC_Start_IT+0x94>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <HAL_TIM_OC_Start_IT+0x18>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	08003129 	.word	0x08003129
 80030b4:	08003129 	.word	0x08003129
 80030b8:	08003129 	.word	0x08003129
 80030bc:	080030f3 	.word	0x080030f3
 80030c0:	08003129 	.word	0x08003129
 80030c4:	08003129 	.word	0x08003129
 80030c8:	08003129 	.word	0x08003129
 80030cc:	08003105 	.word	0x08003105
 80030d0:	08003129 	.word	0x08003129
 80030d4:	08003129 	.word	0x08003129
 80030d8:	08003129 	.word	0x08003129
 80030dc:	08003117 	.word	0x08003117
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0202 	orr.w	r2, r2, #2
 80030ee:	60da      	str	r2, [r3, #12]
      break;
 80030f0:	e01b      	b.n	800312a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0204 	orr.w	r2, r2, #4
 8003100:	60da      	str	r2, [r3, #12]
      break;
 8003102:	e012      	b.n	800312a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	60da      	str	r2, [r3, #12]
      break;
 8003114:	e009      	b.n	800312a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0210 	orr.w	r2, r2, #16
 8003124:	60da      	str	r2, [r3, #12]
      break;
 8003126:	e000      	b.n	800312a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003128:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ffe4 	bl	8004100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a10      	ldr	r2, [pc, #64]	; (8003180 <HAL_TIM_OC_Start_IT+0xec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d107      	bne.n	8003152 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d007      	beq.n	8003174 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000

08003184 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d841      	bhi.n	8003218 <HAL_TIM_OC_Stop_IT+0x94>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_TIM_OC_Stop_IT+0x18>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	08003219 	.word	0x08003219
 80031a4:	08003219 	.word	0x08003219
 80031a8:	08003219 	.word	0x08003219
 80031ac:	080031e3 	.word	0x080031e3
 80031b0:	08003219 	.word	0x08003219
 80031b4:	08003219 	.word	0x08003219
 80031b8:	08003219 	.word	0x08003219
 80031bc:	080031f5 	.word	0x080031f5
 80031c0:	08003219 	.word	0x08003219
 80031c4:	08003219 	.word	0x08003219
 80031c8:	08003219 	.word	0x08003219
 80031cc:	08003207 	.word	0x08003207
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0202 	bic.w	r2, r2, #2
 80031de:	60da      	str	r2, [r3, #12]
      break;
 80031e0:	e01b      	b.n	800321a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0204 	bic.w	r2, r2, #4
 80031f0:	60da      	str	r2, [r3, #12]
      break;
 80031f2:	e012      	b.n	800321a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0208 	bic.w	r2, r2, #8
 8003202:	60da      	str	r2, [r3, #12]
      break;
 8003204:	e009      	b.n	800321a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0210 	bic.w	r2, r2, #16
 8003214:	60da      	str	r2, [r3, #12]
      break;
 8003216:	e000      	b.n	800321a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003218:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 ff6c 	bl	8004100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_TIM_OC_Stop_IT+0x118>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d117      	bne.n	8003262 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	f241 1311 	movw	r3, #4369	; 0x1111
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <HAL_TIM_OC_Stop_IT+0xde>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a1a      	ldr	r2, [r3, #32]
 8003248:	f240 4344 	movw	r3, #1092	; 0x444
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_TIM_OC_Stop_IT+0xde>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	f241 1311 	movw	r3, #4369	; 0x1111
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <HAL_TIM_OC_Stop_IT+0x10e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	f240 4344 	movw	r3, #1092	; 0x444
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_TIM_OC_Stop_IT+0x10e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40010000 	.word	0x40010000

080032a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01d      	b.n	80032ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f815 	bl	80032f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 fbe2 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 feee 	bl	8004100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_TIM_PWM_Start+0x60>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d107      	bne.n	800333e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d007      	beq.n	8003360 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000

08003370 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 febc 	bl	8004100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_TIM_PWM_Stop+0x94>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d117      	bne.n	80033c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	f241 1311 	movw	r3, #4369	; 0x1111
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_TIM_PWM_Stop+0x52>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	f240 4344 	movw	r3, #1092	; 0x444
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_PWM_Stop+0x52>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x82>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	f240 4344 	movw	r3, #1092	; 0x444
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40010000 	.word	0x40010000

08003408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0202 	mvn.w	r2, #2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fb0d 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 faff 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fb10 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0204 	mvn.w	r2, #4
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fae3 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fad5 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fae6 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0208 	mvn.w	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fab9 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 faab 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fabc 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d122      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b10      	cmp	r3, #16
 8003526:	d11b      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa8f 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa81 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fa92 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0201 	mvn.w	r2, #1
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fa04 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fe94 	bl	80042e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa57 	bl	8003a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0220 	mvn.w	r2, #32
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fe5e 	bl	80042cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_TIM_OC_ConfigChannel+0x1a>
 800362e:	2302      	movs	r3, #2
 8003630:	e04e      	b.n	80036d0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b0c      	cmp	r3, #12
 8003646:	d839      	bhi.n	80036bc <HAL_TIM_OC_ConfigChannel+0xa4>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <HAL_TIM_OC_ConfigChannel+0x38>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003685 	.word	0x08003685
 8003654:	080036bd 	.word	0x080036bd
 8003658:	080036bd 	.word	0x080036bd
 800365c:	080036bd 	.word	0x080036bd
 8003660:	08003693 	.word	0x08003693
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036bd 	.word	0x080036bd
 800366c:	080036bd 	.word	0x080036bd
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036bd 	.word	0x080036bd
 8003678:	080036bd 	.word	0x080036bd
 800367c:	080036bd 	.word	0x080036bd
 8003680:	080036af 	.word	0x080036af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa8c 	bl	8003ba8 <TIM_OC1_SetConfig>
      break;
 8003690:	e015      	b.n	80036be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 faeb 	bl	8003c74 <TIM_OC2_SetConfig>
      break;
 800369e:	e00e      	b.n	80036be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fb50 	bl	8003d4c <TIM_OC3_SetConfig>
      break;
 80036ac:	e007      	b.n	80036be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fbb3 	bl	8003e20 <TIM_OC4_SetConfig>
      break;
 80036ba:	e000      	b.n	80036be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80036bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0b4      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x184>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b0c      	cmp	r3, #12
 8003706:	f200 809f 	bhi.w	8003848 <HAL_TIM_PWM_ConfigChannel+0x170>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003745 	.word	0x08003745
 8003714:	08003849 	.word	0x08003849
 8003718:	08003849 	.word	0x08003849
 800371c:	08003849 	.word	0x08003849
 8003720:	08003785 	.word	0x08003785
 8003724:	08003849 	.word	0x08003849
 8003728:	08003849 	.word	0x08003849
 800372c:	08003849 	.word	0x08003849
 8003730:	080037c7 	.word	0x080037c7
 8003734:	08003849 	.word	0x08003849
 8003738:	08003849 	.word	0x08003849
 800373c:	08003849 	.word	0x08003849
 8003740:	08003807 	.word	0x08003807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fa2c 	bl	8003ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0208 	orr.w	r2, r2, #8
 800375e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6999      	ldr	r1, [r3, #24]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	619a      	str	r2, [r3, #24]
      break;
 8003782:	e062      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fa72 	bl	8003c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6999      	ldr	r1, [r3, #24]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	619a      	str	r2, [r3, #24]
      break;
 80037c4:	e041      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fabd 	bl	8003d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0208 	orr.w	r2, r2, #8
 80037e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0204 	bic.w	r2, r2, #4
 80037f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69d9      	ldr	r1, [r3, #28]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	61da      	str	r2, [r3, #28]
      break;
 8003804:	e021      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fb07 	bl	8003e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	61da      	str	r2, [r3, #28]
      break;
 8003846:	e000      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003848:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIM_ConfigClockSource+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e0a6      	b.n	80039ca <HAL_TIM_ConfigClockSource+0x166>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800389a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d067      	beq.n	8003984 <HAL_TIM_ConfigClockSource+0x120>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d80b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x6c>
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d073      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d802      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x62>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d06f      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038c4:	e078      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d06c      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
 80038ca:	2b30      	cmp	r3, #48	; 0x30
 80038cc:	d06a      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038ce:	e073      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d00d      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0x8c>
 80038d4:	2b70      	cmp	r3, #112	; 0x70
 80038d6:	d804      	bhi.n	80038e2 <HAL_TIM_ConfigClockSource+0x7e>
 80038d8:	2b50      	cmp	r3, #80	; 0x50
 80038da:	d033      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xe0>
 80038dc:	2b60      	cmp	r3, #96	; 0x60
 80038de:	d041      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038e0:	e06a      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d066      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x152>
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d017      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038ee:	e063      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f000 fbde 	bl	80040c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003912:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e04c      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 fbc7 	bl	80040c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003940:	609a      	str	r2, [r3, #8]
      break;
 8003942:	e039      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	461a      	mov	r2, r3
 8003952:	f000 fb3b 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2150      	movs	r1, #80	; 0x50
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fb94 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003962:	e029      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	461a      	mov	r2, r3
 8003972:	f000 fb5a 	bl	800402a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2160      	movs	r1, #96	; 0x60
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fb84 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003982:	e019      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	461a      	mov	r2, r3
 8003992:	f000 fb1b 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fb74 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 80039a2:	e009      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fb6b 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80039b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_SlaveConfigSynchro+0x18>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e031      	b.n	8003a4e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa5f 	bl	8003ec0 <TIM_SlaveTimer_SetConfig>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e018      	b.n	8003a4e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a3a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a31      	ldr	r2, [pc, #196]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a30      	ldr	r2, [pc, #192]	; (8003b94 <TIM_Base_SetConfig+0xec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <TIM_Base_SetConfig+0xf0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01b      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d017      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <TIM_Base_SetConfig+0xec>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a20      	ldr	r2, [pc, #128]	; (8003b98 <TIM_Base_SetConfig+0xf0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <TIM_Base_SetConfig+0xf4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <TIM_Base_SetConfig+0xf8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800

08003ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 0302 	bic.w	r3, r3, #2
 8003bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <TIM_OC1_SetConfig+0xc8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10c      	bne.n	8003c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0308 	bic.w	r3, r3, #8
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <TIM_OC1_SetConfig+0xc8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d111      	bne.n	8003c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	621a      	str	r2, [r3, #32]
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40010000 	.word	0x40010000

08003c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0210 	bic.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <TIM_OC2_SetConfig+0xd4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d10d      	bne.n	8003cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <TIM_OC2_SetConfig+0xd4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d113      	bne.n	8003d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000

08003d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <TIM_OC3_SetConfig+0xd0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10d      	bne.n	8003dc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <TIM_OC3_SetConfig+0xd0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d113      	bne.n	8003df6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40010000 	.word	0x40010000

08003e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <TIM_OC4_SetConfig+0x9c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d109      	bne.n	8003e94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000

08003ec0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 0307 	bic.w	r3, r3, #7
 8003eea:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b30      	cmp	r3, #48	; 0x30
 8003f04:	d05c      	beq.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x100>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d806      	bhi.n	8003f18 <TIM_SlaveTimer_SetConfig+0x58>
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d058      	beq.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x100>
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d056      	beq.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x100>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d054      	beq.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003f16:	e054      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003f18:	2b50      	cmp	r3, #80	; 0x50
 8003f1a:	d03d      	beq.n	8003f98 <TIM_SlaveTimer_SetConfig+0xd8>
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d802      	bhi.n	8003f26 <TIM_SlaveTimer_SetConfig+0x66>
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d010      	beq.n	8003f46 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003f24:	e04d      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003f26:	2b60      	cmp	r3, #96	; 0x60
 8003f28:	d040      	beq.n	8003fac <TIM_SlaveTimer_SetConfig+0xec>
 8003f2a:	2b70      	cmp	r3, #112	; 0x70
 8003f2c:	d000      	beq.n	8003f30 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003f2e:	e048      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68d9      	ldr	r1, [r3, #12]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f000 f8be 	bl	80040c0 <TIM_ETR_SetConfig>
      break;
 8003f44:	e03d      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d101      	bne.n	8003f52 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e038      	b.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f78:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	621a      	str	r2, [r3, #32]
      break;
 8003f96:	e014      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f000 f811 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      break;
 8003faa:	e00a      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6899      	ldr	r1, [r3, #8]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f000 f836 	bl	800402a <TIM_TI2_ConfigInputStage>
      break;
 8003fbe:	e000      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8003fc0:	bf00      	nop
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0201 	bic.w	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 030a 	bic.w	r3, r3, #10
 8004008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402a:	b480      	push	{r7}
 800402c:	b087      	sub	sp, #28
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f043 0307 	orr.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	609a      	str	r2, [r3, #8]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2201      	movs	r2, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1a      	ldr	r2, [r3, #32]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e050      	b.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d013      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10c      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40014000 	.word	0x40014000

08004228 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004240:	2302      	movs	r3, #2
 8004242:	e03d      	b.n	80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e03f      	b.n	8004386 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fd f92c 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	; 0x24
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f829 	bl	8004390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800434c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800435c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800436c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043d2:	f023 030c 	bic.w	r3, r3, #12
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	430b      	orrs	r3, r1
 80043de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fe:	f040 818b 	bne.w	8004718 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4ac1      	ldr	r2, [pc, #772]	; (800470c <UART_SetConfig+0x37c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d005      	beq.n	8004418 <UART_SetConfig+0x88>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4abf      	ldr	r2, [pc, #764]	; (8004710 <UART_SetConfig+0x380>)
 8004412:	4293      	cmp	r3, r2
 8004414:	f040 80bd 	bne.w	8004592 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe fab2 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 800441c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	461d      	mov	r5, r3
 8004422:	f04f 0600 	mov.w	r6, #0
 8004426:	46a8      	mov	r8, r5
 8004428:	46b1      	mov	r9, r6
 800442a:	eb18 0308 	adds.w	r3, r8, r8
 800442e:	eb49 0409 	adc.w	r4, r9, r9
 8004432:	4698      	mov	r8, r3
 8004434:	46a1      	mov	r9, r4
 8004436:	eb18 0805 	adds.w	r8, r8, r5
 800443a:	eb49 0906 	adc.w	r9, r9, r6
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800444a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800444e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004452:	4688      	mov	r8, r1
 8004454:	4691      	mov	r9, r2
 8004456:	eb18 0005 	adds.w	r0, r8, r5
 800445a:	eb49 0106 	adc.w	r1, r9, r6
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	461d      	mov	r5, r3
 8004464:	f04f 0600 	mov.w	r6, #0
 8004468:	196b      	adds	r3, r5, r5
 800446a:	eb46 0406 	adc.w	r4, r6, r6
 800446e:	461a      	mov	r2, r3
 8004470:	4623      	mov	r3, r4
 8004472:	f7fb feb5 	bl	80001e0 <__aeabi_uldivmod>
 8004476:	4603      	mov	r3, r0
 8004478:	460c      	mov	r4, r1
 800447a:	461a      	mov	r2, r3
 800447c:	4ba5      	ldr	r3, [pc, #660]	; (8004714 <UART_SetConfig+0x384>)
 800447e:	fba3 2302 	umull	r2, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	461d      	mov	r5, r3
 800448c:	f04f 0600 	mov.w	r6, #0
 8004490:	46a9      	mov	r9, r5
 8004492:	46b2      	mov	sl, r6
 8004494:	eb19 0309 	adds.w	r3, r9, r9
 8004498:	eb4a 040a 	adc.w	r4, sl, sl
 800449c:	4699      	mov	r9, r3
 800449e:	46a2      	mov	sl, r4
 80044a0:	eb19 0905 	adds.w	r9, r9, r5
 80044a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044bc:	4689      	mov	r9, r1
 80044be:	4692      	mov	sl, r2
 80044c0:	eb19 0005 	adds.w	r0, r9, r5
 80044c4:	eb4a 0106 	adc.w	r1, sl, r6
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	461d      	mov	r5, r3
 80044ce:	f04f 0600 	mov.w	r6, #0
 80044d2:	196b      	adds	r3, r5, r5
 80044d4:	eb46 0406 	adc.w	r4, r6, r6
 80044d8:	461a      	mov	r2, r3
 80044da:	4623      	mov	r3, r4
 80044dc:	f7fb fe80 	bl	80001e0 <__aeabi_uldivmod>
 80044e0:	4603      	mov	r3, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	461a      	mov	r2, r3
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <UART_SetConfig+0x384>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a86      	ldr	r2, [pc, #536]	; (8004714 <UART_SetConfig+0x384>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004508:	4498      	add	r8, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	461d      	mov	r5, r3
 800450e:	f04f 0600 	mov.w	r6, #0
 8004512:	46a9      	mov	r9, r5
 8004514:	46b2      	mov	sl, r6
 8004516:	eb19 0309 	adds.w	r3, r9, r9
 800451a:	eb4a 040a 	adc.w	r4, sl, sl
 800451e:	4699      	mov	r9, r3
 8004520:	46a2      	mov	sl, r4
 8004522:	eb19 0905 	adds.w	r9, r9, r5
 8004526:	eb4a 0a06 	adc.w	sl, sl, r6
 800452a:	f04f 0100 	mov.w	r1, #0
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004536:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800453a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800453e:	4689      	mov	r9, r1
 8004540:	4692      	mov	sl, r2
 8004542:	eb19 0005 	adds.w	r0, r9, r5
 8004546:	eb4a 0106 	adc.w	r1, sl, r6
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	461d      	mov	r5, r3
 8004550:	f04f 0600 	mov.w	r6, #0
 8004554:	196b      	adds	r3, r5, r5
 8004556:	eb46 0406 	adc.w	r4, r6, r6
 800455a:	461a      	mov	r2, r3
 800455c:	4623      	mov	r3, r4
 800455e:	f7fb fe3f 	bl	80001e0 <__aeabi_uldivmod>
 8004562:	4603      	mov	r3, r0
 8004564:	460c      	mov	r4, r1
 8004566:	461a      	mov	r2, r3
 8004568:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <UART_SetConfig+0x384>)
 800456a:	fba3 1302 	umull	r1, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2164      	movs	r1, #100	; 0x64
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a65      	ldr	r2, [pc, #404]	; (8004714 <UART_SetConfig+0x384>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 0207 	and.w	r2, r3, #7
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4442      	add	r2, r8
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	e26f      	b.n	8004a72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004592:	f7fe f9e1 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8004596:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	461d      	mov	r5, r3
 800459c:	f04f 0600 	mov.w	r6, #0
 80045a0:	46a8      	mov	r8, r5
 80045a2:	46b1      	mov	r9, r6
 80045a4:	eb18 0308 	adds.w	r3, r8, r8
 80045a8:	eb49 0409 	adc.w	r4, r9, r9
 80045ac:	4698      	mov	r8, r3
 80045ae:	46a1      	mov	r9, r4
 80045b0:	eb18 0805 	adds.w	r8, r8, r5
 80045b4:	eb49 0906 	adc.w	r9, r9, r6
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045cc:	4688      	mov	r8, r1
 80045ce:	4691      	mov	r9, r2
 80045d0:	eb18 0005 	adds.w	r0, r8, r5
 80045d4:	eb49 0106 	adc.w	r1, r9, r6
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	461d      	mov	r5, r3
 80045de:	f04f 0600 	mov.w	r6, #0
 80045e2:	196b      	adds	r3, r5, r5
 80045e4:	eb46 0406 	adc.w	r4, r6, r6
 80045e8:	461a      	mov	r2, r3
 80045ea:	4623      	mov	r3, r4
 80045ec:	f7fb fdf8 	bl	80001e0 <__aeabi_uldivmod>
 80045f0:	4603      	mov	r3, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <UART_SetConfig+0x384>)
 80045f8:	fba3 2302 	umull	r2, r3, r3, r2
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	461d      	mov	r5, r3
 8004606:	f04f 0600 	mov.w	r6, #0
 800460a:	46a9      	mov	r9, r5
 800460c:	46b2      	mov	sl, r6
 800460e:	eb19 0309 	adds.w	r3, r9, r9
 8004612:	eb4a 040a 	adc.w	r4, sl, sl
 8004616:	4699      	mov	r9, r3
 8004618:	46a2      	mov	sl, r4
 800461a:	eb19 0905 	adds.w	r9, r9, r5
 800461e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004632:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004636:	4689      	mov	r9, r1
 8004638:	4692      	mov	sl, r2
 800463a:	eb19 0005 	adds.w	r0, r9, r5
 800463e:	eb4a 0106 	adc.w	r1, sl, r6
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	461d      	mov	r5, r3
 8004648:	f04f 0600 	mov.w	r6, #0
 800464c:	196b      	adds	r3, r5, r5
 800464e:	eb46 0406 	adc.w	r4, r6, r6
 8004652:	461a      	mov	r2, r3
 8004654:	4623      	mov	r3, r4
 8004656:	f7fb fdc3 	bl	80001e0 <__aeabi_uldivmod>
 800465a:	4603      	mov	r3, r0
 800465c:	460c      	mov	r4, r1
 800465e:	461a      	mov	r2, r3
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <UART_SetConfig+0x384>)
 8004662:	fba3 1302 	umull	r1, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2164      	movs	r1, #100	; 0x64
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <UART_SetConfig+0x384>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004682:	4498      	add	r8, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	461d      	mov	r5, r3
 8004688:	f04f 0600 	mov.w	r6, #0
 800468c:	46a9      	mov	r9, r5
 800468e:	46b2      	mov	sl, r6
 8004690:	eb19 0309 	adds.w	r3, r9, r9
 8004694:	eb4a 040a 	adc.w	r4, sl, sl
 8004698:	4699      	mov	r9, r3
 800469a:	46a2      	mov	sl, r4
 800469c:	eb19 0905 	adds.w	r9, r9, r5
 80046a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046b8:	4689      	mov	r9, r1
 80046ba:	4692      	mov	sl, r2
 80046bc:	eb19 0005 	adds.w	r0, r9, r5
 80046c0:	eb4a 0106 	adc.w	r1, sl, r6
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	461d      	mov	r5, r3
 80046ca:	f04f 0600 	mov.w	r6, #0
 80046ce:	196b      	adds	r3, r5, r5
 80046d0:	eb46 0406 	adc.w	r4, r6, r6
 80046d4:	461a      	mov	r2, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	f7fb fd82 	bl	80001e0 <__aeabi_uldivmod>
 80046dc:	4603      	mov	r3, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <UART_SetConfig+0x384>)
 80046e4:	fba3 1302 	umull	r1, r3, r3, r2
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	3332      	adds	r3, #50	; 0x32
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <UART_SetConfig+0x384>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 0207 	and.w	r2, r3, #7
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4442      	add	r2, r8
 8004708:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800470a:	e1b2      	b.n	8004a72 <UART_SetConfig+0x6e2>
 800470c:	40011000 	.word	0x40011000
 8004710:	40011400 	.word	0x40011400
 8004714:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4ad7      	ldr	r2, [pc, #860]	; (8004a7c <UART_SetConfig+0x6ec>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d005      	beq.n	800472e <UART_SetConfig+0x39e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4ad6      	ldr	r2, [pc, #856]	; (8004a80 <UART_SetConfig+0x6f0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	f040 80d1 	bne.w	80048d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800472e:	f7fe f927 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8004732:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	469a      	mov	sl, r3
 8004738:	f04f 0b00 	mov.w	fp, #0
 800473c:	46d0      	mov	r8, sl
 800473e:	46d9      	mov	r9, fp
 8004740:	eb18 0308 	adds.w	r3, r8, r8
 8004744:	eb49 0409 	adc.w	r4, r9, r9
 8004748:	4698      	mov	r8, r3
 800474a:	46a1      	mov	r9, r4
 800474c:	eb18 080a 	adds.w	r8, r8, sl
 8004750:	eb49 090b 	adc.w	r9, r9, fp
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004760:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004764:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004768:	4688      	mov	r8, r1
 800476a:	4691      	mov	r9, r2
 800476c:	eb1a 0508 	adds.w	r5, sl, r8
 8004770:	eb4b 0609 	adc.w	r6, fp, r9
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4619      	mov	r1, r3
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 0400 	mov.w	r4, #0
 8004786:	0094      	lsls	r4, r2, #2
 8004788:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800478c:	008b      	lsls	r3, r1, #2
 800478e:	461a      	mov	r2, r3
 8004790:	4623      	mov	r3, r4
 8004792:	4628      	mov	r0, r5
 8004794:	4631      	mov	r1, r6
 8004796:	f7fb fd23 	bl	80001e0 <__aeabi_uldivmod>
 800479a:	4603      	mov	r3, r0
 800479c:	460c      	mov	r4, r1
 800479e:	461a      	mov	r2, r3
 80047a0:	4bb8      	ldr	r3, [pc, #736]	; (8004a84 <UART_SetConfig+0x6f4>)
 80047a2:	fba3 2302 	umull	r2, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	469b      	mov	fp, r3
 80047b0:	f04f 0c00 	mov.w	ip, #0
 80047b4:	46d9      	mov	r9, fp
 80047b6:	46e2      	mov	sl, ip
 80047b8:	eb19 0309 	adds.w	r3, r9, r9
 80047bc:	eb4a 040a 	adc.w	r4, sl, sl
 80047c0:	4699      	mov	r9, r3
 80047c2:	46a2      	mov	sl, r4
 80047c4:	eb19 090b 	adds.w	r9, r9, fp
 80047c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047e0:	4689      	mov	r9, r1
 80047e2:	4692      	mov	sl, r2
 80047e4:	eb1b 0509 	adds.w	r5, fp, r9
 80047e8:	eb4c 060a 	adc.w	r6, ip, sl
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4619      	mov	r1, r3
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f04f 0400 	mov.w	r4, #0
 80047fe:	0094      	lsls	r4, r2, #2
 8004800:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004804:	008b      	lsls	r3, r1, #2
 8004806:	461a      	mov	r2, r3
 8004808:	4623      	mov	r3, r4
 800480a:	4628      	mov	r0, r5
 800480c:	4631      	mov	r1, r6
 800480e:	f7fb fce7 	bl	80001e0 <__aeabi_uldivmod>
 8004812:	4603      	mov	r3, r0
 8004814:	460c      	mov	r4, r1
 8004816:	461a      	mov	r2, r3
 8004818:	4b9a      	ldr	r3, [pc, #616]	; (8004a84 <UART_SetConfig+0x6f4>)
 800481a:	fba3 1302 	umull	r1, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	2164      	movs	r1, #100	; 0x64
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	3332      	adds	r3, #50	; 0x32
 800482c:	4a95      	ldr	r2, [pc, #596]	; (8004a84 <UART_SetConfig+0x6f4>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004838:	4498      	add	r8, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	469b      	mov	fp, r3
 800483e:	f04f 0c00 	mov.w	ip, #0
 8004842:	46d9      	mov	r9, fp
 8004844:	46e2      	mov	sl, ip
 8004846:	eb19 0309 	adds.w	r3, r9, r9
 800484a:	eb4a 040a 	adc.w	r4, sl, sl
 800484e:	4699      	mov	r9, r3
 8004850:	46a2      	mov	sl, r4
 8004852:	eb19 090b 	adds.w	r9, r9, fp
 8004856:	eb4a 0a0c 	adc.w	sl, sl, ip
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004866:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800486a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800486e:	4689      	mov	r9, r1
 8004870:	4692      	mov	sl, r2
 8004872:	eb1b 0509 	adds.w	r5, fp, r9
 8004876:	eb4c 060a 	adc.w	r6, ip, sl
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4619      	mov	r1, r3
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	0094      	lsls	r4, r2, #2
 800488e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004892:	008b      	lsls	r3, r1, #2
 8004894:	461a      	mov	r2, r3
 8004896:	4623      	mov	r3, r4
 8004898:	4628      	mov	r0, r5
 800489a:	4631      	mov	r1, r6
 800489c:	f7fb fca0 	bl	80001e0 <__aeabi_uldivmod>
 80048a0:	4603      	mov	r3, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b77      	ldr	r3, [pc, #476]	; (8004a84 <UART_SetConfig+0x6f4>)
 80048a8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	2164      	movs	r1, #100	; 0x64
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	3332      	adds	r3, #50	; 0x32
 80048ba:	4a72      	ldr	r2, [pc, #456]	; (8004a84 <UART_SetConfig+0x6f4>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	f003 020f 	and.w	r2, r3, #15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4442      	add	r2, r8
 80048cc:	609a      	str	r2, [r3, #8]
 80048ce:	e0d0      	b.n	8004a72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe f842 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 80048d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	469a      	mov	sl, r3
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	46d0      	mov	r8, sl
 80048e0:	46d9      	mov	r9, fp
 80048e2:	eb18 0308 	adds.w	r3, r8, r8
 80048e6:	eb49 0409 	adc.w	r4, r9, r9
 80048ea:	4698      	mov	r8, r3
 80048ec:	46a1      	mov	r9, r4
 80048ee:	eb18 080a 	adds.w	r8, r8, sl
 80048f2:	eb49 090b 	adc.w	r9, r9, fp
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004902:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004906:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800490a:	4688      	mov	r8, r1
 800490c:	4691      	mov	r9, r2
 800490e:	eb1a 0508 	adds.w	r5, sl, r8
 8004912:	eb4b 0609 	adc.w	r6, fp, r9
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4619      	mov	r1, r3
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	0094      	lsls	r4, r2, #2
 800492a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800492e:	008b      	lsls	r3, r1, #2
 8004930:	461a      	mov	r2, r3
 8004932:	4623      	mov	r3, r4
 8004934:	4628      	mov	r0, r5
 8004936:	4631      	mov	r1, r6
 8004938:	f7fb fc52 	bl	80001e0 <__aeabi_uldivmod>
 800493c:	4603      	mov	r3, r0
 800493e:	460c      	mov	r4, r1
 8004940:	461a      	mov	r2, r3
 8004942:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <UART_SetConfig+0x6f4>)
 8004944:	fba3 2302 	umull	r2, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	469b      	mov	fp, r3
 8004952:	f04f 0c00 	mov.w	ip, #0
 8004956:	46d9      	mov	r9, fp
 8004958:	46e2      	mov	sl, ip
 800495a:	eb19 0309 	adds.w	r3, r9, r9
 800495e:	eb4a 040a 	adc.w	r4, sl, sl
 8004962:	4699      	mov	r9, r3
 8004964:	46a2      	mov	sl, r4
 8004966:	eb19 090b 	adds.w	r9, r9, fp
 800496a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800497a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800497e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004982:	4689      	mov	r9, r1
 8004984:	4692      	mov	sl, r2
 8004986:	eb1b 0509 	adds.w	r5, fp, r9
 800498a:	eb4c 060a 	adc.w	r6, ip, sl
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4619      	mov	r1, r3
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	0094      	lsls	r4, r2, #2
 80049a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049a6:	008b      	lsls	r3, r1, #2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4623      	mov	r3, r4
 80049ac:	4628      	mov	r0, r5
 80049ae:	4631      	mov	r1, r6
 80049b0:	f7fb fc16 	bl	80001e0 <__aeabi_uldivmod>
 80049b4:	4603      	mov	r3, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	461a      	mov	r2, r3
 80049ba:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <UART_SetConfig+0x6f4>)
 80049bc:	fba3 1302 	umull	r1, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	2164      	movs	r1, #100	; 0x64
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	3332      	adds	r3, #50	; 0x32
 80049ce:	4a2d      	ldr	r2, [pc, #180]	; (8004a84 <UART_SetConfig+0x6f4>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049da:	4498      	add	r8, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	469b      	mov	fp, r3
 80049e0:	f04f 0c00 	mov.w	ip, #0
 80049e4:	46d9      	mov	r9, fp
 80049e6:	46e2      	mov	sl, ip
 80049e8:	eb19 0309 	adds.w	r3, r9, r9
 80049ec:	eb4a 040a 	adc.w	r4, sl, sl
 80049f0:	4699      	mov	r9, r3
 80049f2:	46a2      	mov	sl, r4
 80049f4:	eb19 090b 	adds.w	r9, r9, fp
 80049f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a10:	4689      	mov	r9, r1
 8004a12:	4692      	mov	sl, r2
 8004a14:	eb1b 0509 	adds.w	r5, fp, r9
 8004a18:	eb4c 060a 	adc.w	r6, ip, sl
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4619      	mov	r1, r3
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	f04f 0400 	mov.w	r4, #0
 8004a2e:	0094      	lsls	r4, r2, #2
 8004a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a34:	008b      	lsls	r3, r1, #2
 8004a36:	461a      	mov	r2, r3
 8004a38:	4623      	mov	r3, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	f7fb fbcf 	bl	80001e0 <__aeabi_uldivmod>
 8004a42:	4603      	mov	r3, r0
 8004a44:	460c      	mov	r4, r1
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <UART_SetConfig+0x6f4>)
 8004a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2164      	movs	r1, #100	; 0x64
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	3332      	adds	r3, #50	; 0x32
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <UART_SetConfig+0x6f4>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4442      	add	r2, r8
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	e7ff      	b.n	8004a72 <UART_SetConfig+0x6e2>
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	40011000 	.word	0x40011000
 8004a80:	40011400 	.word	0x40011400
 8004a84:	51eb851f 	.word	0x51eb851f

08004a88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9a:	2b84      	cmp	r3, #132	; 0x84
 8004a9c:	d005      	beq.n	8004aaa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3303      	adds	r3, #3
 8004aa8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004abc:	f000 ff38 	bl	8005930 <vTaskStartScheduler>
  
  return osOK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac8:	b089      	sub	sp, #36	; 0x24
 8004aca:	af04      	add	r7, sp, #16
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <osThreadCreate+0x54>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685c      	ldr	r4, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681d      	ldr	r5, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691e      	ldr	r6, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ffc8 	bl	8004a88 <makeFreeRtosPriority>
 8004af8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b02:	9202      	str	r2, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	9100      	str	r1, [sp, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 fd4b 	bl	80055aa <xTaskCreateStatic>
 8004b14:	4603      	mov	r3, r0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e01c      	b.n	8004b54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685c      	ldr	r4, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b26:	b29e      	uxth	r6, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ffaa 	bl	8004a88 <makeFreeRtosPriority>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f107 030c 	add.w	r3, r7, #12
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	9200      	str	r2, [sp, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4632      	mov	r2, r6
 8004b42:	4629      	mov	r1, r5
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 fd8a 	bl	800565e <xTaskCreate>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b54:	68fb      	ldr	r3, [r7, #12]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <osDelay+0x16>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	e000      	b.n	8004b76 <osDelay+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fea6 	bl	80058c8 <vTaskDelay>
  
  return osOK;
 8004b7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f103 0208 	add.w	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0208 	add.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 0208 	add.w	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d103      	bne.n	8004c48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e00c      	b.n	8004c62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e002      	b.n	8004c56 <vListInsert+0x2e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d2f6      	bcs.n	8004c50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6892      	ldr	r2, [r2, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6852      	ldr	r2, [r2, #4]
 8004cba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d103      	bne.n	8004cce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	e7fe      	b.n	8004d16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d18:	f001 fc30 	bl	800657c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	441a      	add	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	22ff      	movs	r2, #255	; 0xff
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d114      	bne.n	8004d98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01a      	beq.n	8004dac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3310      	adds	r3, #16
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f816 	bl	8005dac <xTaskRemoveFromEventList>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <xQueueGenericReset+0xcc>)
 8004d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	e009      	b.n	8004dac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3310      	adds	r3, #16
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fef2 	bl	8004b86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3324      	adds	r3, #36	; 0x24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff feed 	bl	8004b86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f001 fc14 	bl	80065d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004db0:	2301      	movs	r3, #1
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <xQueueGenericCreate+0x28>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e7fe      	b.n	8004de6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e004      	b.n	8004dfe <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
 8004dfc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3348      	adds	r3, #72	; 0x48
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fcd4 	bl	80067b0 <pvPortMalloc>
 8004e08:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d011      	beq.n	8004e34 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	3348      	adds	r3, #72	; 0x48
 8004e18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e22:	79fa      	ldrb	r2, [r7, #7]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f805 	bl	8004e3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e34:	69bb      	ldr	r3, [r7, #24]
	}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e002      	b.n	8004e60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	69b8      	ldr	r0, [r7, #24]
 8004e70:	f7ff ff3e 	bl	8004cf0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <xQueueGenericSend+0x30>
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	e7fe      	b.n	8004eaa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <xQueueGenericSend+0x3e>
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <xQueueGenericSend+0x42>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <xQueueGenericSend+0x44>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <xQueueGenericSend+0x5c>
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	e7fe      	b.n	8004ed6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <xQueueGenericSend+0x6a>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <xQueueGenericSend+0x6e>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueGenericSend+0x70>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <xQueueGenericSend+0x88>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	e7fe      	b.n	8004f02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f04:	f001 f908 	bl	8006118 <xTaskGetSchedulerState>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <xQueueGenericSend+0x98>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <xQueueGenericSend+0x9c>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <xQueueGenericSend+0x9e>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <xQueueGenericSend+0xb6>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e7fe      	b.n	8004f30 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f32:	f001 fb23 	bl	800657c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <xQueueGenericSend+0xcc>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d129      	bne.n	8004f9c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4e:	f000 fa1c 	bl	800538a <prvCopyDataToQueue>
 8004f52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	3324      	adds	r3, #36	; 0x24
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 ff23 	bl	8005dac <xTaskRemoveFromEventList>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d013      	beq.n	8004f94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f6c:	4b3f      	ldr	r3, [pc, #252]	; (800506c <xQueueGenericSend+0x1f0>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	e00a      	b.n	8004f94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f84:	4b39      	ldr	r3, [pc, #228]	; (800506c <xQueueGenericSend+0x1f0>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f94:	f001 fb20 	bl	80065d8 <vPortExitCritical>
				return pdPASS;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e063      	b.n	8005064 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fa2:	f001 fb19 	bl	80065d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e05c      	b.n	8005064 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 ff5b 	bl	8005e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fbe:	f001 fb0b 	bl	80065d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc2:	f000 fd13 	bl	80059ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc6:	f001 fad9 	bl	800657c <vPortEnterCritical>
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d103      	bne.n	8004fe0 <xQueueGenericSend+0x164>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe6:	b25b      	sxtb	r3, r3
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d103      	bne.n	8004ff6 <xQueueGenericSend+0x17a>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff6:	f001 faef 	bl	80065d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ffa:	1d3a      	adds	r2, r7, #4
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f000 ff4a 	bl	8005e9c <xTaskCheckForTimeOut>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d124      	bne.n	8005058 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800500e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005010:	f000 fab3 	bl	800557a <prvIsQueueFull>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	3310      	adds	r3, #16
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fe9e 	bl	8005d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800502a:	f000 fa3e 	bl	80054aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800502e:	f000 fceb 	bl	8005a08 <xTaskResumeAll>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	f47f af7c 	bne.w	8004f32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <xQueueGenericSend+0x1f0>)
 800503c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	e772      	b.n	8004f32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800504c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504e:	f000 fa2c 	bl	80054aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005052:	f000 fcd9 	bl	8005a08 <xTaskResumeAll>
 8005056:	e76c      	b.n	8004f32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505a:	f000 fa26 	bl	80054aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800505e:	f000 fcd3 	bl	8005a08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005064:	4618      	mov	r0, r3
 8005066:	3738      	adds	r7, #56	; 0x38
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	; 0x38
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <xQueueGenericSendFromISR+0x2c>
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
 800509a:	e7fe      	b.n	800509a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <xQueueGenericSendFromISR+0x3a>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <xQueueGenericSendFromISR+0x3e>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <xQueueGenericSendFromISR+0x40>
 80050ae:	2300      	movs	r3, #0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <xQueueGenericSendFromISR+0x58>
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	e7fe      	b.n	80050c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d103      	bne.n	80050d6 <xQueueGenericSendFromISR+0x66>
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <xQueueGenericSendFromISR+0x6a>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericSendFromISR+0x6c>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <xQueueGenericSendFromISR+0x84>
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e7fe      	b.n	80050f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f4:	f001 fb1e 	bl	8006734 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050f8:	f3ef 8211 	mrs	r2, BASEPRI
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61ba      	str	r2, [r7, #24]
 800510e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005110:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <xQueueGenericSendFromISR+0xb6>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d12c      	bne.n	8005180 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800512c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005136:	f000 f928 	bl	800538a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800513a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d112      	bne.n	800516a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d016      	beq.n	800517a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fe2b 	bl	8005dac <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e007      	b.n	800517a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800516a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800516e:	3301      	adds	r3, #1
 8005170:	b2db      	uxtb	r3, r3
 8005172:	b25a      	sxtb	r2, r3
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800517a:	2301      	movs	r3, #1
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800517e:	e001      	b.n	8005184 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005180:	2300      	movs	r3, #0
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005190:	4618      	mov	r0, r3
 8005192:	3738      	adds	r7, #56	; 0x38
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <xQueueReceive+0x2e>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	e7fe      	b.n	80051c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <xQueueReceive+0x3c>
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <xQueueReceive+0x40>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <xQueueReceive+0x42>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <xQueueReceive+0x5a>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e7fe      	b.n	80051f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f2:	f000 ff91 	bl	8006118 <xTaskGetSchedulerState>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <xQueueReceive+0x6a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <xQueueReceive+0x6e>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xQueueReceive+0x70>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <xQueueReceive+0x88>
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e7fe      	b.n	800521e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005220:	f001 f9ac 	bl	800657c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01f      	beq.n	8005270 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005234:	f000 f913 	bl	800545e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	1e5a      	subs	r2, r3, #1
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00f      	beq.n	8005268 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	3310      	adds	r3, #16
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fdad 	bl	8005dac <xTaskRemoveFromEventList>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005258:	4b3c      	ldr	r3, [pc, #240]	; (800534c <xQueueReceive+0x1b4>)
 800525a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005268:	f001 f9b6 	bl	80065d8 <vPortExitCritical>
				return pdPASS;
 800526c:	2301      	movs	r3, #1
 800526e:	e069      	b.n	8005344 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005276:	f001 f9af 	bl	80065d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800527a:	2300      	movs	r3, #0
 800527c:	e062      	b.n	8005344 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005284:	f107 0310 	add.w	r3, r7, #16
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fdf1 	bl	8005e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800528e:	2301      	movs	r3, #1
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005292:	f001 f9a1 	bl	80065d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005296:	f000 fba9 	bl	80059ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800529a:	f001 f96f 	bl	800657c <vPortEnterCritical>
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d103      	bne.n	80052b4 <xQueueReceive+0x11c>
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ba:	b25b      	sxtb	r3, r3
 80052bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c0:	d103      	bne.n	80052ca <xQueueReceive+0x132>
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ca:	f001 f985 	bl	80065d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052ce:	1d3a      	adds	r2, r7, #4
 80052d0:	f107 0310 	add.w	r3, r7, #16
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fde0 	bl	8005e9c <xTaskCheckForTimeOut>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d123      	bne.n	800532a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e4:	f000 f933 	bl	800554e <prvIsQueueEmpty>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d017      	beq.n	800531e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	3324      	adds	r3, #36	; 0x24
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fd34 	bl	8005d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052fe:	f000 f8d4 	bl	80054aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005302:	f000 fb81 	bl	8005a08 <xTaskResumeAll>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d189      	bne.n	8005220 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <xQueueReceive+0x1b4>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	e780      	b.n	8005220 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800531e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005320:	f000 f8c3 	bl	80054aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005324:	f000 fb70 	bl	8005a08 <xTaskResumeAll>
 8005328:	e77a      	b.n	8005220 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800532a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532c:	f000 f8bd 	bl	80054aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005330:	f000 fb6a 	bl	8005a08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005336:	f000 f90a 	bl	800554e <prvIsQueueEmpty>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f43f af6f 	beq.w	8005220 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005342:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005344:	4618      	mov	r0, r3
 8005346:	3730      	adds	r7, #48	; 0x30
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <uxQueueMessagesWaiting+0x22>
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	e7fe      	b.n	8005370 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005372:	f001 f903 	bl	800657c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800537c:	f001 f92c 	bl	80065d8 <vPortExitCritical>

	return uxReturn;
 8005380:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10d      	bne.n	80053c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d14d      	bne.n	800544c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fecd 	bl	8006154 <xTaskPriorityDisinherit>
 80053ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
 80053c2:	e043      	b.n	800544c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d119      	bne.n	80053fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6858      	ldr	r0, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	461a      	mov	r2, r3
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	f001 fbe5 	bl	8006ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	441a      	add	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d32b      	bcc.n	800544c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	e026      	b.n	800544c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68d8      	ldr	r0, [r3, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	461a      	mov	r2, r3
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	f001 fbcb 	bl	8006ba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	425b      	negs	r3, r3
 8005418:	441a      	add	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d207      	bcs.n	800543a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	425b      	negs	r3, r3
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d105      	bne.n	800544c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3b01      	subs	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005454:	697b      	ldr	r3, [r7, #20]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d018      	beq.n	80054a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	d303      	bcc.n	8005492 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68d9      	ldr	r1, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	461a      	mov	r2, r3
 800549c:	6838      	ldr	r0, [r7, #0]
 800549e:	f001 fb81 	bl	8006ba4 <memcpy>
	}
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054b2:	f001 f863 	bl	800657c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054be:	e011      	b.n	80054e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d012      	beq.n	80054ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fc6d 	bl	8005dac <xTaskRemoveFromEventList>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054d8:	f000 fd40 	bl	8005f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	3b01      	subs	r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dce9      	bgt.n	80054c0 <prvUnlockQueue+0x16>
 80054ec:	e000      	b.n	80054f0 <prvUnlockQueue+0x46>
					break;
 80054ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	22ff      	movs	r2, #255	; 0xff
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054f8:	f001 f86e 	bl	80065d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054fc:	f001 f83e 	bl	800657c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005506:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005508:	e011      	b.n	800552e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d012      	beq.n	8005538 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3310      	adds	r3, #16
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fc48 	bl	8005dac <xTaskRemoveFromEventList>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005522:	f000 fd1b 	bl	8005f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	3b01      	subs	r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800552e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005532:	2b00      	cmp	r3, #0
 8005534:	dce9      	bgt.n	800550a <prvUnlockQueue+0x60>
 8005536:	e000      	b.n	800553a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005538:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005542:	f001 f849 	bl	80065d8 <vPortExitCritical>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005556:	f001 f811 	bl	800657c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e001      	b.n	800556c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556c:	f001 f834 	bl	80065d8 <vPortExitCritical>

	return xReturn;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005582:	f000 fffb 	bl	800657c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	429a      	cmp	r2, r3
 8005590:	d102      	bne.n	8005598 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005592:	2301      	movs	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e001      	b.n	800559c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800559c:	f001 f81c 	bl	80065d8 <vPortExitCritical>

	return xReturn;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08e      	sub	sp, #56	; 0x38
 80055ae:	af04      	add	r7, sp, #16
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <xTaskCreateStatic+0x28>
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	623b      	str	r3, [r7, #32]
 80055d0:	e7fe      	b.n	80055d0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <xTaskCreateStatic+0x42>
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e7fe      	b.n	80055ea <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055ec:	2354      	movs	r3, #84	; 0x54
 80055ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b54      	cmp	r3, #84	; 0x54
 80055f4:	d009      	beq.n	800560a <xTaskCreateStatic+0x60>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e7fe      	b.n	8005608 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800560a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01e      	beq.n	8005650 <xTaskCreateStatic+0xa6>
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005620:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800562a:	2300      	movs	r3, #0
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	9302      	str	r3, [sp, #8]
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f850 	bl	80056e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800564a:	f000 f8d3 	bl	80057f4 <prvAddNewTaskToReadyList>
 800564e:	e001      	b.n	8005654 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005654:	697b      	ldr	r3, [r7, #20]
	}
 8005656:	4618      	mov	r0, r3
 8005658:	3728      	adds	r7, #40	; 0x28
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800565e:	b580      	push	{r7, lr}
 8005660:	b08c      	sub	sp, #48	; 0x30
 8005662:	af04      	add	r7, sp, #16
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f89c 	bl	80067b0 <pvPortMalloc>
 8005678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005680:	2054      	movs	r0, #84	; 0x54
 8005682:	f001 f895 	bl	80067b0 <pvPortMalloc>
 8005686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
 8005694:	e005      	b.n	80056a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f001 f94c 	bl	8006934 <vPortFree>
 800569c:	e001      	b.n	80056a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d017      	beq.n	80056d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9303      	str	r3, [sp, #12]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	9302      	str	r3, [sp, #8]
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f80e 	bl	80056e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056cc:	69f8      	ldr	r0, [r7, #28]
 80056ce:	f000 f891 	bl	80057f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e002      	b.n	80056de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056de:	69bb      	ldr	r3, [r7, #24]
	}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005700:	3b01      	subs	r3, #1
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <prvInitialiseNewTask+0x46>
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e7fe      	b.n	800572c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01f      	beq.n	8005774 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	e012      	b.n	8005760 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	7819      	ldrb	r1, [r3, #0]
 8005742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	3334      	adds	r3, #52	; 0x34
 800574a:	460a      	mov	r2, r1
 800574c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3301      	adds	r3, #1
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	d9e9      	bls.n	800573a <prvInitialiseNewTask+0x52>
 8005766:	e000      	b.n	800576a <prvInitialiseNewTask+0x82>
			{
				break;
 8005768:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005772:	e003      	b.n	800577c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	2b06      	cmp	r3, #6
 8005780:	d901      	bls.n	8005786 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005782:	2306      	movs	r3, #6
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	2200      	movs	r2, #0
 8005796:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fa12 	bl	8004bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	3318      	adds	r3, #24
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fa0d 	bl	8004bc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	f1c3 0207 	rsb	r2, r3, #7
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	2200      	movs	r2, #0
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	69b8      	ldr	r0, [r7, #24]
 80057d6:	f000 fda7 	bl	8006328 <pxPortInitialiseStack>
 80057da:	4602      	mov	r2, r0
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ec:	bf00      	nop
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057fc:	f000 febe 	bl	800657c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <prvAddNewTaskToReadyList+0xb8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a29      	ldr	r2, [pc, #164]	; (80058ac <prvAddNewTaskToReadyList+0xb8>)
 8005808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <prvAddNewTaskToReadyList+0xbc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005812:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <prvAddNewTaskToReadyList+0xbc>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005818:	4b24      	ldr	r3, [pc, #144]	; (80058ac <prvAddNewTaskToReadyList+0xb8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d110      	bne.n	8005842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005820:	f000 fbc0 	bl	8005fa4 <prvInitialiseTaskLists>
 8005824:	e00d      	b.n	8005842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <prvAddNewTaskToReadyList+0xc0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800582e:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <prvAddNewTaskToReadyList+0xbc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	429a      	cmp	r2, r3
 800583a:	d802      	bhi.n	8005842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800583c:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <prvAddNewTaskToReadyList+0xbc>)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <prvAddNewTaskToReadyList+0xc4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <prvAddNewTaskToReadyList+0xc4>)
 800584a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	4b19      	ldr	r3, [pc, #100]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4313      	orrs	r3, r2
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <prvAddNewTaskToReadyList+0xcc>)
 800586c:	441a      	add	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f7ff f9b3 	bl	8004be0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800587a:	f000 fead 	bl	80065d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <prvAddNewTaskToReadyList+0xc0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00e      	beq.n	80058a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <prvAddNewTaskToReadyList+0xbc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	429a      	cmp	r2, r3
 8005892:	d207      	bcs.n	80058a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <prvAddNewTaskToReadyList+0xd0>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000380 	.word	0x20000380
 80058b0:	20000280 	.word	0x20000280
 80058b4:	2000038c 	.word	0x2000038c
 80058b8:	2000039c 	.word	0x2000039c
 80058bc:	20000388 	.word	0x20000388
 80058c0:	20000284 	.word	0x20000284
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <vTaskDelay+0x60>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <vTaskDelay+0x2e>
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	e7fe      	b.n	80058f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80058f6:	f000 f879 	bl	80059ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058fa:	2100      	movs	r1, #0
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fcad 	bl	800625c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005902:	f000 f881 	bl	8005a08 <xTaskResumeAll>
 8005906:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <vTaskDelay+0x64>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200003a8 	.word	0x200003a8
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800593e:	463a      	mov	r2, r7
 8005940:	1d39      	adds	r1, r7, #4
 8005942:	f107 0308 	add.w	r3, r7, #8
 8005946:	4618      	mov	r0, r3
 8005948:	f7fa fe60 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	9202      	str	r2, [sp, #8]
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	2300      	movs	r3, #0
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	2300      	movs	r3, #0
 800595c:	460a      	mov	r2, r1
 800595e:	491d      	ldr	r1, [pc, #116]	; (80059d4 <vTaskStartScheduler+0xa4>)
 8005960:	481d      	ldr	r0, [pc, #116]	; (80059d8 <vTaskStartScheduler+0xa8>)
 8005962:	f7ff fe22 	bl	80055aa <xTaskCreateStatic>
 8005966:	4602      	mov	r2, r0
 8005968:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <vTaskStartScheduler+0xac>)
 800596a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <vTaskStartScheduler+0xac>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e001      	b.n	800597e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d115      	bne.n	80059b0 <vTaskStartScheduler+0x80>
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <vTaskStartScheduler+0xb0>)
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <vTaskStartScheduler+0xb4>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059a4:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <vTaskStartScheduler+0xb8>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059aa:	f000 fd49 	bl	8006440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059ae:	e00d      	b.n	80059cc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d109      	bne.n	80059cc <vTaskStartScheduler+0x9c>
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e7fe      	b.n	80059ca <vTaskStartScheduler+0x9a>
}
 80059cc:	bf00      	nop
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	08006c34 	.word	0x08006c34
 80059d8:	08005f75 	.word	0x08005f75
 80059dc:	200003a4 	.word	0x200003a4
 80059e0:	200003a0 	.word	0x200003a0
 80059e4:	2000038c 	.word	0x2000038c
 80059e8:	20000384 	.word	0x20000384

080059ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <vTaskSuspendAll+0x18>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <vTaskSuspendAll+0x18>)
 80059f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80059fa:	bf00      	nop
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	200003a8 	.word	0x200003a8

08005a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a16:	4b41      	ldr	r3, [pc, #260]	; (8005b1c <xTaskResumeAll+0x114>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <xTaskResumeAll+0x2a>
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	e7fe      	b.n	8005a30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a32:	f000 fda3 	bl	800657c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a36:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <xTaskResumeAll+0x114>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	4a37      	ldr	r2, [pc, #220]	; (8005b1c <xTaskResumeAll+0x114>)
 8005a3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a40:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <xTaskResumeAll+0x114>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d161      	bne.n	8005b0c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <xTaskResumeAll+0x118>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d05d      	beq.n	8005b0c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a50:	e02e      	b.n	8005ab0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a52:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <xTaskResumeAll+0x11c>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff f91b 	bl	8004c9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff f916 	bl	8004c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	2201      	movs	r2, #1
 8005a74:	409a      	lsls	r2, r3
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <xTaskResumeAll+0x120>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <xTaskResumeAll+0x120>)
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <xTaskResumeAll+0x124>)
 8005a8e:	441a      	add	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f7ff f8a2 	bl	8004be0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <xTaskResumeAll+0x128>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d302      	bcc.n	8005ab0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <xTaskResumeAll+0x12c>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <xTaskResumeAll+0x11c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1cc      	bne.n	8005a52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005abe:	f000 fb0b 	bl	80060d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <xTaskResumeAll+0x130>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ace:	f000 f837 	bl	8005b40 <xTaskIncrementTick>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005ad8:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <xTaskResumeAll+0x12c>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f1      	bne.n	8005ace <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <xTaskResumeAll+0x130>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <xTaskResumeAll+0x12c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <xTaskResumeAll+0x134>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b0c:	f000 fd64 	bl	80065d8 <vPortExitCritical>

	return xAlreadyYielded;
 8005b10:	68bb      	ldr	r3, [r7, #8]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200003a8 	.word	0x200003a8
 8005b20:	20000380 	.word	0x20000380
 8005b24:	20000340 	.word	0x20000340
 8005b28:	20000388 	.word	0x20000388
 8005b2c:	20000284 	.word	0x20000284
 8005b30:	20000280 	.word	0x20000280
 8005b34:	20000394 	.word	0x20000394
 8005b38:	20000390 	.word	0x20000390
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <xTaskIncrementTick+0x144>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 8087 	bne.w	8005c62 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b54:	4b4c      	ldr	r3, [pc, #304]	; (8005c88 <xTaskIncrementTick+0x148>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b5c:	4a4a      	ldr	r2, [pc, #296]	; (8005c88 <xTaskIncrementTick+0x148>)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11f      	bne.n	8005ba8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b68:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <xTaskIncrementTick+0x46>
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	e7fe      	b.n	8005b84 <xTaskIncrementTick+0x44>
 8005b86:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	4b40      	ldr	r3, [pc, #256]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3e      	ldr	r2, [pc, #248]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4a3e      	ldr	r2, [pc, #248]	; (8005c90 <xTaskIncrementTick+0x150>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <xTaskIncrementTick+0x154>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	4a3c      	ldr	r2, [pc, #240]	; (8005c94 <xTaskIncrementTick+0x154>)
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	f000 fa98 	bl	80060d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <xTaskIncrementTick+0x158>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d348      	bcc.n	8005c44 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb2:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <xTaskIncrementTick+0x158>)
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	601a      	str	r2, [r3, #0]
					break;
 8005bc4:	e03e      	b.n	8005c44 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc6:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <xTaskIncrementTick+0x14c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d203      	bcs.n	8005be6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bde:	4a2e      	ldr	r2, [pc, #184]	; (8005c98 <xTaskIncrementTick+0x158>)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005be4:	e02e      	b.n	8005c44 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff f855 	bl	8004c9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3318      	adds	r3, #24
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff f84c 	bl	8004c9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	2201      	movs	r2, #1
 8005c08:	409a      	lsls	r2, r3
 8005c0a:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <xTaskIncrementTick+0x15c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <xTaskIncrementTick+0x15c>)
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <xTaskIncrementTick+0x160>)
 8005c22:	441a      	add	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f7fe ffd8 	bl	8004be0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <xTaskIncrementTick+0x164>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d3b9      	bcc.n	8005bb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c42:	e7b6      	b.n	8005bb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <xTaskIncrementTick+0x164>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	4915      	ldr	r1, [pc, #84]	; (8005ca0 <xTaskIncrementTick+0x160>)
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d907      	bls.n	8005c6c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e004      	b.n	8005c6c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <xTaskIncrementTick+0x168>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3301      	adds	r3, #1
 8005c68:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <xTaskIncrementTick+0x168>)
 8005c6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <xTaskIncrementTick+0x16c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005c74:	2301      	movs	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200003a8 	.word	0x200003a8
 8005c88:	20000384 	.word	0x20000384
 8005c8c:	20000338 	.word	0x20000338
 8005c90:	2000033c 	.word	0x2000033c
 8005c94:	20000398 	.word	0x20000398
 8005c98:	200003a0 	.word	0x200003a0
 8005c9c:	20000388 	.word	0x20000388
 8005ca0:	20000284 	.word	0x20000284
 8005ca4:	20000280 	.word	0x20000280
 8005ca8:	20000390 	.word	0x20000390
 8005cac:	20000394 	.word	0x20000394

08005cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cb6:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <vTaskSwitchContext+0xa0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cbe:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <vTaskSwitchContext+0xa4>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cc4:	e03e      	b.n	8005d44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005cc6:	4b23      	ldr	r3, [pc, #140]	; (8005d54 <vTaskSwitchContext+0xa4>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ccc:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <vTaskSwitchContext+0xa8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	fab3 f383 	clz	r3, r3
 8005cd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f1c3 031f 	rsb	r3, r3, #31
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	491e      	ldr	r1, [pc, #120]	; (8005d5c <vTaskSwitchContext+0xac>)
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e7fe      	b.n	8005d08 <vTaskSwitchContext+0x58>
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <vTaskSwitchContext+0xac>)
 8005d16:	4413      	add	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d104      	bne.n	8005d3a <vTaskSwitchContext+0x8a>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <vTaskSwitchContext+0xb0>)
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	200003a8 	.word	0x200003a8
 8005d54:	20000394 	.word	0x20000394
 8005d58:	20000388 	.word	0x20000388
 8005d5c:	20000284 	.word	0x20000284
 8005d60:	20000280 	.word	0x20000280

08005d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <vTaskPlaceOnEventList+0x24>
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e7fe      	b.n	8005d86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <vTaskPlaceOnEventList+0x44>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3318      	adds	r3, #24
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fe ff49 	bl	8004c28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d96:	2101      	movs	r1, #1
 8005d98:	6838      	ldr	r0, [r7, #0]
 8005d9a:	f000 fa5f 	bl	800625c <prvAddCurrentTaskToDelayedList>
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000280 	.word	0x20000280

08005dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <xTaskRemoveFromEventList+0x2a>
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e7fe      	b.n	8005dd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3318      	adds	r3, #24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe ff5d 	bl	8004c9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de0:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <xTaskRemoveFromEventList+0xac>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11c      	bne.n	8005e22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe ff54 	bl	8004c9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <xTaskRemoveFromEventList+0xb0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <xTaskRemoveFromEventList+0xb0>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <xTaskRemoveFromEventList+0xb4>)
 8005e12:	441a      	add	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fe fee0 	bl	8004be0 <vListInsertEnd>
 8005e20:	e005      	b.n	8005e2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3318      	adds	r3, #24
 8005e26:	4619      	mov	r1, r3
 8005e28:	480e      	ldr	r0, [pc, #56]	; (8005e64 <xTaskRemoveFromEventList+0xb8>)
 8005e2a:	f7fe fed9 	bl	8004be0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <xTaskRemoveFromEventList+0xbc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d905      	bls.n	8005e48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <xTaskRemoveFromEventList+0xc0>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e001      	b.n	8005e4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e4c:	697b      	ldr	r3, [r7, #20]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200003a8 	.word	0x200003a8
 8005e5c:	20000388 	.word	0x20000388
 8005e60:	20000284 	.word	0x20000284
 8005e64:	20000340 	.word	0x20000340
 8005e68:	20000280 	.word	0x20000280
 8005e6c:	20000394 	.word	0x20000394

08005e70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <vTaskInternalSetTimeOutState+0x24>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <vTaskInternalSetTimeOutState+0x28>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20000398 	.word	0x20000398
 8005e98:	20000384 	.word	0x20000384

08005e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <xTaskCheckForTimeOut+0x24>
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	e7fe      	b.n	8005ebe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <xTaskCheckForTimeOut+0x3e>
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005eda:	f000 fb4f 	bl	800657c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <xTaskCheckForTimeOut+0xb8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d102      	bne.n	8005efe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	e023      	b.n	8005f46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <xTaskCheckForTimeOut+0xbc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d007      	beq.n	8005f1a <xTaskCheckForTimeOut+0x7e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	e015      	b.n	8005f46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d20b      	bcs.n	8005f3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff9d 	bl	8005e70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	e004      	b.n	8005f46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f000 fb47 	bl	80065d8 <vPortExitCritical>

	return xReturn;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000384 	.word	0x20000384
 8005f58:	20000398 	.word	0x20000398

08005f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f60:	4b03      	ldr	r3, [pc, #12]	; (8005f70 <vTaskMissedYield+0x14>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000394 	.word	0x20000394

08005f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f7c:	f000 f852 	bl	8006024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <prvIdleTask+0x28>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d9f9      	bls.n	8005f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <prvIdleTask+0x2c>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f98:	e7f0      	b.n	8005f7c <prvIdleTask+0x8>
 8005f9a:	bf00      	nop
 8005f9c:	20000284 	.word	0x20000284
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	e00c      	b.n	8005fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4a12      	ldr	r2, [pc, #72]	; (8006004 <prvInitialiseTaskLists+0x60>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe fde1 	bl	8004b86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d9ef      	bls.n	8005fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd0:	480d      	ldr	r0, [pc, #52]	; (8006008 <prvInitialiseTaskLists+0x64>)
 8005fd2:	f7fe fdd8 	bl	8004b86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fd6:	480d      	ldr	r0, [pc, #52]	; (800600c <prvInitialiseTaskLists+0x68>)
 8005fd8:	f7fe fdd5 	bl	8004b86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <prvInitialiseTaskLists+0x6c>)
 8005fde:	f7fe fdd2 	bl	8004b86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fe2:	480c      	ldr	r0, [pc, #48]	; (8006014 <prvInitialiseTaskLists+0x70>)
 8005fe4:	f7fe fdcf 	bl	8004b86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fe8:	480b      	ldr	r0, [pc, #44]	; (8006018 <prvInitialiseTaskLists+0x74>)
 8005fea:	f7fe fdcc 	bl	8004b86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <prvInitialiseTaskLists+0x78>)
 8005ff0:	4a05      	ldr	r2, [pc, #20]	; (8006008 <prvInitialiseTaskLists+0x64>)
 8005ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <prvInitialiseTaskLists+0x7c>)
 8005ff6:	4a05      	ldr	r2, [pc, #20]	; (800600c <prvInitialiseTaskLists+0x68>)
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000284 	.word	0x20000284
 8006008:	20000310 	.word	0x20000310
 800600c:	20000324 	.word	0x20000324
 8006010:	20000340 	.word	0x20000340
 8006014:	20000354 	.word	0x20000354
 8006018:	2000036c 	.word	0x2000036c
 800601c:	20000338 	.word	0x20000338
 8006020:	2000033c 	.word	0x2000033c

08006024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602a:	e019      	b.n	8006060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800602c:	f000 faa6 	bl	800657c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <prvCheckTasksWaitingTermination+0x4c>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fe2c 	bl	8004c9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <prvCheckTasksWaitingTermination+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <prvCheckTasksWaitingTermination+0x50>)
 800604a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 8006054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006056:	f000 fabf 	bl	80065d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f80e 	bl	800607c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e1      	bne.n	800602c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000354 	.word	0x20000354
 8006074:	20000380 	.word	0x20000380
 8006078:	20000368 	.word	0x20000368

0800607c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fc4e 	bl	8006934 <vPortFree>
				vPortFree( pxTCB );
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc4b 	bl	8006934 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800609e:	e017      	b.n	80060d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d103      	bne.n	80060b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fc42 	bl	8006934 <vPortFree>
	}
 80060b0:	e00e      	b.n	80060d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d009      	beq.n	80060d0 <prvDeleteTCB+0x54>
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e7fe      	b.n	80060ce <prvDeleteTCB+0x52>
	}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <prvResetNextTaskUnblockTime+0x38>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <prvResetNextTaskUnblockTime+0x3c>)
 80060ea:	f04f 32ff 	mov.w	r2, #4294967295
 80060ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060f0:	e008      	b.n	8006104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <prvResetNextTaskUnblockTime+0x38>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <prvResetNextTaskUnblockTime+0x3c>)
 8006102:	6013      	str	r3, [r2, #0]
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000338 	.word	0x20000338
 8006114:	200003a0 	.word	0x200003a0

08006118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <xTaskGetSchedulerState+0x34>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006126:	2301      	movs	r3, #1
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	e008      	b.n	800613e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800612c:	4b08      	ldr	r3, [pc, #32]	; (8006150 <xTaskGetSchedulerState+0x38>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006134:	2302      	movs	r3, #2
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	e001      	b.n	800613e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800613e:	687b      	ldr	r3, [r7, #4]
	}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	2000038c 	.word	0x2000038c
 8006150:	200003a8 	.word	0x200003a8

08006154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06c      	beq.n	8006244 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800616a:	4b39      	ldr	r3, [pc, #228]	; (8006250 <xTaskPriorityDisinherit+0xfc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d009      	beq.n	8006188 <xTaskPriorityDisinherit+0x34>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e7fe      	b.n	8006186 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <xTaskPriorityDisinherit+0x50>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	e7fe      	b.n	80061a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a8:	1e5a      	subs	r2, r3, #1
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d044      	beq.n	8006244 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d140      	bne.n	8006244 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fd67 	bl	8004c9a <uxListRemove>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d115      	bne.n	80061fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d6:	491f      	ldr	r1, [pc, #124]	; (8006254 <xTaskPriorityDisinherit+0x100>)
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xTaskPriorityDisinherit+0xaa>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	2201      	movs	r2, #1
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43da      	mvns	r2, r3
 80061f4:	4b18      	ldr	r3, [pc, #96]	; (8006258 <xTaskPriorityDisinherit+0x104>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4013      	ands	r3, r2
 80061fa:	4a17      	ldr	r2, [pc, #92]	; (8006258 <xTaskPriorityDisinherit+0x104>)
 80061fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f1c3 0207 	rsb	r2, r3, #7
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	2201      	movs	r2, #1
 8006218:	409a      	lsls	r2, r3
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <xTaskPriorityDisinherit+0x104>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4313      	orrs	r3, r2
 8006220:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <xTaskPriorityDisinherit+0x104>)
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a08      	ldr	r2, [pc, #32]	; (8006254 <xTaskPriorityDisinherit+0x100>)
 8006232:	441a      	add	r2, r3
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7fe fcd0 	bl	8004be0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006244:	697b      	ldr	r3, [r7, #20]
	}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000280 	.word	0x20000280
 8006254:	20000284 	.word	0x20000284
 8006258:	20000388 	.word	0x20000388

0800625c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006266:	4b29      	ldr	r3, [pc, #164]	; (800630c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800626c:	4b28      	ldr	r3, [pc, #160]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fd11 	bl	8004c9a <uxListRemove>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800627e:	4b24      	ldr	r3, [pc, #144]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	2201      	movs	r2, #1
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43da      	mvns	r2, r3
 800628c:	4b21      	ldr	r3, [pc, #132]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4013      	ands	r3, r2
 8006292:	4a20      	ldr	r2, [pc, #128]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006294:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d10a      	bne.n	80062b4 <prvAddCurrentTaskToDelayedList+0x58>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a4:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	481a      	ldr	r0, [pc, #104]	; (8006318 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062ae:	f7fe fc97 	bl	8004be0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062b2:	e026      	b.n	8006302 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062bc:	4b14      	ldr	r3, [pc, #80]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d209      	bcs.n	80062e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062cc:	4b13      	ldr	r3, [pc, #76]	; (800631c <prvAddCurrentTaskToDelayedList+0xc0>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3304      	adds	r3, #4
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f7fe fca5 	bl	8004c28 <vListInsert>
}
 80062de:	e010      	b.n	8006302 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <prvAddCurrentTaskToDelayedList+0xc4>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f7fe fc9b 	bl	8004c28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062f2:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d202      	bcs.n	8006302 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062fc:	4a09      	ldr	r2, [pc, #36]	; (8006324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6013      	str	r3, [r2, #0]
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000384 	.word	0x20000384
 8006310:	20000280 	.word	0x20000280
 8006314:	20000388 	.word	0x20000388
 8006318:	2000036c 	.word	0x2000036c
 800631c:	2000033c 	.word	0x2000033c
 8006320:	20000338 	.word	0x20000338
 8006324:	200003a0 	.word	0x200003a0

08006328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3b04      	subs	r3, #4
 8006338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3b04      	subs	r3, #4
 8006346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0201 	bic.w	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3b04      	subs	r3, #4
 8006356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006358:	4a0c      	ldr	r2, [pc, #48]	; (800638c <pxPortInitialiseStack+0x64>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3b14      	subs	r3, #20
 8006362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3b04      	subs	r3, #4
 800636e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f06f 0202 	mvn.w	r2, #2
 8006376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3b20      	subs	r3, #32
 800637c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	08006391 	.word	0x08006391

08006390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <prvTaskExitError+0x50>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d009      	beq.n	80063b8 <prvTaskExitError+0x28>
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e7fe      	b.n	80063b6 <prvTaskExitError+0x26>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ca:	bf00      	nop
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0fc      	beq.n	80063cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	2000000c 	.word	0x2000000c
	...

080063f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <pxCurrentTCBConst2>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	f380 8809 	msr	PSP, r0
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8811 	msr	BASEPRI, r0
 800640a:	4770      	bx	lr
 800640c:	f3af 8000 	nop.w

08006410 <pxCurrentTCBConst2>:
 8006410:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006418:	4808      	ldr	r0, [pc, #32]	; (800643c <prvPortStartFirstTask+0x24>)
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f380 8808 	msr	MSP, r0
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8814 	msr	CONTROL, r0
 800642a:	b662      	cpsie	i
 800642c:	b661      	cpsie	f
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	df00      	svc	0
 8006438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800643a:	bf00      	nop
 800643c:	e000ed08 	.word	0xe000ed08

08006440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006446:	4b44      	ldr	r3, [pc, #272]	; (8006558 <xPortStartScheduler+0x118>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a44      	ldr	r2, [pc, #272]	; (800655c <xPortStartScheduler+0x11c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <xPortStartScheduler+0x24>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e7fe      	b.n	8006462 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006464:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <xPortStartScheduler+0x118>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a3d      	ldr	r2, [pc, #244]	; (8006560 <xPortStartScheduler+0x120>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d109      	bne.n	8006482 <xPortStartScheduler+0x42>
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e7fe      	b.n	8006480 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006482:	4b38      	ldr	r3, [pc, #224]	; (8006564 <xPortStartScheduler+0x124>)
 8006484:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	22ff      	movs	r2, #255	; 0xff
 8006492:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	4b30      	ldr	r3, [pc, #192]	; (8006568 <xPortStartScheduler+0x128>)
 80064a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <xPortStartScheduler+0x12c>)
 80064ac:	2207      	movs	r2, #7
 80064ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064b0:	e009      	b.n	80064c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064b2:	4b2e      	ldr	r3, [pc, #184]	; (800656c <xPortStartScheduler+0x12c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	4a2c      	ldr	r2, [pc, #176]	; (800656c <xPortStartScheduler+0x12c>)
 80064ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b80      	cmp	r3, #128	; 0x80
 80064d0:	d0ef      	beq.n	80064b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064d2:	4b26      	ldr	r3, [pc, #152]	; (800656c <xPortStartScheduler+0x12c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1c3 0307 	rsb	r3, r3, #7
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d009      	beq.n	80064f2 <xPortStartScheduler+0xb2>
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	e7fe      	b.n	80064f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <xPortStartScheduler+0x12c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	4a1c      	ldr	r2, [pc, #112]	; (800656c <xPortStartScheduler+0x12c>)
 80064fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064fc:	4b1b      	ldr	r3, [pc, #108]	; (800656c <xPortStartScheduler+0x12c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006504:	4a19      	ldr	r2, [pc, #100]	; (800656c <xPortStartScheduler+0x12c>)
 8006506:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006510:	4b17      	ldr	r3, [pc, #92]	; (8006570 <xPortStartScheduler+0x130>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a16      	ldr	r2, [pc, #88]	; (8006570 <xPortStartScheduler+0x130>)
 8006516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800651a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800651c:	4b14      	ldr	r3, [pc, #80]	; (8006570 <xPortStartScheduler+0x130>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a13      	ldr	r2, [pc, #76]	; (8006570 <xPortStartScheduler+0x130>)
 8006522:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006526:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006528:	f000 f8d6 	bl	80066d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800652c:	4b11      	ldr	r3, [pc, #68]	; (8006574 <xPortStartScheduler+0x134>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006532:	f000 f8f5 	bl	8006720 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <xPortStartScheduler+0x138>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a0f      	ldr	r2, [pc, #60]	; (8006578 <xPortStartScheduler+0x138>)
 800653c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006540:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006542:	f7ff ff69 	bl	8006418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006546:	f7ff fbb3 	bl	8005cb0 <vTaskSwitchContext>
	prvTaskExitError();
 800654a:	f7ff ff21 	bl	8006390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	e000ed00 	.word	0xe000ed00
 800655c:	410fc271 	.word	0x410fc271
 8006560:	410fc270 	.word	0x410fc270
 8006564:	e000e400 	.word	0xe000e400
 8006568:	200003ac 	.word	0x200003ac
 800656c:	200003b0 	.word	0x200003b0
 8006570:	e000ed20 	.word	0xe000ed20
 8006574:	2000000c 	.word	0x2000000c
 8006578:	e000ef34 	.word	0xe000ef34

0800657c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <vPortEnterCritical+0x54>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	4a0d      	ldr	r2, [pc, #52]	; (80065d0 <vPortEnterCritical+0x54>)
 800659c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <vPortEnterCritical+0x54>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10e      	bne.n	80065c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <vPortEnterCritical+0x58>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <vPortEnterCritical+0x48>
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	e7fe      	b.n	80065c2 <vPortEnterCritical+0x46>
	}
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	2000000c 	.word	0x2000000c
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <vPortExitCritical+0x4c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <vPortExitCritical+0x22>
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	e7fe      	b.n	80065f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <vPortExitCritical+0x4c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3b01      	subs	r3, #1
 8006600:	4a08      	ldr	r2, [pc, #32]	; (8006624 <vPortExitCritical+0x4c>)
 8006602:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006604:	4b07      	ldr	r3, [pc, #28]	; (8006624 <vPortExitCritical+0x4c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <vPortExitCritical+0x3e>
 800660c:	2300      	movs	r3, #0
 800660e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000000c 	.word	0x2000000c
	...

08006630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006630:	f3ef 8009 	mrs	r0, PSP
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <pxCurrentTCBConst>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f01e 0f10 	tst.w	lr, #16
 8006640:	bf08      	it	eq
 8006642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006654:	f380 8811 	msr	BASEPRI, r0
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f7ff fb26 	bl	8005cb0 <vTaskSwitchContext>
 8006664:	f04f 0000 	mov.w	r0, #0
 8006668:	f380 8811 	msr	BASEPRI, r0
 800666c:	bc09      	pop	{r0, r3}
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006676:	f01e 0f10 	tst.w	lr, #16
 800667a:	bf08      	it	eq
 800667c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006680:	f380 8809 	msr	PSP, r0
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst>:
 8006690:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066b0:	f7ff fa46 	bl	8005b40 <xTaskIncrementTick>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <SysTick_Handler+0x3c>)
 80066bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	2300      	movs	r3, #0
 80066c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <vPortSetupTimerInterrupt+0x34>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortSetupTimerInterrupt+0x38>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <vPortSetupTimerInterrupt+0x3c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <vPortSetupTimerInterrupt+0x40>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	099b      	lsrs	r3, r3, #6
 80066f4:	4a09      	ldr	r2, [pc, #36]	; (800671c <vPortSetupTimerInterrupt+0x44>)
 80066f6:	3b01      	subs	r3, #1
 80066f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <vPortSetupTimerInterrupt+0x34>)
 80066fc:	2207      	movs	r2, #7
 80066fe:	601a      	str	r2, [r3, #0]
}
 8006700:	bf00      	nop
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	e000e010 	.word	0xe000e010
 8006710:	e000e018 	.word	0xe000e018
 8006714:	20000000 	.word	0x20000000
 8006718:	10624dd3 	.word	0x10624dd3
 800671c:	e000e014 	.word	0xe000e014

08006720 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006720:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006730 <vPortEnableVFP+0x10>
 8006724:	6801      	ldr	r1, [r0, #0]
 8006726:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800672a:	6001      	str	r1, [r0, #0]
 800672c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800672e:	bf00      	nop
 8006730:	e000ed88 	.word	0xe000ed88

08006734 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800673a:	f3ef 8305 	mrs	r3, IPSR
 800673e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d913      	bls.n	800676e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006746:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <vPortValidateInterruptPriority+0x6c>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006750:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <vPortValidateInterruptPriority+0x70>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	7afa      	ldrb	r2, [r7, #11]
 8006756:	429a      	cmp	r2, r3
 8006758:	d209      	bcs.n	800676e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	e7fe      	b.n	800676c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800676e:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <vPortValidateInterruptPriority+0x74>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <vPortValidateInterruptPriority+0x78>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d909      	bls.n	8006792 <vPortValidateInterruptPriority+0x5e>
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	e7fe      	b.n	8006790 <vPortValidateInterruptPriority+0x5c>
	}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000e3f0 	.word	0xe000e3f0
 80067a4:	200003ac 	.word	0x200003ac
 80067a8:	e000ed0c 	.word	0xe000ed0c
 80067ac:	200003b0 	.word	0x200003b0

080067b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067bc:	f7ff f916 	bl	80059ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c0:	4b57      	ldr	r3, [pc, #348]	; (8006920 <pvPortMalloc+0x170>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067c8:	f000 f90c 	bl	80069e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067cc:	4b55      	ldr	r3, [pc, #340]	; (8006924 <pvPortMalloc+0x174>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 808c 	bne.w	80068f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01c      	beq.n	800681a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80067e0:	2208      	movs	r2, #8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d013      	beq.n	800681a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f023 0307 	bic.w	r3, r3, #7
 80067f8:	3308      	adds	r3, #8
 80067fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <pvPortMalloc+0x6a>
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e7fe      	b.n	8006818 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d068      	beq.n	80068f2 <pvPortMalloc+0x142>
 8006820:	4b41      	ldr	r3, [pc, #260]	; (8006928 <pvPortMalloc+0x178>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d863      	bhi.n	80068f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800682a:	4b40      	ldr	r3, [pc, #256]	; (800692c <pvPortMalloc+0x17c>)
 800682c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800682e:	4b3f      	ldr	r3, [pc, #252]	; (800692c <pvPortMalloc+0x17c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006834:	e004      	b.n	8006840 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	429a      	cmp	r2, r3
 8006848:	d903      	bls.n	8006852 <pvPortMalloc+0xa2>
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f1      	bne.n	8006836 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006852:	4b33      	ldr	r3, [pc, #204]	; (8006920 <pvPortMalloc+0x170>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006858:	429a      	cmp	r2, r3
 800685a:	d04a      	beq.n	80068f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2208      	movs	r2, #8
 8006862:	4413      	add	r3, r2
 8006864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1ad2      	subs	r2, r2, r3
 8006876:	2308      	movs	r3, #8
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	429a      	cmp	r2, r3
 800687c:	d91e      	bls.n	80068bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800687e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4413      	add	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <pvPortMalloc+0xf4>
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068b6:	69b8      	ldr	r0, [r7, #24]
 80068b8:	f000 f8f6 	bl	8006aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068bc:	4b1a      	ldr	r3, [pc, #104]	; (8006928 <pvPortMalloc+0x178>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	4a18      	ldr	r2, [pc, #96]	; (8006928 <pvPortMalloc+0x178>)
 80068c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ca:	4b17      	ldr	r3, [pc, #92]	; (8006928 <pvPortMalloc+0x178>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b18      	ldr	r3, [pc, #96]	; (8006930 <pvPortMalloc+0x180>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d203      	bcs.n	80068de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <pvPortMalloc+0x178>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a15      	ldr	r2, [pc, #84]	; (8006930 <pvPortMalloc+0x180>)
 80068dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <pvPortMalloc+0x174>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068f2:	f7ff f889 	bl	8005a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <pvPortMalloc+0x164>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e7fe      	b.n	8006912 <pvPortMalloc+0x162>
	return pvReturn;
 8006914:	69fb      	ldr	r3, [r7, #28]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3728      	adds	r7, #40	; 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20003fbc 	.word	0x20003fbc
 8006924:	20003fc8 	.word	0x20003fc8
 8006928:	20003fc0 	.word	0x20003fc0
 800692c:	20003fb4 	.word	0x20003fb4
 8006930:	20003fc4 	.word	0x20003fc4

08006934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d046      	beq.n	80069d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006946:	2308      	movs	r3, #8
 8006948:	425b      	negs	r3, r3
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4413      	add	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	4b20      	ldr	r3, [pc, #128]	; (80069dc <vPortFree+0xa8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4013      	ands	r3, r2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <vPortFree+0x42>
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e7fe      	b.n	8006974 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <vPortFree+0x5e>
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	e7fe      	b.n	8006990 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <vPortFree+0xa8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d019      	beq.n	80069d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d115      	bne.n	80069d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <vPortFree+0xa8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069b8:	f7ff f818 	bl	80059ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <vPortFree+0xac>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4413      	add	r3, r2
 80069c6:	4a06      	ldr	r2, [pc, #24]	; (80069e0 <vPortFree+0xac>)
 80069c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ca:	6938      	ldr	r0, [r7, #16]
 80069cc:	f000 f86c 	bl	8006aa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069d0:	f7ff f81a 	bl	8005a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069d4:	bf00      	nop
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20003fc8 	.word	0x20003fc8
 80069e0:	20003fc0 	.word	0x20003fc0

080069e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069f0:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <prvHeapInit+0xac>)
 80069f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00c      	beq.n	8006a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3307      	adds	r3, #7
 8006a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0307 	bic.w	r3, r3, #7
 8006a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <prvHeapInit+0xac>)
 8006a14:	4413      	add	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <prvHeapInit+0xb0>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a22:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <prvHeapInit+0xb0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a30:	2208      	movs	r2, #8
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <prvHeapInit+0xb4>)
 8006a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <prvHeapInit+0xb4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <prvHeapInit+0xb4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <prvHeapInit+0xb4>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <prvHeapInit+0xb8>)
 8006a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <prvHeapInit+0xbc>)
 8006a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a7c:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <prvHeapInit+0xc0>)
 8006a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	200003b4 	.word	0x200003b4
 8006a94:	20003fb4 	.word	0x20003fb4
 8006a98:	20003fbc 	.word	0x20003fbc
 8006a9c:	20003fc4 	.word	0x20003fc4
 8006aa0:	20003fc0 	.word	0x20003fc0
 8006aa4:	20003fc8 	.word	0x20003fc8

08006aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ab0:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <prvInsertBlockIntoFreeList+0xac>)
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e002      	b.n	8006abc <prvInsertBlockIntoFreeList+0x14>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d8f7      	bhi.n	8006ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d108      	bne.n	8006aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d118      	bne.n	8006b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <prvInsertBlockIntoFreeList+0xb0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d00d      	beq.n	8006b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	441a      	add	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e008      	b.n	8006b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <prvInsertBlockIntoFreeList+0xb0>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e003      	b.n	8006b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d002      	beq.n	8006b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20003fb4 	.word	0x20003fb4
 8006b58:	20003fbc 	.word	0x20003fbc

08006b5c <__libc_init_array>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	4e0d      	ldr	r6, [pc, #52]	; (8006b94 <__libc_init_array+0x38>)
 8006b60:	4c0d      	ldr	r4, [pc, #52]	; (8006b98 <__libc_init_array+0x3c>)
 8006b62:	1ba4      	subs	r4, r4, r6
 8006b64:	10a4      	asrs	r4, r4, #2
 8006b66:	2500      	movs	r5, #0
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d109      	bne.n	8006b80 <__libc_init_array+0x24>
 8006b6c:	4e0b      	ldr	r6, [pc, #44]	; (8006b9c <__libc_init_array+0x40>)
 8006b6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ba0 <__libc_init_array+0x44>)
 8006b70:	f000 f82c 	bl	8006bcc <_init>
 8006b74:	1ba4      	subs	r4, r4, r6
 8006b76:	10a4      	asrs	r4, r4, #2
 8006b78:	2500      	movs	r5, #0
 8006b7a:	42a5      	cmp	r5, r4
 8006b7c:	d105      	bne.n	8006b8a <__libc_init_array+0x2e>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b84:	4798      	blx	r3
 8006b86:	3501      	adds	r5, #1
 8006b88:	e7ee      	b.n	8006b68 <__libc_init_array+0xc>
 8006b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b8e:	4798      	blx	r3
 8006b90:	3501      	adds	r5, #1
 8006b92:	e7f2      	b.n	8006b7a <__libc_init_array+0x1e>
 8006b94:	08006c5c 	.word	0x08006c5c
 8006b98:	08006c5c 	.word	0x08006c5c
 8006b9c:	08006c5c 	.word	0x08006c5c
 8006ba0:	08006c60 	.word	0x08006c60

08006ba4 <memcpy>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	1e43      	subs	r3, r0, #1
 8006ba8:	440a      	add	r2, r1
 8006baa:	4291      	cmp	r1, r2
 8006bac:	d100      	bne.n	8006bb0 <memcpy+0xc>
 8006bae:	bd10      	pop	{r4, pc}
 8006bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb8:	e7f7      	b.n	8006baa <memcpy+0x6>

08006bba <memset>:
 8006bba:	4402      	add	r2, r0
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d100      	bne.n	8006bc4 <memset+0xa>
 8006bc2:	4770      	bx	lr
 8006bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bc8:	e7f9      	b.n	8006bbe <memset+0x4>
	...

08006bcc <_init>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr

08006bd8 <_fini>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	bf00      	nop
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr
