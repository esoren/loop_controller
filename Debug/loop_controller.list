
loop_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006778  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006990  08006990  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000416c  20000010  080069a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  080069a8  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186a9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037fb  00000000  00000000  000386e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  0003bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001318  00000000  00000000  0003d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184df  00000000  00000000  0003e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011fde  00000000  00000000  00056bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a3ac  00000000  00000000  00068b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005564  00000000  00000000  00102fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006900 	.word	0x08006900

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006900 	.word	0x08006900

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC1_Init+0x98>)
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_ADC1_Init+0x9c>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC1_Init+0x98>)
 80004fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_ADC1_Init+0x98>)
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_ADC1_Init+0xa0>)
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_ADC1_Init+0x98>)
 800052e:	2201      	movs	r2, #1
 8000530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_ADC1_Init+0x98>)
 800053c:	2201      	movs	r2, #1
 800053e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_ADC1_Init+0x98>)
 8000542:	f001 f85f 	bl	8001604 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 fa0e 	bl	800096c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_ADC1_Init+0x98>)
 8000562:	f001 f893 	bl	800168c <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800056c:	f000 f9fe 	bl	800096c <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20003fcc 	.word	0x20003fcc
 800057c:	40012000 	.word	0x40012000
 8000580:	0f000001 	.word	0x0f000001

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_ADC_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_ADC_MspInit+0x84>)
 80005f2:	f001 fb4b 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012000 	.word	0x40012000
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000002c 	.word	0x2000002c
 800063c:	20000080 	.word	0x20000080

08000640 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


	xMotorQueue = xQueueCreate(30, sizeof(motorMessage_t));
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	201e      	movs	r0, #30
 800064c:	f004 fb28 	bl	8004ca0 <xQueueGenericCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_FREERTOS_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_FREERTOS_Init+0x6c>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f004 f998 	bl	80049a6 <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_FREERTOS_Init+0x70>)
 800067a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_FREERTOS_Init+0x74>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 f987 	bl	80049a6 <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_FREERTOS_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 800069e:	bf00      	nop
 80006a0:	3738      	adds	r7, #56	; 0x38
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdb0      	pop	{r4, r5, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000401c 	.word	0x2000401c
 80006ac:	08006924 	.word	0x08006924
 80006b0:	20004014 	.word	0x20004014
 80006b4:	0800694c 	.word	0x0800694c
 80006b8:	20004018 	.word	0x20004018

080006bc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  uint8_t first_run = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	75fb      	strb	r3, [r7, #23]





	if(first_run) {
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00e      	beq.n	80006ec <StartDefaultTask+0x30>
		motorMessage.motorCommand = HOME;
 80006ce:	2301      	movs	r3, #1
 80006d0:	723b      	strb	r3, [r7, #8]
		motorMessage.steps = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <StartDefaultTask+0x38>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	f107 0108 	add.w	r1, r7, #8
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	f004 fb3b 	bl	8004d5c <xQueueGenericSend>
 80006e6:	6138      	str	r0, [r7, #16]

		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}
		first_run = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
  	  }

      osDelay(50);
 80006ec:	2032      	movs	r0, #50	; 0x32
 80006ee:	f004 f9a6 	bl	8004a3e <osDelay>
	if(first_run) {
 80006f2:	e7e9      	b.n	80006c8 <StartDefaultTask+0xc>
 80006f4:	2000401c 	.word	0x2000401c

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <MX_GPIO_Init+0x128>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <MX_GPIO_Init+0x128>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <MX_GPIO_Init+0x128>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <MX_GPIO_Init+0x128>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <MX_GPIO_Init+0x128>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <MX_GPIO_Init+0x128>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <MX_GPIO_Init+0x128>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0x128>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <MX_GPIO_Init+0x128>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0x128>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <MX_GPIO_Init+0x12c>)
 8000786:	f001 fc03 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	4825      	ldr	r0, [pc, #148]	; (8000828 <MX_GPIO_Init+0x130>)
 8000792:	f001 fbfd 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_PWR_Pin|MOTOR_CS_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7140 	mov.w	r1, #768	; 0x300
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <MX_GPIO_Init+0x134>)
 800079e:	f001 fbf7 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_GPIO_Init+0x138>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	481c      	ldr	r0, [pc, #112]	; (8000828 <MX_GPIO_Init+0x130>)
 80007b8:	f001 fa68 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 80007bc:	f44f 7304 	mov.w	r3, #528	; 0x210
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <MX_GPIO_Init+0x12c>)
 80007d6:	f001 fa59 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 80007da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_GPIO_Init+0x130>)
 80007f4:	f001 fa4a 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TMC_PWR_Pin|MOTOR_CS_Pin;
 80007f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_GPIO_Init+0x134>)
 8000812:	f001 fa3b 	bl	8001c8c <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800
 800082c:	40020400 	.word	0x40020400
 8000830:	10210000 	.word	0x10210000

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fe80 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f818 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f7ff ff5a 	bl	80006f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000844:	f000 f94e 	bl	8000ae4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000848:	f000 fddc 	bl	8001404 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800084c:	f7ff fe48 	bl	80004e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000850:	f000 faae 	bl	8000db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000854:	f000 fb50 	bl	8000ef8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  enable_motor_driver();
 8000858:	f000 f88c 	bl	8000974 <enable_motor_driver>
  tmc_init();
 800085c:	f000 fd68 	bl	8001330 <tmc_init>

  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000860:	2003      	movs	r0, #3
 8000862:	f001 f9de 	bl	8001c22 <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000866:	f7ff feeb 	bl	8000640 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800086a:	f004 f895 	bl	8004998 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0x3a>

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f006 f835 	bl	80068ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <SystemClock_Config+0xd0>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <SystemClock_Config+0xd0>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <SystemClock_Config+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <SystemClock_Config+0xd4>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	2310      	movs	r3, #16
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008e4:	2310      	movs	r3, #16
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ee:	2304      	movs	r3, #4
 80008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f2:	2307      	movs	r3, #7
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fb62 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000906:	f000 f831 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fdbc 	bl	80024a4 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000932:	f000 f81b 	bl	800096c <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 fe11 	bl	8001580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40000c00 	.word	0x40000c00

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x4>
	...

08000974 <enable_motor_driver>:

//extern QueueHandle_t xMotorQueue;

QueueHandle_t xMotorQueue;

void enable_motor_driver(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2110      	movs	r1, #16
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <enable_motor_driver+0x14>)
 800097e:	f001 fb07 	bl	8001f90 <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000

0800098c <set_motor_dir>:
void disable_motor_driver(void) {
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
}


void set_motor_dir(uint8_t motor_dir) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	if(motor_dir == 0) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d106      	bne.n	80009aa <set_motor_dir+0x1e>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <set_motor_dir+0x34>)
 80009a4:	f001 faf4 	bl	8001f90 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
	}
}
 80009a8:	e005      	b.n	80009b6 <set_motor_dir+0x2a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <set_motor_dir+0x34>)
 80009b2:	f001 faed 	bl	8001f90 <HAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000

080009c4 <send_motor_steps>:

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim1, step_count);
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <send_motor_steps+0x58>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <send_motor_steps+0x58>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <send_motor_steps+0x58>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68da      	ldr	r2, [r3, #12]
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <send_motor_steps+0x58>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f042 0201 	orr.w	r2, r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009ec:	2100      	movs	r1, #0
 80009ee:	480b      	ldr	r0, [pc, #44]	; (8000a1c <send_motor_steps+0x58>)
 80009f0:	f002 fac0 	bl	8002f74 <HAL_TIM_OC_Start_IT>

	__HAL_TIM_SET_AUTORELOAD(&htim2,delay_in_us);
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <send_motor_steps+0x5c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fc:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <send_motor_steps+0x5c>)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <send_motor_steps+0x5c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2264      	movs	r2, #100	; 0x64
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <send_motor_steps+0x5c>)
 8000a0e:	f002 fbed 	bl	80031ec <HAL_TIM_PWM_Start>

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200040b8 	.word	0x200040b8
 8000a20:	200040f8 	.word	0x200040f8

08000a24 <StartMotorTask>:


void StartMotorTask(void const *argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	motorMessage_t motorMessage;
	BaseType_t xStatus;
	uint8_t homing = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t current_position_in_steps = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t target_position_in_steps = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]

	for(;;)
	  {


		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <StartMotorTask+0xbc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fb62 	bl	8005108 <uxQueueMessagesWaiting>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d014      	beq.n	8000a74 <StartMotorTask+0x50>
			xStatus = xQueueReceive(xMotorQueue, &motorMessage, 0);
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <StartMotorTask+0xbc>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 fa7b 	bl	8004f50 <xQueueReceive>
 8000a5a:	61f8      	str	r0, [r7, #28]
			if (xStatus == pdPASS) {
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d108      	bne.n	8000a74 <StartMotorTask+0x50>

				switch (motorMessage.motorCommand) {
 8000a62:	7b3b      	ldrb	r3, [r7, #12]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <StartMotorTask+0x50>
					case (HOME):
						target_position_in_steps = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
						homing = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
 8000a72:	bf00      	nop
			} else {
				//todo: error handling
			}
		}

		if(homing) {
 8000a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02c      	beq.n	8000ad6 <StartMotorTask+0xb2>
			  set_motor_dir(0);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ff85 	bl	800098c <set_motor_dir>
			  uint32_t wait = 20000;
 8000a82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a86:	61bb      	str	r3, [r7, #24]
			  uint32_t at_home_position = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28


			  uint8_t status = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	75fb      	strb	r3, [r7, #23]


			  while(homing) {
 8000a90:	e01d      	b.n	8000ace <StartMotorTask+0xaa>
				  if(!at_home_position) {
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d115      	bne.n	8000ac4 <StartMotorTask+0xa0>
					  send_motor_steps(400,wait);
 8000a98:	69b9      	ldr	r1, [r7, #24]
 8000a9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a9e:	f7ff ff91 	bl	80009c4 <send_motor_steps>
					  HAL_Delay(25); //wait for motor to settle before checking the stall result
 8000aa2:	2019      	movs	r0, #25
 8000aa4:	f000 fd8c 	bl	80015c0 <HAL_Delay>

					  status = tmc_get_status();
 8000aa8:	f000 fb5c 	bl	8001164 <tmc_get_status>
 8000aac:	4603      	mov	r3, r0
 8000aae:	75fb      	strb	r3, [r7, #23]
					  if((status >> 2) & 0x01) { //if stall is detected
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <StartMotorTask+0xaa>
						  at_home_position = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e004      	b.n	8000ace <StartMotorTask+0xaa>
					  }



				  } else {
					  homing = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  current_position_in_steps = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
			  while(homing) {
 8000ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1dd      	bne.n	8000a92 <StartMotorTask+0x6e>





	    osDelay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f003 ffb1 	bl	8004a3e <osDelay>
		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000adc:	e7ad      	b.n	8000a3a <StartMotorTask+0x16>
 8000ade:	bf00      	nop
 8000ae0:	2000401c 	.word	0x2000401c

08000ae4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000aea:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <MX_SPI1_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b18:	2238      	movs	r2, #56	; 0x38
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b30:	220a      	movs	r2, #10
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b36:	f001 fed9 	bl	80028ec <HAL_SPI_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b40:	f7ff ff14 	bl	800096c <Error_Handler>
  }

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20004020 	.word	0x20004020
 8000b4c:	40013000 	.word	0x40013000

08000b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_SPI_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23e0      	movs	r3, #224	; 0xe0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000bc6:	f001 f861 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_MspInit+0x54>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <HAL_MspInit+0x54>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x54>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_MspInit+0x54>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_MspInit+0x54>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_MspInit+0x54>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210f      	movs	r1, #15
 8000c22:	f06f 0001 	mvn.w	r0, #1
 8000c26:	f001 f807 	bl	8001c38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2032      	movs	r0, #50	; 0x32
 8000c4e:	f000 fff3 	bl	8001c38 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000c52:	2032      	movs	r0, #50	; 0x32
 8000c54:	f001 f80c 	bl	8001c70 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_InitTick+0xa4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <HAL_InitTick+0xa4>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_InitTick+0xa4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 0210 	add.w	r2, r7, #16
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fe02 	bl	8002888 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c84:	f001 fdd8 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <HAL_InitTick+0xa8>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_InitTick+0xac>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_InitTick+0xb0>)
 8000ca0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_InitTick+0xac>)
 8000ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cbe:	f002 f8d5 	bl	8002e6c <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cca:	f002 f8fa 	bl	8002ec2 <HAL_TIM_Base_Start_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20004078 	.word	0x20004078
 8000ce8:	40000c00 	.word	0x40000c00

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000d24:	2108      	movs	r1, #8
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000d28:	f002 fa92 	bl	8003250 <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000d2e:	f002 fadb 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
        HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d32:	2100      	movs	r1, #0
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000d36:	f002 f995 	bl	8003064 <HAL_TIM_OC_Stop_IT>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200040f8 	.word	0x200040f8
 8000d44:	200040b8 	.word	0x200040b8

08000d48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d4e:	f002 facb 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200040b8 	.word	0x200040b8

08000d5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM1_CC_IRQHandler+0x10>)
 8000d62:	f002 fac1 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 // HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200040b8 	.word	0x200040b8

08000d70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM5_IRQHandler+0x10>)
 8000d76:	f002 fab7 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20004078 	.word	0x20004078

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <SystemInit+0x28>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <SystemInit+0x28>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SystemInit+0x28>)
 8000d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b096      	sub	sp, #88	; 0x58
 8000db4:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000db6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2220      	movs	r2, #32
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 fd7f 	bl	80068ee <memset>

  htim1.Instance = TIM1;
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <MX_TIM1_Init+0x144>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e1c:	f002 f826 	bl	8002e6c <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e26:	f7ff fda1 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e2a:	4831      	ldr	r0, [pc, #196]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e2c:	f002 f86d 	bl	8002f0a <HAL_TIM_OC_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e36:	f7ff fd99 	bl	800096c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000e3e:	2370      	movs	r3, #112	; 0x70
 8000e40:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000e42:	2300      	movs	r3, #0
 8000e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	653b      	str	r3, [r7, #80]	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e52:	4619      	mov	r1, r3
 8000e54:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e56:	f002 fd2c 	bl	80038b2 <HAL_TIM_SlaveConfigSynchro>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000e60:	f7ff fd84 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e70:	4619      	mov	r1, r3
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000e74:	f003 f8da 	bl	800402c <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000e7e:	f7ff fd75 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000ea8:	f002 fb26 	bl	80034f8 <HAL_TIM_OC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000eb2:	f7ff fd5b 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM1_Init+0x140>)
 8000eda:	f003 f915 	bl	8004108 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000ee4:	f7ff fd42 	bl	800096c <Error_Handler>
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3758      	adds	r7, #88	; 0x58
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200040b8 	.word	0x200040b8
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	; 0x38
 8000efc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f3e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f50:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f52:	f001 ff8b 	bl	8002e6c <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f5c:	f7ff fd06 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f6e:	f002 fbe9 	bl	8003744 <HAL_TIM_ConfigClockSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f78:	f7ff fcf8 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f7c:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f7e:	f002 f8ff 	bl	8003180 <HAL_TIM_PWM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f88:	f7ff fcf0 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f9c:	f003 f846 	bl	800402c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000fa6:	f7ff fce1 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000faa:	2360      	movs	r3, #96	; 0x60
 8000fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8000fae:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000fc4:	f002 faf8 	bl	80035b8 <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fce:	f7ff fccd 	bl	800096c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM2_Init+0xe8>)
 8000fd4:	f000 f87a 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3738      	adds	r7, #56	; 0x38
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200040f8 	.word	0x200040f8

08000fe4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <HAL_TIM_Base_MspInit+0xdc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d145      	bne.n	8001092 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001050:	2301      	movs	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	481b      	ldr	r0, [pc, #108]	; (80010c8 <HAL_TIM_Base_MspInit+0xe4>)
 800105c:	f000 fe16 	bl	8001c8c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2105      	movs	r1, #5
 8001064:	2019      	movs	r0, #25
 8001066:	f000 fde7 	bl	8001c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800106a:	2019      	movs	r0, #25
 800106c:	f000 fe00 	bl	8001c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2105      	movs	r1, #5
 8001074:	201a      	movs	r0, #26
 8001076:	f000 fddf 	bl	8001c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800107a:	201a      	movs	r0, #26
 800107c:	f000 fdf8 	bl	8001c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2105      	movs	r1, #5
 8001084:	201b      	movs	r0, #27
 8001086:	f000 fdd7 	bl	8001c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800108a:	201b      	movs	r0, #27
 800108c:	f000 fdf0 	bl	8001c70 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001090:	e012      	b.n	80010b8 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800109a:	d10d      	bne.n	80010b8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_TIM_Base_MspInit+0xe0>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ec:	d11e      	bne.n	800112c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_TIM_MspPostInit+0x68>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_TIM_MspPostInit+0x68>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_TIM_MspPostInit+0x68>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <HAL_TIM_MspPostInit+0x6c>)
 8001128:	f000 fdb0 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <tmc_enable_stallguard>:
#include "cmsis_os.h"
#include "spi.h"
#include "gpio.h"


uint32_t tmc_enable_stallguard(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint32_t reg_data = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
	int8_t sgt = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	70fb      	strb	r3, [r7, #3]


	reg_data = 0x01060000; //sgt = 64, filt = 1;
 800114a:	f04f 7383 	mov.w	r3, #17170432	; 0x1060000
 800114e:	607b      	str	r3, [r7, #4]

	tmc_readwrite_register(TMC_REG_COOLCONF, reg_data, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	206d      	movs	r0, #109	; 0x6d
 8001156:	f000 f859 	bl	800120c <tmc_readwrite_register>




	return 0;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <tmc_get_status>:


uint8_t tmc_get_status() {
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af02      	add	r7, sp, #8
		uint8_t rx_data[5];
		uint8_t tx_data[5];
		uint32_t payload =0;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
		uint8_t status = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	76fb      	strb	r3, [r7, #27]
		uint8_t send_count = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	76bb      	strb	r3, [r7, #26]

		uint8_t addr = TMC_REG_GSTAT;
 8001176:	2301      	movs	r3, #1
 8001178:	767b      	strb	r3, [r7, #25]
		uint32_t data = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]


		tx_data[0] = addr;
 800117e:	7e7b      	ldrb	r3, [r7, #25]
 8001180:	713b      	strb	r3, [r7, #4]
		tx_data[1] = (data >> 24) & 0x00ff;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	0e1b      	lsrs	r3, r3, #24
 8001186:	b2db      	uxtb	r3, r3
 8001188:	717b      	strb	r3, [r7, #5]
		tx_data[2] = (data >> 16) & 0x00ff;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	0c1b      	lsrs	r3, r3, #16
 800118e:	b2db      	uxtb	r3, r3
 8001190:	71bb      	strb	r3, [r7, #6]
		tx_data[3] = (data >> 8)  & 0x00ff;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b2db      	uxtb	r3, r3
 8001198:	71fb      	strb	r3, [r7, #7]
		tx_data[4] = (data)	      & 0x00ff;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	723b      	strb	r3, [r7, #8]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011a0:	bf00      	nop
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <tmc_get_status+0xa0>)
 80011a4:	f001 fda8 	bl	8002cf8 <HAL_SPI_GetState>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d1f9      	bne.n	80011a2 <tmc_get_status+0x3e>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <tmc_get_status+0xa4>)
 80011b6:	f000 feeb 	bl	8001f90 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011ba:	bf00      	nop
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <tmc_get_status+0xa0>)
 80011be:	f001 fd9b 	bl	8002cf8 <HAL_SPI_GetState>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d1f9      	bne.n	80011bc <tmc_get_status+0x58>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	1d39      	adds	r1, r7, #4
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2305      	movs	r3, #5
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <tmc_get_status+0xa0>)
 80011d8:	f001 fbec 	bl	80029b4 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011dc:	bf00      	nop
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <tmc_get_status+0xa0>)
 80011e0:	f001 fd8a 	bl	8002cf8 <HAL_SPI_GetState>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d1f9      	bne.n	80011de <tmc_get_status+0x7a>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <tmc_get_status+0xa4>)
 80011f2:	f000 fecd 	bl	8001f90 <HAL_GPIO_WritePin>





		status = rx_data[0];
 80011f6:	7b3b      	ldrb	r3, [r7, #12]
 80011f8:	76fb      	strb	r3, [r7, #27]

		return status;
 80011fa:	7efb      	ldrb	r3, [r7, #27]




}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20004020 	.word	0x20004020
 8001208:	40020400 	.word	0x40020400

0800120c <tmc_readwrite_register>:

uint32_t tmc_readwrite_register(uint8_t addr, uint32_t data, uint8_t set_write_flag) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_data[5];
	uint8_t tx_data[5];
	uint32_t payload =0;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
	uint8_t send_count = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	77fb      	strb	r3, [r7, #31]


	if(set_write_flag) {
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <tmc_readwrite_register+0x2a>
		addr |= 0x80;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001230:	71fb      	strb	r3, [r7, #7]
		send_count = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	77fb      	strb	r3, [r7, #31]

	}

	//send twice according to TMC2130 datasheet
	for (uint8_t i = 0; i < send_count; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	77bb      	strb	r3, [r7, #30]
 800123a:	e03f      	b.n	80012bc <tmc_readwrite_register+0xb0>

		tx_data[0] = addr;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	723b      	strb	r3, [r7, #8]
		tx_data[1] = (data >> 24) & 0x00ff;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	0e1b      	lsrs	r3, r3, #24
 8001244:	b2db      	uxtb	r3, r3
 8001246:	727b      	strb	r3, [r7, #9]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	b2db      	uxtb	r3, r3
 800124e:	72bb      	strb	r3, [r7, #10]
		tx_data[3] = (data >> 8)  & 0x00ff;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = (data)	      & 0x00ff;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	733b      	strb	r3, [r7, #12]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800125e:	bf00      	nop
 8001260:	4820      	ldr	r0, [pc, #128]	; (80012e4 <tmc_readwrite_register+0xd8>)
 8001262:	f001 fd49 	bl	8002cf8 <HAL_SPI_GetState>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d1f9      	bne.n	8001260 <tmc_readwrite_register+0x54>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <tmc_readwrite_register+0xdc>)
 8001274:	f000 fe8c 	bl	8001f90 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001278:	bf00      	nop
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <tmc_readwrite_register+0xd8>)
 800127c:	f001 fd3c 	bl	8002cf8 <HAL_SPI_GetState>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d1f9      	bne.n	800127a <tmc_readwrite_register+0x6e>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001286:	f107 0210 	add.w	r2, r7, #16
 800128a:	f107 0108 	add.w	r1, r7, #8
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2305      	movs	r3, #5
 8001296:	4813      	ldr	r0, [pc, #76]	; (80012e4 <tmc_readwrite_register+0xd8>)
 8001298:	f001 fb8c 	bl	80029b4 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800129c:	bf00      	nop
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <tmc_readwrite_register+0xd8>)
 80012a0:	f001 fd2a 	bl	8002cf8 <HAL_SPI_GetState>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1f9      	bne.n	800129e <tmc_readwrite_register+0x92>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <tmc_readwrite_register+0xdc>)
 80012b2:	f000 fe6d 	bl	8001f90 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < send_count; i++) {
 80012b6:	7fbb      	ldrb	r3, [r7, #30]
 80012b8:	3301      	adds	r3, #1
 80012ba:	77bb      	strb	r3, [r7, #30]
 80012bc:	7fba      	ldrb	r2, [r7, #30]
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3bb      	bcc.n	800123c <tmc_readwrite_register+0x30>



	}

	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80012c4:	7c7b      	ldrb	r3, [r7, #17]
 80012c6:	061a      	lsls	r2, r3, #24
 80012c8:	7cbb      	ldrb	r3, [r7, #18]
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	441a      	add	r2, r3
			+ (rx_data[3] << 8 ) +  rx_data[4];
 80012ce:	7cfb      	ldrb	r3, [r7, #19]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	4413      	add	r3, r2
 80012d4:	7d3a      	ldrb	r2, [r7, #20]
 80012d6:	4413      	add	r3, r2
	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80012d8:	61bb      	str	r3, [r7, #24]


	return payload;
 80012da:	69bb      	ldr	r3, [r7, #24]


}
 80012dc:	4618      	mov	r0, r3
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20004020 	.word	0x20004020
 80012e8:	40020400 	.word	0x40020400

080012ec <tmc_set_motor_current>:

/* ihold: 		hold current. 5 bits.  0 = 1/32, 31=32/32
 * irun:  		run current.  5 bits.  0 = 1/32, 31=32/32
 * iholddelay: 	number of clock cycles to power down. 4 bits. Delay is 2^18*iholddelay clocks periods.
 */
void tmc_set_motor_current(uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	460b      	mov	r3, r1
 80012f8:	71bb      	strb	r3, [r7, #6]
 80012fa:	4613      	mov	r3, r2
 80012fc:	717b      	strb	r3, [r7, #5]
	uint32_t reg_data = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]

	reg_data = (ihold & 0x1F)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
			+  ((irun & 0x1F) << 8)
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001310:	431a      	orrs	r2, r3
			+  ((iholddelay & 0x0F) << 16);
 8001312:	797b      	ldrb	r3, [r7, #5]
 8001314:	041b      	lsls	r3, r3, #16
 8001316:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800131a:	4413      	add	r3, r2
	reg_data = (ihold & 0x1F)
 800131c:	60fb      	str	r3, [r7, #12]

	tmc_readwrite_register(TMC_REG_IHOLD_IRUN, reg_data, 1);
 800131e:	2201      	movs	r2, #1
 8001320:	68f9      	ldr	r1, [r7, #12]
 8001322:	2010      	movs	r0, #16
 8001324:	f7ff ff72 	bl	800120c <tmc_readwrite_register>

	return;
 8001328:	bf00      	nop
}
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <tmc_init>:

/*initializes the TMC2130 driver for StealthChop operation with current appropriate for loop antenna
 *
 */
void tmc_init(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af02      	add	r7, sp, #8

	uint8_t rx_data[2] = {0,0};
 8001336:	2300      	movs	r3, #0
 8001338:	713b      	strb	r3, [r7, #4]
 800133a:	2300      	movs	r3, #0
 800133c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[2] = {0,0};
 800133e:	2300      	movs	r3, #0
 8001340:	703b      	strb	r3, [r7, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	4829      	ldr	r0, [pc, #164]	; (80013f4 <tmc_init+0xc4>)
 800134e:	f000 fe1f 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 f934 	bl	80015c0 <HAL_Delay>

	//Power cycle the TMC2130
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135e:	4825      	ldr	r0, [pc, #148]	; (80013f4 <tmc_init+0xc4>)
 8001360:	f000 fe16 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f000 f92b 	bl	80015c0 <HAL_Delay>
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001370:	4820      	ldr	r0, [pc, #128]	; (80013f4 <tmc_init+0xc4>)
 8001372:	f000 fe0d 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f000 f922 	bl	80015c0 <HAL_Delay>

	//write 16 bits out of SPI interface (without clearing CS pin) to set sck polarity correct.
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800137c:	bf00      	nop
 800137e:	481e      	ldr	r0, [pc, #120]	; (80013f8 <tmc_init+0xc8>)
 8001380:	f001 fcba 	bl	8002cf8 <HAL_SPI_GetState>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d1f9      	bne.n	800137e <tmc_init+0x4e>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 800138a:	1d3a      	adds	r2, r7, #4
 800138c:	4639      	mov	r1, r7
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <tmc_init+0xc8>)
 8001398:	f001 fb0c 	bl	80029b4 <HAL_SPI_TransmitReceive>

	//clear the status register by reading it
	tmc_readwrite_register(TMC_REG_GSTAT, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff33 	bl	800120c <tmc_readwrite_register>

	//TOFF=4, TBL=2, HSTRT=4. HEND=0
	tmc_readwrite_register(TMC_REG_CHOPCONF, 0x5010044, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	4914      	ldr	r1, [pc, #80]	; (80013fc <tmc_init+0xcc>)
 80013aa:	206c      	movs	r0, #108	; 0x6c
 80013ac:	f7ff ff2e 	bl	800120c <tmc_readwrite_register>

	//IHOLD_IRUN: IHOLD=10, IRUN=31 (max. current), IHOLDDELAY=6
	tmc_set_motor_current(3, 10, 10);
 80013b0:	220a      	movs	r2, #10
 80013b2:	210a      	movs	r1, #10
 80013b4:	2003      	movs	r0, #3
 80013b6:	f7ff ff99 	bl	80012ec <tmc_set_motor_current>

	//approx 1 second to fully power down the motor after motion stops
	tmc_readwrite_register(TMC_REG_TPOWERDOWN, 0x40, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	2011      	movs	r0, #17
 80013c0:	f7ff ff24 	bl	800120c <tmc_readwrite_register>

	//en_pwm_mode = 1, DIAG1 set to indicate stall, push-pull active high
	tmc_readwrite_register(TMC_REG_GCONF, 0x2104, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f242 1104 	movw	r1, #8452	; 0x2104
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff1e 	bl	800120c <tmc_readwrite_register>

	//enable stallguard and set sensitvity
	tmc_enable_stallguard();
 80013d0:	f7ff feb4 	bl	800113c <tmc_enable_stallguard>

	//switching velocity = 35000
	tmc_readwrite_register(TMC_REG_TPWMTHRS, 0x1F4, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013da:	2013      	movs	r0, #19
 80013dc:	f7ff ff16 	bl	800120c <tmc_readwrite_register>

	//approx pwm_autoscale = 1, PWM_GRAD = 1, PWM_AMPL=255
	tmc_readwrite_register(TMC_REG_PWM_CONF, 0x401C8, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	4907      	ldr	r1, [pc, #28]	; (8001400 <tmc_init+0xd0>)
 80013e4:	2070      	movs	r0, #112	; 0x70
 80013e6:	f7ff ff11 	bl	800120c <tmc_readwrite_register>

	return;
 80013ea:	bf00      	nop
}
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020400 	.word	0x40020400
 80013f8:	20004020 	.word	0x20004020
 80013fc:	05010044 	.word	0x05010044
 8001400:	000401c8 	.word	0x000401c8

08001404 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_USART2_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USART2_UART_Init+0x4c>)
 800143c:	f002 feca 	bl	80041d4 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f7ff fa91 	bl	800096c <Error_Handler>
  }

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20004138 	.word	0x20004138
 8001454:	40004400 	.word	0x40004400

08001458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_UART_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0x88>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_UART_MspInit+0x88>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_UART_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 80014ce:	f000 fbdd 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ee:	e003      	b.n	80014f8 <LoopCopyDataInit>

080014f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014f6:	3104      	adds	r1, #4

080014f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001500:	d3f6      	bcc.n	80014f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001504:	e002      	b.n	800150c <LoopFillZerobss>

08001506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001508:	f842 3b04 	str.w	r3, [r2], #4

0800150c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001510:	d3f9      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001512:	f7ff fc37 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f005 f9bb 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f98b 	bl	8000834 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001524:	08006998 	.word	0x08006998
  ldr  r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800152c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001530:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001534:	2000417c 	.word	0x2000417c

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 fb5c 	bl	8001c22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fb64 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fb36 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20004178 	.word	0x20004178

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20004178 	.word	0x20004178

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_Delay+0x40>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffde 	bl	80015a8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000008 	.word	0x20000008

08001604 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e033      	b.n	8001682 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ffae 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d118      	bne.n	8001674 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164a:	f023 0302 	bic.w	r3, r3, #2
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f93a 	bl	80018d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
 8001672:	e001      	b.n	8001678 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1c>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e105      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x228>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d925      	bls.n	8001704 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68d9      	ldr	r1, [r3, #12]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68d9      	ldr	r1, [r3, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4403      	add	r3, r0
 80016f6:	3b1e      	subs	r3, #30
 80016f8:	409a      	lsls	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	e022      	b.n	800174a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6919      	ldr	r1, [r3, #16]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	4603      	mov	r3, r0
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4403      	add	r3, r0
 8001740:	409a      	lsls	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b06      	cmp	r3, #6
 8001750:	d824      	bhi.n	800179c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b05      	subs	r3, #5
 8001764:	221f      	movs	r2, #31
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	400a      	ands	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b05      	subs	r3, #5
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
 800179a:	e04c      	b.n	8001836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d824      	bhi.n	80017ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b23      	subs	r3, #35	; 0x23
 80017b6:	221f      	movs	r2, #31
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43da      	mvns	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	400a      	ands	r2, r1
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b23      	subs	r3, #35	; 0x23
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	e023      	b.n	8001836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b41      	subs	r3, #65	; 0x41
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b41      	subs	r3, #65	; 0x41
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_ADC_ConfigChannel+0x234>)
 8001838:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <HAL_ADC_ConfigChannel+0x238>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d109      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1cc>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b12      	cmp	r3, #18
 800184a:	d105      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_ADC_ConfigChannel+0x238>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d123      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d003      	beq.n	8001872 <HAL_ADC_ConfigChannel+0x1e6>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b11      	cmp	r3, #17
 8001870:	d11b      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d111      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_ADC_ConfigChannel+0x240>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9a      	lsrs	r2, r3, #18
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40012300 	.word	0x40012300
 80018c4:	40012000 	.word	0x40012000
 80018c8:	20000000 	.word	0x20000000
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d8:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <ADC_Init+0x1f0>)
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	021a      	lsls	r2, r3, #8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <ADC_Init+0x1f4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d022      	beq.n	80019ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001976:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e00f      	b.n	80019ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0202 	bic.w	r2, r2, #2
 80019dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e1b      	ldrb	r3, [r3, #24]
 80019e8:	005a      	lsls	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01b      	beq.n	8001a34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	3b01      	subs	r3, #1
 8001a28:	035a      	lsls	r2, r3, #13
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	e007      	b.n	8001a44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	051a      	lsls	r2, r3, #20
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a86:	025a      	lsls	r2, r3, #9
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	029a      	lsls	r2, r3, #10
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40012300 	.word	0x40012300
 8001ac4:	0f000001 	.word	0x0f000001

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff4c 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4a:	f7ff ff61 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	6978      	ldr	r0, [r7, #20]
 8001c56:	f7ff ffb1 	bl	8001bbc <NVIC_EncodePriority>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff80 	bl	8001b68 <__NVIC_SetPriority>
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff54 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e159      	b.n	8001f5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8148 	bne.w	8001f56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cda:	2b11      	cmp	r3, #17
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0xfc>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a2 	beq.w	8001f56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <HAL_GPIO_Init+0x2e4>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a55      	ldr	r2, [pc, #340]	; (8001f70 <HAL_GPIO_Init+0x2e4>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_GPIO_Init+0x2e4>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a51      	ldr	r2, [pc, #324]	; (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_GPIO_Init+0x2ec>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x202>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_GPIO_Init+0x2f0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x1fe>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <HAL_GPIO_Init+0x2f4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a45      	ldr	r2, [pc, #276]	; (8001f84 <HAL_GPIO_Init+0x2f8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x1f6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a44      	ldr	r2, [pc, #272]	; (8001f88 <HAL_GPIO_Init+0x2fc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x1f2>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea0:	4934      	ldr	r1, [pc, #208]	; (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f aea2 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	3724      	adds	r7, #36	; 0x24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e25b      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d075      	beq.n	80020ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fe2:	4ba3      	ldr	r3, [pc, #652]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d00c      	beq.n	8002008 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4ba0      	ldr	r3, [pc, #640]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d112      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffa:	4b9d      	ldr	r3, [pc, #628]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b99      	ldr	r3, [pc, #612]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d05b      	beq.n	80020cc <HAL_RCC_OscConfig+0x108>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d157      	bne.n	80020cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e236      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x74>
 800202a:	4b91      	ldr	r3, [pc, #580]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a90      	ldr	r2, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a8a      	ldr	r2, [pc, #552]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a87      	ldr	r2, [pc, #540]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 800205c:	4b84      	ldr	r3, [pc, #528]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a83      	ldr	r2, [pc, #524]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b81      	ldr	r3, [pc, #516]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a80      	ldr	r2, [pc, #512]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fa94 	bl	80015a8 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fa90 	bl	80015a8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1fb      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xc0>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fa80 	bl	80015a8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fa7c 	bl	80015a8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1e7      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0xe8>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d063      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020da:	4b65      	ldr	r3, [pc, #404]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b62      	ldr	r3, [pc, #392]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d11c      	bne.n	800212c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x152>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1bb      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4952      	ldr	r1, [pc, #328]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	e03a      	b.n	80021a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	4b4f      	ldr	r3, [pc, #316]	; (8002274 <HAL_RCC_OscConfig+0x2b0>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff fa35 	bl	80015a8 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002142:	f7ff fa31 	bl	80015a8 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e19c      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b43      	ldr	r3, [pc, #268]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4940      	ldr	r1, [pc, #256]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002176:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <HAL_RCC_OscConfig+0x2b0>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff fa14 	bl	80015a8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002184:	f7ff fa10 	bl	80015a8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e17b      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d030      	beq.n	8002210 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9f4 	bl	80015a8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff f9f0 	bl	80015a8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e15b      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x200>
 80021e2:	e015      	b.n	8002210 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff f9dd 	bl	80015a8 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f2:	f7ff f9d9 	bl	80015a8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e144      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a0 	beq.w	800235e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_OscConfig+0x2b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d121      	bne.n	800229e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_RCC_OscConfig+0x2b8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_RCC_OscConfig+0x2b8>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7ff f99f 	bl	80015a8 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e011      	b.n	8002292 <HAL_RCC_OscConfig+0x2ce>
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	42470000 	.word	0x42470000
 8002278:	42470e80 	.word	0x42470e80
 800227c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002280:	f7ff f992 	bl	80015a8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0fd      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d106      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
 80022a6:	4b7d      	ldr	r3, [pc, #500]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a7c      	ldr	r2, [pc, #496]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
 80022b2:	e01c      	b.n	80022ee <HAL_RCC_OscConfig+0x32a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x312>
 80022bc:	4b77      	ldr	r3, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a76      	ldr	r2, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	4b74      	ldr	r3, [pc, #464]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
 80022d4:	e00b      	b.n	80022ee <HAL_RCC_OscConfig+0x32a>
 80022d6:	4b71      	ldr	r3, [pc, #452]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	4a70      	ldr	r2, [pc, #448]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	6713      	str	r3, [r2, #112]	; 0x70
 80022e2:	4b6e      	ldr	r3, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a6d      	ldr	r2, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80022e8:	f023 0304 	bic.w	r3, r3, #4
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d015      	beq.n	8002322 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7ff f957 	bl	80015a8 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7ff f953 	bl	80015a8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	; 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0bc      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ee      	beq.n	80022fe <HAL_RCC_OscConfig+0x33a>
 8002320:	e014      	b.n	800234c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7ff f941 	bl	80015a8 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7ff f93d 	bl	80015a8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0a6      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	4b56      	ldr	r3, [pc, #344]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ee      	bne.n	800232a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d105      	bne.n	800235e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002352:	4b52      	ldr	r3, [pc, #328]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a51      	ldr	r2, [pc, #324]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 8002358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8092 	beq.w	800248c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d05c      	beq.n	800242e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d141      	bne.n	8002400 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <HAL_RCC_OscConfig+0x4dc>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7ff f911 	bl	80015a8 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7ff f90d 	bl	80015a8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e078      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	4933      	ldr	r1, [pc, #204]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x4dc>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff f8e6 	bl	80015a8 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff f8e2 	bl	80015a8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e04d      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x41c>
 80023fe:	e045      	b.n	800248c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x4dc>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff f8cf 	bl	80015a8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240e:	f7ff f8cb 	bl	80015a8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e036      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x44a>
 800242c:	e02e      	b.n	800248c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e029      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCC_OscConfig+0x4d8>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	429a      	cmp	r2, r3
 800244c:	d11c      	bne.n	8002488 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d115      	bne.n	8002488 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002468:	4293      	cmp	r3, r2
 800246a:	d10d      	bne.n	8002488 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40007000 	.word	0x40007000
 800249c:	40023800 	.word	0x40023800
 80024a0:	42470060 	.word	0x42470060

080024a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cc      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d90c      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b65      	ldr	r3, [pc, #404]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494d      	ldr	r1, [pc, #308]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d044      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d119      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d003      	beq.n	8002562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e067      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4934      	ldr	r1, [pc, #208]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7ff f808 	bl	80015a8 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7ff f804 	bl	80015a8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e04f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d20c      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e032      	b.n	8002652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4916      	ldr	r1, [pc, #88]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f821 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800262e:	4601      	mov	r1, r0
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	fa21 f303 	lsr.w	r3, r1, r3
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe faf4 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00
 8002660:	40023800 	.word	0x40023800
 8002664:	08006970 	.word	0x08006970
 8002668:	20000000 	.word	0x20000000
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b04      	cmp	r3, #4
 8002690:	d007      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x32>
 8002692:	2b08      	cmp	r3, #8
 8002694:	d008      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x38>
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 80b4 	bne.w	8002804 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800269e:	60bb      	str	r3, [r7, #8]
       break;
 80026a0:	e0b3      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a2:	4b5e      	ldr	r3, [pc, #376]	; (800281c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026a4:	60bb      	str	r3, [r7, #8]
      break;
 80026a6:	e0b0      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b2:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04a      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b55      	ldr	r3, [pc, #340]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	f04f 0400 	mov.w	r4, #0
 80026c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	ea03 0501 	and.w	r5, r3, r1
 80026d4:	ea04 0602 	and.w	r6, r4, r2
 80026d8:	4629      	mov	r1, r5
 80026da:	4632      	mov	r2, r6
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	f04f 0400 	mov.w	r4, #0
 80026e4:	0154      	lsls	r4, r2, #5
 80026e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ea:	014b      	lsls	r3, r1, #5
 80026ec:	4619      	mov	r1, r3
 80026ee:	4622      	mov	r2, r4
 80026f0:	1b49      	subs	r1, r1, r5
 80026f2:	eb62 0206 	sbc.w	r2, r2, r6
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	f04f 0400 	mov.w	r4, #0
 80026fe:	0194      	lsls	r4, r2, #6
 8002700:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002704:	018b      	lsls	r3, r1, #6
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	eb64 0402 	sbc.w	r4, r4, r2
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	00e2      	lsls	r2, r4, #3
 8002716:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800271a:	00d9      	lsls	r1, r3, #3
 800271c:	460b      	mov	r3, r1
 800271e:	4614      	mov	r4, r2
 8002720:	195b      	adds	r3, r3, r5
 8002722:	eb44 0406 	adc.w	r4, r4, r6
 8002726:	f04f 0100 	mov.w	r1, #0
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	0262      	lsls	r2, r4, #9
 8002730:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002734:	0259      	lsls	r1, r3, #9
 8002736:	460b      	mov	r3, r1
 8002738:	4614      	mov	r4, r2
 800273a:	4618      	mov	r0, r3
 800273c:	4621      	mov	r1, r4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f04f 0400 	mov.w	r4, #0
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	f7fd fd4a 	bl	80001e0 <__aeabi_uldivmod>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e049      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	f04f 0400 	mov.w	r4, #0
 800275e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	ea03 0501 	and.w	r5, r3, r1
 800276a:	ea04 0602 	and.w	r6, r4, r2
 800276e:	4629      	mov	r1, r5
 8002770:	4632      	mov	r2, r6
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	f04f 0400 	mov.w	r4, #0
 800277a:	0154      	lsls	r4, r2, #5
 800277c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002780:	014b      	lsls	r3, r1, #5
 8002782:	4619      	mov	r1, r3
 8002784:	4622      	mov	r2, r4
 8002786:	1b49      	subs	r1, r1, r5
 8002788:	eb62 0206 	sbc.w	r2, r2, r6
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f04f 0400 	mov.w	r4, #0
 8002794:	0194      	lsls	r4, r2, #6
 8002796:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	1a5b      	subs	r3, r3, r1
 800279e:	eb64 0402 	sbc.w	r4, r4, r2
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	00e2      	lsls	r2, r4, #3
 80027ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027b0:	00d9      	lsls	r1, r3, #3
 80027b2:	460b      	mov	r3, r1
 80027b4:	4614      	mov	r4, r2
 80027b6:	195b      	adds	r3, r3, r5
 80027b8:	eb44 0406 	adc.w	r4, r4, r6
 80027bc:	f04f 0100 	mov.w	r1, #0
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	02a2      	lsls	r2, r4, #10
 80027c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027ca:	0299      	lsls	r1, r3, #10
 80027cc:	460b      	mov	r3, r1
 80027ce:	4614      	mov	r4, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	4621      	mov	r1, r4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f04f 0400 	mov.w	r4, #0
 80027da:	461a      	mov	r2, r3
 80027dc:	4623      	mov	r3, r4
 80027de:	f7fd fcff 	bl	80001e0 <__aeabi_uldivmod>
 80027e2:	4603      	mov	r3, r0
 80027e4:	460c      	mov	r4, r1
 80027e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	3301      	adds	r3, #1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	60bb      	str	r3, [r7, #8]
      break;
 8002802:	e002      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002806:	60bb      	str	r3, [r7, #8]
      break;
 8002808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280a:	68bb      	ldr	r3, [r7, #8]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4601      	mov	r1, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4a03      	ldr	r2, [pc, #12]	; (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	08006980 	.word	0x08006980

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002864:	f7ff ffdc 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002868:	4601      	mov	r1, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0b5b      	lsrs	r3, r3, #13
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4a03      	ldr	r2, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	08006980 	.word	0x08006980

08002888 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	220f      	movs	r2, #15
 8002896:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCC_GetClockConfig+0x60>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 020f 	and.w	r2, r3, #15
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40023c00 	.word	0x40023c00

080028ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e056      	b.n	80029ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fe f919 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002934:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	ea42 0103 	orr.w	r1, r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	f003 0104 	and.w	r1, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08c      	sub	sp, #48	; 0x30
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029c2:	2301      	movs	r3, #1
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_SPI_TransmitReceive+0x26>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e18a      	b.n	8002cf0 <HAL_SPI_TransmitReceive+0x33c>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e2:	f7fe fde1 	bl	80015a8 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d00f      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x70>
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a0a:	d107      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d103      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x68>
 8002a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d003      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a22:	e15b      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x82>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x82>
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a3c:	e14e      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d003      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	887a      	ldrh	r2, [r7, #2]
 8002a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d007      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aae:	d178      	bne.n	8002ba2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x10a>
 8002ab8:	8b7b      	ldrh	r3, [r7, #26]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d166      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	1c9a      	adds	r2, r3, #2
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae2:	e053      	b.n	8002b8c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d11b      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x176>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x176>
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d113      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	1c9a      	adds	r2, r3, #2
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d119      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x1b8>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d014      	beq.n	8002b6c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	b292      	uxth	r2, r2
 8002b4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	1c9a      	adds	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b6c:	f7fe fd1c 	bl	80015a8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d807      	bhi.n	8002b8c <HAL_SPI_TransmitReceive+0x1d8>
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d003      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b8a:	e0a7      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1a6      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x130>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1a1      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x130>
 8002ba0:	e07c      	b.n	8002c9c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x1fc>
 8002baa:	8b7b      	ldrh	r3, [r7, #26]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d16b      	bne.n	8002c88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd6:	e057      	b.n	8002c88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d11c      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x26c>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x26c>
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d114      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d119      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x2ae>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d014      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c62:	f7fe fca1 	bl	80015a8 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d803      	bhi.n	8002c7a <HAL_SPI_TransmitReceive+0x2c6>
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d102      	bne.n	8002c80 <HAL_SPI_TransmitReceive+0x2cc>
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c86:	e029      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1a2      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x224>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d19d      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f8a1 	bl	8002de8 <SPI_EndRxTxTransaction>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cb8:	e010      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	e000      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d06:	b2db      	uxtb	r3, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d24:	e04c      	b.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d048      	beq.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d2e:	f7fe fc3b 	bl	80015a8 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d902      	bls.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13d      	bne.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5c:	d111      	bne.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d66:	d004      	beq.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d107      	bne.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8a:	d10f      	bne.n	8002dac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002daa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e00f      	b.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d1a3      	bne.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <SPI_EndRxTxTransaction+0x7c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <SPI_EndRxTxTransaction+0x80>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0d5b      	lsrs	r3, r3, #21
 8002e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e12:	d112      	bne.n	8002e3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff ff78 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e00f      	b.n	8002e5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d0f2      	beq.n	8002e3a <SPI_EndRxTxTransaction+0x52>
 8002e54:	e000      	b.n	8002e58 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e56:	bf00      	nop
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000
 8002e68:	165e9f81 	.word	0x165e9f81

08002e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e01d      	b.n	8002eba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f8a6 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fd6c 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e01d      	b.n	8002f58 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f815 	bl	8002f60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 fd1d 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d841      	bhi.n	8003008 <HAL_TIM_OC_Start_IT+0x94>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_TIM_OC_Start_IT+0x18>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08003009 	.word	0x08003009
 8002f94:	08003009 	.word	0x08003009
 8002f98:	08003009 	.word	0x08003009
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08003009 	.word	0x08003009
 8002fa4:	08003009 	.word	0x08003009
 8002fa8:	08003009 	.word	0x08003009
 8002fac:	08002fe5 	.word	0x08002fe5
 8002fb0:	08003009 	.word	0x08003009
 8002fb4:	08003009 	.word	0x08003009
 8002fb8:	08003009 	.word	0x08003009
 8002fbc:	08002ff7 	.word	0x08002ff7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0202 	orr.w	r2, r2, #2
 8002fce:	60da      	str	r2, [r3, #12]
      break;
 8002fd0:	e01b      	b.n	800300a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0204 	orr.w	r2, r2, #4
 8002fe0:	60da      	str	r2, [r3, #12]
      break;
 8002fe2:	e012      	b.n	800300a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	60da      	str	r2, [r3, #12]
      break;
 8002ff4:	e009      	b.n	800300a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0210 	orr.w	r2, r2, #16
 8003004:	60da      	str	r2, [r3, #12]
      break;
 8003006:	e000      	b.n	800300a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003008:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 ffe4 	bl	8003fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_TIM_OC_Start_IT+0xec>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d107      	bne.n	8003032 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b06      	cmp	r3, #6
 8003042:	d007      	beq.n	8003054 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000

08003064 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d841      	bhi.n	80030f8 <HAL_TIM_OC_Stop_IT+0x94>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_TIM_OC_Stop_IT+0x18>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030f9 	.word	0x080030f9
 8003084:	080030f9 	.word	0x080030f9
 8003088:	080030f9 	.word	0x080030f9
 800308c:	080030c3 	.word	0x080030c3
 8003090:	080030f9 	.word	0x080030f9
 8003094:	080030f9 	.word	0x080030f9
 8003098:	080030f9 	.word	0x080030f9
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030f9 	.word	0x080030f9
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	080030f9 	.word	0x080030f9
 80030ac:	080030e7 	.word	0x080030e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0202 	bic.w	r2, r2, #2
 80030be:	60da      	str	r2, [r3, #12]
      break;
 80030c0:	e01b      	b.n	80030fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0204 	bic.w	r2, r2, #4
 80030d0:	60da      	str	r2, [r3, #12]
      break;
 80030d2:	e012      	b.n	80030fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0208 	bic.w	r2, r2, #8
 80030e2:	60da      	str	r2, [r3, #12]
      break;
 80030e4:	e009      	b.n	80030fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0210 	bic.w	r2, r2, #16
 80030f4:	60da      	str	r2, [r3, #12]
      break;
 80030f6:	e000      	b.n	80030fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80030f8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 ff6c 	bl	8003fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_TIM_OC_Stop_IT+0x118>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d117      	bne.n	8003142 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	f241 1311 	movw	r3, #4369	; 0x1111
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_TIM_OC_Stop_IT+0xde>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	f240 4344 	movw	r3, #1092	; 0x444
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_TIM_OC_Stop_IT+0xde>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	f241 1311 	movw	r3, #4369	; 0x1111
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_TIM_OC_Stop_IT+0x10e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	f240 4344 	movw	r3, #1092	; 0x444
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_TIM_OC_Stop_IT+0x10e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40010000 	.word	0x40010000

08003180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01d      	b.n	80031ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f815 	bl	80031d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 fbe2 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2201      	movs	r2, #1
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 feee 	bl	8003fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_TIM_PWM_Start+0x60>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d107      	bne.n	800321e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d007      	beq.n	8003240 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000

08003250 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 febc 	bl	8003fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <HAL_TIM_PWM_Stop+0x94>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d117      	bne.n	80032a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	f241 1311 	movw	r3, #4369	; 0x1111
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_TIM_PWM_Stop+0x52>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	f240 4344 	movw	r3, #1092	; 0x444
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_PWM_Stop+0x52>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_TIM_PWM_Stop+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	f240 4344 	movw	r3, #1092	; 0x444
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_PWM_Stop+0x82>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40010000 	.word	0x40010000

080032e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d122      	bne.n	8003344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d11b      	bne.n	8003344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0202 	mvn.w	r2, #2
 8003314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fb0d 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 faff 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb10 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0204 	mvn.w	r2, #4
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fae3 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fad5 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fae6 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0208 	mvn.w	r2, #8
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fab9 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 faab 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fabc 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0210 	mvn.w	r2, #16
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2208      	movs	r2, #8
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa8f 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa81 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa92 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0201 	mvn.w	r2, #1
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fa6e 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fe94 	bl	80041c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa57 	bl	8003972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0220 	mvn.w	r2, #32
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fe5e 	bl	80041ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_TIM_OC_ConfigChannel+0x1a>
 800350e:	2302      	movs	r3, #2
 8003510:	e04e      	b.n	80035b0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d839      	bhi.n	800359c <HAL_TIM_OC_ConfigChannel+0xa4>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_TIM_OC_ConfigChannel+0x38>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003565 	.word	0x08003565
 8003534:	0800359d 	.word	0x0800359d
 8003538:	0800359d 	.word	0x0800359d
 800353c:	0800359d 	.word	0x0800359d
 8003540:	08003573 	.word	0x08003573
 8003544:	0800359d 	.word	0x0800359d
 8003548:	0800359d 	.word	0x0800359d
 800354c:	0800359d 	.word	0x0800359d
 8003550:	08003581 	.word	0x08003581
 8003554:	0800359d 	.word	0x0800359d
 8003558:	0800359d 	.word	0x0800359d
 800355c:	0800359d 	.word	0x0800359d
 8003560:	0800358f 	.word	0x0800358f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fa8c 	bl	8003a88 <TIM_OC1_SetConfig>
      break;
 8003570:	e015      	b.n	800359e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 faeb 	bl	8003b54 <TIM_OC2_SetConfig>
      break;
 800357e:	e00e      	b.n	800359e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fb50 	bl	8003c2c <TIM_OC3_SetConfig>
      break;
 800358c:	e007      	b.n	800359e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fbb3 	bl	8003d00 <TIM_OC4_SetConfig>
      break;
 800359a:	e000      	b.n	800359e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800359c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0b4      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x184>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2202      	movs	r2, #2
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	f200 809f 	bhi.w	8003728 <HAL_TIM_PWM_ConfigChannel+0x170>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003625 	.word	0x08003625
 80035f4:	08003729 	.word	0x08003729
 80035f8:	08003729 	.word	0x08003729
 80035fc:	08003729 	.word	0x08003729
 8003600:	08003665 	.word	0x08003665
 8003604:	08003729 	.word	0x08003729
 8003608:	08003729 	.word	0x08003729
 800360c:	08003729 	.word	0x08003729
 8003610:	080036a7 	.word	0x080036a7
 8003614:	08003729 	.word	0x08003729
 8003618:	08003729 	.word	0x08003729
 800361c:	08003729 	.word	0x08003729
 8003620:	080036e7 	.word	0x080036e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fa2c 	bl	8003a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0208 	orr.w	r2, r2, #8
 800363e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	619a      	str	r2, [r3, #24]
      break;
 8003662:	e062      	b.n	800372a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa72 	bl	8003b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]
      break;
 80036a4:	e041      	b.n	800372a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fabd 	bl	8003c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0208 	orr.w	r2, r2, #8
 80036c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0204 	bic.w	r2, r2, #4
 80036d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
      break;
 80036e4:	e021      	b.n	800372a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fb07 	bl	8003d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	021a      	lsls	r2, r3, #8
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	61da      	str	r2, [r3, #28]
      break;
 8003726:	e000      	b.n	800372a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003728:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIM_ConfigClockSource+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e0a6      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x166>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800377a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003782:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d067      	beq.n	8003864 <HAL_TIM_ConfigClockSource+0x120>
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d80b      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x6c>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d073      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0x140>
 800379c:	2b10      	cmp	r3, #16
 800379e:	d802      	bhi.n	80037a6 <HAL_TIM_ConfigClockSource+0x62>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d06f      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037a4:	e078      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d06c      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0x140>
 80037aa:	2b30      	cmp	r3, #48	; 0x30
 80037ac:	d06a      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037ae:	e073      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037b0:	2b70      	cmp	r3, #112	; 0x70
 80037b2:	d00d      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0x8c>
 80037b4:	2b70      	cmp	r3, #112	; 0x70
 80037b6:	d804      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x7e>
 80037b8:	2b50      	cmp	r3, #80	; 0x50
 80037ba:	d033      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0xe0>
 80037bc:	2b60      	cmp	r3, #96	; 0x60
 80037be:	d041      	beq.n	8003844 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037c0:	e06a      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	d066      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x152>
 80037c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037cc:	d017      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037ce:	e063      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f000 fbde 	bl	8003fa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	609a      	str	r2, [r3, #8]
      break;
 80037fc:	e04c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 fbc7 	bl	8003fa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e039      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	461a      	mov	r2, r3
 8003832:	f000 fb3b 	bl	8003eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2150      	movs	r1, #80	; 0x50
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fb94 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003842:	e029      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	461a      	mov	r2, r3
 8003852:	f000 fb5a 	bl	8003f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2160      	movs	r1, #96	; 0x60
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fb84 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003862:	e019      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	461a      	mov	r2, r3
 8003872:	f000 fb1b 	bl	8003eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fb74 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003882:	e009      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fb6b 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003894:	e000      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_SlaveConfigSynchro+0x18>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e031      	b.n	800392e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80038da:	6839      	ldr	r1, [r7, #0]
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa5f 	bl	8003da0 <TIM_SlaveTimer_SetConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e018      	b.n	800392e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800391a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <TIM_Base_SetConfig+0xe4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00f      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <TIM_Base_SetConfig+0xe8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <TIM_Base_SetConfig+0xec>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2f      	ldr	r2, [pc, #188]	; (8003a78 <TIM_Base_SetConfig+0xf0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <TIM_Base_SetConfig+0xe4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <TIM_Base_SetConfig+0xe8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <TIM_Base_SetConfig+0xec>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <TIM_Base_SetConfig+0xf0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <TIM_Base_SetConfig+0xf4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <TIM_Base_SetConfig+0xf8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <TIM_Base_SetConfig+0xfc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <TIM_Base_SetConfig+0xe4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	615a      	str	r2, [r3, #20]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40014000 	.word	0x40014000
 8003a80:	40014400 	.word	0x40014400
 8003a84:	40014800 	.word	0x40014800

08003a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0201 	bic.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0302 	bic.w	r3, r3, #2
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <TIM_OC1_SetConfig+0xc8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d10c      	bne.n	8003afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0308 	bic.w	r3, r3, #8
 8003aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <TIM_OC1_SetConfig+0xc8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d111      	bne.n	8003b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40010000 	.word	0x40010000

08003b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f023 0210 	bic.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0320 	bic.w	r3, r3, #32
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <TIM_OC2_SetConfig+0xd4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10d      	bne.n	8003bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <TIM_OC2_SetConfig+0xd4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d113      	bne.n	8003c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000

08003c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <TIM_OC3_SetConfig+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10d      	bne.n	8003ca6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <TIM_OC3_SetConfig+0xd0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40010000 	.word	0x40010000

08003d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	031b      	lsls	r3, r3, #12
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a10      	ldr	r2, [pc, #64]	; (8003d9c <TIM_OC4_SetConfig+0x9c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d109      	bne.n	8003d74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000

08003da0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0307 	bic.w	r3, r3, #7
 8003dca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b30      	cmp	r3, #48	; 0x30
 8003de4:	d05c      	beq.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x100>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d806      	bhi.n	8003df8 <TIM_SlaveTimer_SetConfig+0x58>
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d058      	beq.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x100>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d056      	beq.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x100>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d054      	beq.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003df6:	e054      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003df8:	2b50      	cmp	r3, #80	; 0x50
 8003dfa:	d03d      	beq.n	8003e78 <TIM_SlaveTimer_SetConfig+0xd8>
 8003dfc:	2b50      	cmp	r3, #80	; 0x50
 8003dfe:	d802      	bhi.n	8003e06 <TIM_SlaveTimer_SetConfig+0x66>
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d010      	beq.n	8003e26 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003e04:	e04d      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003e06:	2b60      	cmp	r3, #96	; 0x60
 8003e08:	d040      	beq.n	8003e8c <TIM_SlaveTimer_SetConfig+0xec>
 8003e0a:	2b70      	cmp	r3, #112	; 0x70
 8003e0c:	d000      	beq.n	8003e10 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003e0e:	e048      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f000 f8be 	bl	8003fa0 <TIM_ETR_SetConfig>
      break;
 8003e24:	e03d      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d101      	bne.n	8003e32 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e038      	b.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e58:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	621a      	str	r2, [r3, #32]
      break;
 8003e76:	e014      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 f811 	bl	8003eac <TIM_TI1_ConfigInputStage>
      break;
 8003e8a:	e00a      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f000 f836 	bl	8003f0a <TIM_TI2_ConfigInputStage>
      break;
 8003e9e:	e000      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8003ea0:	bf00      	nop
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f023 0201 	bic.w	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 030a 	bic.w	r3, r3, #10
 8003ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f043 0307 	orr.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	021a      	lsls	r2, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004040:	2302      	movs	r3, #2
 8004042:	e050      	b.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d013      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a15      	ldr	r2, [pc, #84]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a13      	ldr	r2, [pc, #76]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10c      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40014000 	.word	0x40014000

08004108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004120:	2302      	movs	r3, #2
 8004122:	e03d      	b.n	80041a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e03f      	b.n	8004266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd f92c 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f829 	bl	8004270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800422c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800423c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042b2:	f023 030c 	bic.w	r3, r3, #12
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	430b      	orrs	r3, r1
 80042be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042de:	f040 818b 	bne.w	80045f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4ac1      	ldr	r2, [pc, #772]	; (80045ec <UART_SetConfig+0x37c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d005      	beq.n	80042f8 <UART_SetConfig+0x88>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4abf      	ldr	r2, [pc, #764]	; (80045f0 <UART_SetConfig+0x380>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f040 80bd 	bne.w	8004472 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042f8:	f7fe fab2 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 80042fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	461d      	mov	r5, r3
 8004302:	f04f 0600 	mov.w	r6, #0
 8004306:	46a8      	mov	r8, r5
 8004308:	46b1      	mov	r9, r6
 800430a:	eb18 0308 	adds.w	r3, r8, r8
 800430e:	eb49 0409 	adc.w	r4, r9, r9
 8004312:	4698      	mov	r8, r3
 8004314:	46a1      	mov	r9, r4
 8004316:	eb18 0805 	adds.w	r8, r8, r5
 800431a:	eb49 0906 	adc.w	r9, r9, r6
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800432a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800432e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004332:	4688      	mov	r8, r1
 8004334:	4691      	mov	r9, r2
 8004336:	eb18 0005 	adds.w	r0, r8, r5
 800433a:	eb49 0106 	adc.w	r1, r9, r6
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	461d      	mov	r5, r3
 8004344:	f04f 0600 	mov.w	r6, #0
 8004348:	196b      	adds	r3, r5, r5
 800434a:	eb46 0406 	adc.w	r4, r6, r6
 800434e:	461a      	mov	r2, r3
 8004350:	4623      	mov	r3, r4
 8004352:	f7fb ff45 	bl	80001e0 <__aeabi_uldivmod>
 8004356:	4603      	mov	r3, r0
 8004358:	460c      	mov	r4, r1
 800435a:	461a      	mov	r2, r3
 800435c:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <UART_SetConfig+0x384>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	461d      	mov	r5, r3
 800436c:	f04f 0600 	mov.w	r6, #0
 8004370:	46a9      	mov	r9, r5
 8004372:	46b2      	mov	sl, r6
 8004374:	eb19 0309 	adds.w	r3, r9, r9
 8004378:	eb4a 040a 	adc.w	r4, sl, sl
 800437c:	4699      	mov	r9, r3
 800437e:	46a2      	mov	sl, r4
 8004380:	eb19 0905 	adds.w	r9, r9, r5
 8004384:	eb4a 0a06 	adc.w	sl, sl, r6
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004394:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004398:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800439c:	4689      	mov	r9, r1
 800439e:	4692      	mov	sl, r2
 80043a0:	eb19 0005 	adds.w	r0, r9, r5
 80043a4:	eb4a 0106 	adc.w	r1, sl, r6
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	461d      	mov	r5, r3
 80043ae:	f04f 0600 	mov.w	r6, #0
 80043b2:	196b      	adds	r3, r5, r5
 80043b4:	eb46 0406 	adc.w	r4, r6, r6
 80043b8:	461a      	mov	r2, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	f7fb ff10 	bl	80001e0 <__aeabi_uldivmod>
 80043c0:	4603      	mov	r3, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b8b      	ldr	r3, [pc, #556]	; (80045f4 <UART_SetConfig+0x384>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a86      	ldr	r2, [pc, #536]	; (80045f4 <UART_SetConfig+0x384>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e8:	4498      	add	r8, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	461d      	mov	r5, r3
 80043ee:	f04f 0600 	mov.w	r6, #0
 80043f2:	46a9      	mov	r9, r5
 80043f4:	46b2      	mov	sl, r6
 80043f6:	eb19 0309 	adds.w	r3, r9, r9
 80043fa:	eb4a 040a 	adc.w	r4, sl, sl
 80043fe:	4699      	mov	r9, r3
 8004400:	46a2      	mov	sl, r4
 8004402:	eb19 0905 	adds.w	r9, r9, r5
 8004406:	eb4a 0a06 	adc.w	sl, sl, r6
 800440a:	f04f 0100 	mov.w	r1, #0
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004416:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800441a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800441e:	4689      	mov	r9, r1
 8004420:	4692      	mov	sl, r2
 8004422:	eb19 0005 	adds.w	r0, r9, r5
 8004426:	eb4a 0106 	adc.w	r1, sl, r6
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	461d      	mov	r5, r3
 8004430:	f04f 0600 	mov.w	r6, #0
 8004434:	196b      	adds	r3, r5, r5
 8004436:	eb46 0406 	adc.w	r4, r6, r6
 800443a:	461a      	mov	r2, r3
 800443c:	4623      	mov	r3, r4
 800443e:	f7fb fecf 	bl	80001e0 <__aeabi_uldivmod>
 8004442:	4603      	mov	r3, r0
 8004444:	460c      	mov	r4, r1
 8004446:	461a      	mov	r2, r3
 8004448:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <UART_SetConfig+0x384>)
 800444a:	fba3 1302 	umull	r1, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2164      	movs	r1, #100	; 0x64
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	3332      	adds	r3, #50	; 0x32
 800445c:	4a65      	ldr	r2, [pc, #404]	; (80045f4 <UART_SetConfig+0x384>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 0207 	and.w	r2, r3, #7
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4442      	add	r2, r8
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	e26f      	b.n	8004952 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004472:	f7fe f9e1 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8004476:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	461d      	mov	r5, r3
 800447c:	f04f 0600 	mov.w	r6, #0
 8004480:	46a8      	mov	r8, r5
 8004482:	46b1      	mov	r9, r6
 8004484:	eb18 0308 	adds.w	r3, r8, r8
 8004488:	eb49 0409 	adc.w	r4, r9, r9
 800448c:	4698      	mov	r8, r3
 800448e:	46a1      	mov	r9, r4
 8004490:	eb18 0805 	adds.w	r8, r8, r5
 8004494:	eb49 0906 	adc.w	r9, r9, r6
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044ac:	4688      	mov	r8, r1
 80044ae:	4691      	mov	r9, r2
 80044b0:	eb18 0005 	adds.w	r0, r8, r5
 80044b4:	eb49 0106 	adc.w	r1, r9, r6
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	461d      	mov	r5, r3
 80044be:	f04f 0600 	mov.w	r6, #0
 80044c2:	196b      	adds	r3, r5, r5
 80044c4:	eb46 0406 	adc.w	r4, r6, r6
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	f7fb fe88 	bl	80001e0 <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <UART_SetConfig+0x384>)
 80044d8:	fba3 2302 	umull	r2, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	461d      	mov	r5, r3
 80044e6:	f04f 0600 	mov.w	r6, #0
 80044ea:	46a9      	mov	r9, r5
 80044ec:	46b2      	mov	sl, r6
 80044ee:	eb19 0309 	adds.w	r3, r9, r9
 80044f2:	eb4a 040a 	adc.w	r4, sl, sl
 80044f6:	4699      	mov	r9, r3
 80044f8:	46a2      	mov	sl, r4
 80044fa:	eb19 0905 	adds.w	r9, r9, r5
 80044fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800450e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004512:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004516:	4689      	mov	r9, r1
 8004518:	4692      	mov	sl, r2
 800451a:	eb19 0005 	adds.w	r0, r9, r5
 800451e:	eb4a 0106 	adc.w	r1, sl, r6
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	461d      	mov	r5, r3
 8004528:	f04f 0600 	mov.w	r6, #0
 800452c:	196b      	adds	r3, r5, r5
 800452e:	eb46 0406 	adc.w	r4, r6, r6
 8004532:	461a      	mov	r2, r3
 8004534:	4623      	mov	r3, r4
 8004536:	f7fb fe53 	bl	80001e0 <__aeabi_uldivmod>
 800453a:	4603      	mov	r3, r0
 800453c:	460c      	mov	r4, r1
 800453e:	461a      	mov	r2, r3
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <UART_SetConfig+0x384>)
 8004542:	fba3 1302 	umull	r1, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2164      	movs	r1, #100	; 0x64
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	3332      	adds	r3, #50	; 0x32
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <UART_SetConfig+0x384>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004562:	4498      	add	r8, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	461d      	mov	r5, r3
 8004568:	f04f 0600 	mov.w	r6, #0
 800456c:	46a9      	mov	r9, r5
 800456e:	46b2      	mov	sl, r6
 8004570:	eb19 0309 	adds.w	r3, r9, r9
 8004574:	eb4a 040a 	adc.w	r4, sl, sl
 8004578:	4699      	mov	r9, r3
 800457a:	46a2      	mov	sl, r4
 800457c:	eb19 0905 	adds.w	r9, r9, r5
 8004580:	eb4a 0a06 	adc.w	sl, sl, r6
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004590:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004594:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004598:	4689      	mov	r9, r1
 800459a:	4692      	mov	sl, r2
 800459c:	eb19 0005 	adds.w	r0, r9, r5
 80045a0:	eb4a 0106 	adc.w	r1, sl, r6
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	461d      	mov	r5, r3
 80045aa:	f04f 0600 	mov.w	r6, #0
 80045ae:	196b      	adds	r3, r5, r5
 80045b0:	eb46 0406 	adc.w	r4, r6, r6
 80045b4:	461a      	mov	r2, r3
 80045b6:	4623      	mov	r3, r4
 80045b8:	f7fb fe12 	bl	80001e0 <__aeabi_uldivmod>
 80045bc:	4603      	mov	r3, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <UART_SetConfig+0x384>)
 80045c4:	fba3 1302 	umull	r1, r3, r3, r2
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	2164      	movs	r1, #100	; 0x64
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	3332      	adds	r3, #50	; 0x32
 80045d6:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <UART_SetConfig+0x384>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	f003 0207 	and.w	r2, r3, #7
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4442      	add	r2, r8
 80045e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045ea:	e1b2      	b.n	8004952 <UART_SetConfig+0x6e2>
 80045ec:	40011000 	.word	0x40011000
 80045f0:	40011400 	.word	0x40011400
 80045f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4ad7      	ldr	r2, [pc, #860]	; (800495c <UART_SetConfig+0x6ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d005      	beq.n	800460e <UART_SetConfig+0x39e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4ad6      	ldr	r2, [pc, #856]	; (8004960 <UART_SetConfig+0x6f0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	f040 80d1 	bne.w	80047b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800460e:	f7fe f927 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8004612:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	469a      	mov	sl, r3
 8004618:	f04f 0b00 	mov.w	fp, #0
 800461c:	46d0      	mov	r8, sl
 800461e:	46d9      	mov	r9, fp
 8004620:	eb18 0308 	adds.w	r3, r8, r8
 8004624:	eb49 0409 	adc.w	r4, r9, r9
 8004628:	4698      	mov	r8, r3
 800462a:	46a1      	mov	r9, r4
 800462c:	eb18 080a 	adds.w	r8, r8, sl
 8004630:	eb49 090b 	adc.w	r9, r9, fp
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004640:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004644:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004648:	4688      	mov	r8, r1
 800464a:	4691      	mov	r9, r2
 800464c:	eb1a 0508 	adds.w	r5, sl, r8
 8004650:	eb4b 0609 	adc.w	r6, fp, r9
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	f04f 0400 	mov.w	r4, #0
 8004666:	0094      	lsls	r4, r2, #2
 8004668:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800466c:	008b      	lsls	r3, r1, #2
 800466e:	461a      	mov	r2, r3
 8004670:	4623      	mov	r3, r4
 8004672:	4628      	mov	r0, r5
 8004674:	4631      	mov	r1, r6
 8004676:	f7fb fdb3 	bl	80001e0 <__aeabi_uldivmod>
 800467a:	4603      	mov	r3, r0
 800467c:	460c      	mov	r4, r1
 800467e:	461a      	mov	r2, r3
 8004680:	4bb8      	ldr	r3, [pc, #736]	; (8004964 <UART_SetConfig+0x6f4>)
 8004682:	fba3 2302 	umull	r2, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	469b      	mov	fp, r3
 8004690:	f04f 0c00 	mov.w	ip, #0
 8004694:	46d9      	mov	r9, fp
 8004696:	46e2      	mov	sl, ip
 8004698:	eb19 0309 	adds.w	r3, r9, r9
 800469c:	eb4a 040a 	adc.w	r4, sl, sl
 80046a0:	4699      	mov	r9, r3
 80046a2:	46a2      	mov	sl, r4
 80046a4:	eb19 090b 	adds.w	r9, r9, fp
 80046a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046c0:	4689      	mov	r9, r1
 80046c2:	4692      	mov	sl, r2
 80046c4:	eb1b 0509 	adds.w	r5, fp, r9
 80046c8:	eb4c 060a 	adc.w	r6, ip, sl
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	0094      	lsls	r4, r2, #2
 80046e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046e4:	008b      	lsls	r3, r1, #2
 80046e6:	461a      	mov	r2, r3
 80046e8:	4623      	mov	r3, r4
 80046ea:	4628      	mov	r0, r5
 80046ec:	4631      	mov	r1, r6
 80046ee:	f7fb fd77 	bl	80001e0 <__aeabi_uldivmod>
 80046f2:	4603      	mov	r3, r0
 80046f4:	460c      	mov	r4, r1
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b9a      	ldr	r3, [pc, #616]	; (8004964 <UART_SetConfig+0x6f4>)
 80046fa:	fba3 1302 	umull	r1, r3, r3, r2
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2164      	movs	r1, #100	; 0x64
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	3332      	adds	r3, #50	; 0x32
 800470c:	4a95      	ldr	r2, [pc, #596]	; (8004964 <UART_SetConfig+0x6f4>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004718:	4498      	add	r8, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	469b      	mov	fp, r3
 800471e:	f04f 0c00 	mov.w	ip, #0
 8004722:	46d9      	mov	r9, fp
 8004724:	46e2      	mov	sl, ip
 8004726:	eb19 0309 	adds.w	r3, r9, r9
 800472a:	eb4a 040a 	adc.w	r4, sl, sl
 800472e:	4699      	mov	r9, r3
 8004730:	46a2      	mov	sl, r4
 8004732:	eb19 090b 	adds.w	r9, r9, fp
 8004736:	eb4a 0a0c 	adc.w	sl, sl, ip
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800474a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800474e:	4689      	mov	r9, r1
 8004750:	4692      	mov	sl, r2
 8004752:	eb1b 0509 	adds.w	r5, fp, r9
 8004756:	eb4c 060a 	adc.w	r6, ip, sl
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	0094      	lsls	r4, r2, #2
 800476e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	461a      	mov	r2, r3
 8004776:	4623      	mov	r3, r4
 8004778:	4628      	mov	r0, r5
 800477a:	4631      	mov	r1, r6
 800477c:	f7fb fd30 	bl	80001e0 <__aeabi_uldivmod>
 8004780:	4603      	mov	r3, r0
 8004782:	460c      	mov	r4, r1
 8004784:	461a      	mov	r2, r3
 8004786:	4b77      	ldr	r3, [pc, #476]	; (8004964 <UART_SetConfig+0x6f4>)
 8004788:	fba3 1302 	umull	r1, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	2164      	movs	r1, #100	; 0x64
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	3332      	adds	r3, #50	; 0x32
 800479a:	4a72      	ldr	r2, [pc, #456]	; (8004964 <UART_SetConfig+0x6f4>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4442      	add	r2, r8
 80047ac:	609a      	str	r2, [r3, #8]
 80047ae:	e0d0      	b.n	8004952 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe f842 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80047b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	469a      	mov	sl, r3
 80047ba:	f04f 0b00 	mov.w	fp, #0
 80047be:	46d0      	mov	r8, sl
 80047c0:	46d9      	mov	r9, fp
 80047c2:	eb18 0308 	adds.w	r3, r8, r8
 80047c6:	eb49 0409 	adc.w	r4, r9, r9
 80047ca:	4698      	mov	r8, r3
 80047cc:	46a1      	mov	r9, r4
 80047ce:	eb18 080a 	adds.w	r8, r8, sl
 80047d2:	eb49 090b 	adc.w	r9, r9, fp
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047ea:	4688      	mov	r8, r1
 80047ec:	4691      	mov	r9, r2
 80047ee:	eb1a 0508 	adds.w	r5, sl, r8
 80047f2:	eb4b 0609 	adc.w	r6, fp, r9
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4619      	mov	r1, r3
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	f04f 0400 	mov.w	r4, #0
 8004808:	0094      	lsls	r4, r2, #2
 800480a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800480e:	008b      	lsls	r3, r1, #2
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	4628      	mov	r0, r5
 8004816:	4631      	mov	r1, r6
 8004818:	f7fb fce2 	bl	80001e0 <__aeabi_uldivmod>
 800481c:	4603      	mov	r3, r0
 800481e:	460c      	mov	r4, r1
 8004820:	461a      	mov	r2, r3
 8004822:	4b50      	ldr	r3, [pc, #320]	; (8004964 <UART_SetConfig+0x6f4>)
 8004824:	fba3 2302 	umull	r2, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	469b      	mov	fp, r3
 8004832:	f04f 0c00 	mov.w	ip, #0
 8004836:	46d9      	mov	r9, fp
 8004838:	46e2      	mov	sl, ip
 800483a:	eb19 0309 	adds.w	r3, r9, r9
 800483e:	eb4a 040a 	adc.w	r4, sl, sl
 8004842:	4699      	mov	r9, r3
 8004844:	46a2      	mov	sl, r4
 8004846:	eb19 090b 	adds.w	r9, r9, fp
 800484a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800485a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800485e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004862:	4689      	mov	r9, r1
 8004864:	4692      	mov	sl, r2
 8004866:	eb1b 0509 	adds.w	r5, fp, r9
 800486a:	eb4c 060a 	adc.w	r6, ip, sl
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4619      	mov	r1, r3
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f04f 0400 	mov.w	r4, #0
 8004880:	0094      	lsls	r4, r2, #2
 8004882:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	461a      	mov	r2, r3
 800488a:	4623      	mov	r3, r4
 800488c:	4628      	mov	r0, r5
 800488e:	4631      	mov	r1, r6
 8004890:	f7fb fca6 	bl	80001e0 <__aeabi_uldivmod>
 8004894:	4603      	mov	r3, r0
 8004896:	460c      	mov	r4, r1
 8004898:	461a      	mov	r2, r3
 800489a:	4b32      	ldr	r3, [pc, #200]	; (8004964 <UART_SetConfig+0x6f4>)
 800489c:	fba3 1302 	umull	r1, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	2164      	movs	r1, #100	; 0x64
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	3332      	adds	r3, #50	; 0x32
 80048ae:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <UART_SetConfig+0x6f4>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ba:	4498      	add	r8, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	469b      	mov	fp, r3
 80048c0:	f04f 0c00 	mov.w	ip, #0
 80048c4:	46d9      	mov	r9, fp
 80048c6:	46e2      	mov	sl, ip
 80048c8:	eb19 0309 	adds.w	r3, r9, r9
 80048cc:	eb4a 040a 	adc.w	r4, sl, sl
 80048d0:	4699      	mov	r9, r3
 80048d2:	46a2      	mov	sl, r4
 80048d4:	eb19 090b 	adds.w	r9, r9, fp
 80048d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048f0:	4689      	mov	r9, r1
 80048f2:	4692      	mov	sl, r2
 80048f4:	eb1b 0509 	adds.w	r5, fp, r9
 80048f8:	eb4c 060a 	adc.w	r6, ip, sl
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4619      	mov	r1, r3
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f04f 0400 	mov.w	r4, #0
 800490e:	0094      	lsls	r4, r2, #2
 8004910:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004914:	008b      	lsls	r3, r1, #2
 8004916:	461a      	mov	r2, r3
 8004918:	4623      	mov	r3, r4
 800491a:	4628      	mov	r0, r5
 800491c:	4631      	mov	r1, r6
 800491e:	f7fb fc5f 	bl	80001e0 <__aeabi_uldivmod>
 8004922:	4603      	mov	r3, r0
 8004924:	460c      	mov	r4, r1
 8004926:	461a      	mov	r2, r3
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <UART_SetConfig+0x6f4>)
 800492a:	fba3 1302 	umull	r1, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2164      	movs	r1, #100	; 0x64
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	; 0x32
 800493c:	4a09      	ldr	r2, [pc, #36]	; (8004964 <UART_SetConfig+0x6f4>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4442      	add	r2, r8
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	e7ff      	b.n	8004952 <UART_SetConfig+0x6e2>
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495c:	40011000 	.word	0x40011000
 8004960:	40011400 	.word	0x40011400
 8004964:	51eb851f 	.word	0x51eb851f

08004968 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497a:	2b84      	cmp	r3, #132	; 0x84
 800497c:	d005      	beq.n	800498a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800497e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	3303      	adds	r3, #3
 8004988:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800499c:	f000 fea4 	bl	80056e8 <vTaskStartScheduler>
  
  return osOK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a8:	b089      	sub	sp, #36	; 0x24
 80049aa:	af04      	add	r7, sp, #16
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <osThreadCreate+0x54>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685c      	ldr	r4, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681d      	ldr	r5, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691e      	ldr	r6, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ffc8 	bl	8004968 <makeFreeRtosPriority>
 80049d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049e2:	9202      	str	r2, [sp, #8]
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	9100      	str	r1, [sp, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4632      	mov	r2, r6
 80049ec:	4629      	mov	r1, r5
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 fcb7 	bl	8005362 <xTaskCreateStatic>
 80049f4:	4603      	mov	r3, r0
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e01c      	b.n	8004a34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685c      	ldr	r4, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a06:	b29e      	uxth	r6, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ffaa 	bl	8004968 <makeFreeRtosPriority>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f107 030c 	add.w	r3, r7, #12
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	9200      	str	r2, [sp, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	4632      	mov	r2, r6
 8004a22:	4629      	mov	r1, r5
 8004a24:	4620      	mov	r0, r4
 8004a26:	f000 fcf6 	bl	8005416 <xTaskCreate>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d001      	beq.n	8004a34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a34:	68fb      	ldr	r3, [r7, #12]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <osDelay+0x16>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	e000      	b.n	8004a56 <osDelay+0x18>
 8004a54:	2301      	movs	r3, #1
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fe12 	bl	8005680 <vTaskDelay>
  
  return osOK;
 8004a5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f103 0208 	add.w	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f103 0208 	add.w	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f103 0208 	add.w	r2, r3, #8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d103      	bne.n	8004b28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e00c      	b.n	8004b42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e002      	b.n	8004b36 <vListInsert+0x2e>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d2f6      	bcs.n	8004b30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6892      	ldr	r2, [r2, #8]
 8004b90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6852      	ldr	r2, [r2, #4]
 8004b9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d103      	bne.n	8004bae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	1e5a      	subs	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	e7fe      	b.n	8004bf6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004bf8:	f001 fb98 	bl	800632c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	441a      	add	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	441a      	add	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	22ff      	movs	r2, #255	; 0xff
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	22ff      	movs	r2, #255	; 0xff
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d114      	bne.n	8004c78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01a      	beq.n	8004c8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3310      	adds	r3, #16
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 ff82 	bl	8005b64 <xTaskRemoveFromEventList>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <xQueueGenericReset+0xcc>)
 8004c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	e009      	b.n	8004c8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3310      	adds	r3, #16
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fef2 	bl	8004a66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff feed 	bl	8004a66 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c8c:	f001 fb7c 	bl	8006388 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c90:	2301      	movs	r3, #1
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <xQueueGenericCreate+0x28>
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e7fe      	b.n	8004cc6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e004      	b.n	8004cde <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3348      	adds	r3, #72	; 0x48
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fbfe 	bl	80064e4 <pvPortMalloc>
 8004ce8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d011      	beq.n	8004d14 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	3348      	adds	r3, #72	; 0x48
 8004cf8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d02:	79fa      	ldrb	r2, [r7, #7]
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f805 	bl	8004d1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d14:	69bb      	ldr	r3, [r7, #24]
	}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e002      	b.n	8004d40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	69b8      	ldr	r0, [r7, #24]
 8004d50:	f7ff ff3e 	bl	8004bd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <xQueueGenericSend+0x30>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8a:	e7fe      	b.n	8004d8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <xQueueGenericSend+0x3e>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <xQueueGenericSend+0x42>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericSend+0x44>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <xQueueGenericSend+0x5c>
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e7fe      	b.n	8004db6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSend+0x6a>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <xQueueGenericSend+0x6e>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <xQueueGenericSend+0x70>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <xQueueGenericSend+0x88>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004de4:	f001 f874 	bl	8005ed0 <xTaskGetSchedulerState>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <xQueueGenericSend+0x98>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <xQueueGenericSend+0x9c>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <xQueueGenericSend+0x9e>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <xQueueGenericSend+0xb6>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e12:	f001 fa8b 	bl	800632c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <xQueueGenericSend+0xcc>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d129      	bne.n	8004e7c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2e:	f000 f988 	bl	8005142 <prvCopyDataToQueue>
 8004e32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	3324      	adds	r3, #36	; 0x24
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fe8f 	bl	8005b64 <xTaskRemoveFromEventList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <xQueueGenericSend+0x1f0>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	e00a      	b.n	8004e74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e64:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <xQueueGenericSend+0x1f0>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e74:	f001 fa88 	bl	8006388 <vPortExitCritical>
				return pdPASS;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e063      	b.n	8004f44 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e82:	f001 fa81 	bl	8006388 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e05c      	b.n	8004f44 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fec7 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e9e:	f001 fa73 	bl	8006388 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ea2:	f000 fc7f 	bl	80057a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ea6:	f001 fa41 	bl	800632c <vPortEnterCritical>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d103      	bne.n	8004ec0 <xQueueGenericSend+0x164>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSend+0x17a>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed6:	f001 fa57 	bl	8006388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eda:	1d3a      	adds	r2, r7, #4
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 feb6 	bl	8005c54 <xTaskCheckForTimeOut>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d124      	bne.n	8004f38 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef0:	f000 fa1f 	bl	8005332 <prvIsQueueFull>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d018      	beq.n	8004f2c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	3310      	adds	r3, #16
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fe0a 	bl	8005b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0a:	f000 f9aa 	bl	8005262 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f0e:	f000 fc57 	bl	80057c0 <xTaskResumeAll>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f af7c 	bne.w	8004e12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <xQueueGenericSend+0x1f0>)
 8004f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	e772      	b.n	8004e12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f2e:	f000 f998 	bl	8005262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f32:	f000 fc45 	bl	80057c0 <xTaskResumeAll>
 8004f36:	e76c      	b.n	8004e12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3a:	f000 f992 	bl	8005262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f3e:	f000 fc3f 	bl	80057c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3738      	adds	r7, #56	; 0x38
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <xQueueReceive+0x2e>
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	623b      	str	r3, [r7, #32]
 8004f7c:	e7fe      	b.n	8004f7c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <xQueueReceive+0x3c>
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <xQueueReceive+0x40>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <xQueueReceive+0x42>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <xQueueReceive+0x5a>
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004faa:	f000 ff91 	bl	8005ed0 <xTaskGetSchedulerState>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <xQueueReceive+0x6a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <xQueueReceive+0x6e>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <xQueueReceive+0x70>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <xQueueReceive+0x88>
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fd8:	f001 f9a8 	bl	800632c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01f      	beq.n	8005028 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fec:	f000 f913 	bl	8005216 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1e5a      	subs	r2, r3, #1
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00f      	beq.n	8005020 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	3310      	adds	r3, #16
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fdad 	bl	8005b64 <xTaskRemoveFromEventList>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005010:	4b3c      	ldr	r3, [pc, #240]	; (8005104 <xQueueReceive+0x1b4>)
 8005012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005020:	f001 f9b2 	bl	8006388 <vPortExitCritical>
				return pdPASS;
 8005024:	2301      	movs	r3, #1
 8005026:	e069      	b.n	80050fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800502e:	f001 f9ab 	bl	8006388 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005032:	2300      	movs	r3, #0
 8005034:	e062      	b.n	80050fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800503c:	f107 0310 	add.w	r3, r7, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fdf1 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005046:	2301      	movs	r3, #1
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800504a:	f001 f99d 	bl	8006388 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800504e:	f000 fba9 	bl	80057a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005052:	f001 f96b 	bl	800632c <vPortEnterCritical>
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800505c:	b25b      	sxtb	r3, r3
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d103      	bne.n	800506c <xQueueReceive+0x11c>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005072:	b25b      	sxtb	r3, r3
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d103      	bne.n	8005082 <xQueueReceive+0x132>
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005082:	f001 f981 	bl	8006388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005086:	1d3a      	adds	r2, r7, #4
 8005088:	f107 0310 	add.w	r3, r7, #16
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fde0 	bl	8005c54 <xTaskCheckForTimeOut>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d123      	bne.n	80050e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800509a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509c:	f000 f933 	bl	8005306 <prvIsQueueEmpty>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d017      	beq.n	80050d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	3324      	adds	r3, #36	; 0x24
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fd34 	bl	8005b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b6:	f000 f8d4 	bl	8005262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050ba:	f000 fb81 	bl	80057c0 <xTaskResumeAll>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d189      	bne.n	8004fd8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <xQueueReceive+0x1b4>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	e780      	b.n	8004fd8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d8:	f000 f8c3 	bl	8005262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050dc:	f000 fb70 	bl	80057c0 <xTaskResumeAll>
 80050e0:	e77a      	b.n	8004fd8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e4:	f000 f8bd 	bl	8005262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e8:	f000 fb6a 	bl	80057c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ee:	f000 f90a 	bl	8005306 <prvIsQueueEmpty>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f43f af6f 	beq.w	8004fd8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3730      	adds	r7, #48	; 0x30
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <uxQueueMessagesWaiting+0x22>
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	e7fe      	b.n	8005128 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800512a:	f001 f8ff 	bl	800632c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005134:	f001 f928 	bl	8006388 <vPortExitCritical>

	return uxReturn;
 8005138:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d14d      	bne.n	8005204 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fecd 	bl	8005f0c <xTaskPriorityDisinherit>
 8005172:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
 800517a:	e043      	b.n	8005204 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d119      	bne.n	80051b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6858      	ldr	r0, [r3, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	461a      	mov	r2, r3
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	f001 fba3 	bl	80068d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	441a      	add	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d32b      	bcc.n	8005204 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	e026      	b.n	8005204 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68d8      	ldr	r0, [r3, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	461a      	mov	r2, r3
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	f001 fb89 	bl	80068d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	425b      	negs	r3, r3
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d207      	bcs.n	80051f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	425b      	negs	r3, r3
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d105      	bne.n	8005204 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3b01      	subs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800520c:	697b      	ldr	r3, [r7, #20]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d018      	beq.n	800525a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d303      	bcc.n	800524a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	461a      	mov	r2, r3
 8005254:	6838      	ldr	r0, [r7, #0]
 8005256:	f001 fb3f 	bl	80068d8 <memcpy>
	}
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800526a:	f001 f85f 	bl	800632c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005274:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005276:	e011      	b.n	800529c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d012      	beq.n	80052a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fc6d 	bl	8005b64 <xTaskRemoveFromEventList>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005290:	f000 fd40 	bl	8005d14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	3b01      	subs	r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dce9      	bgt.n	8005278 <prvUnlockQueue+0x16>
 80052a4:	e000      	b.n	80052a8 <prvUnlockQueue+0x46>
					break;
 80052a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	22ff      	movs	r2, #255	; 0xff
 80052ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052b0:	f001 f86a 	bl	8006388 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052b4:	f001 f83a 	bl	800632c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c0:	e011      	b.n	80052e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d012      	beq.n	80052f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3310      	adds	r3, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fc48 	bl	8005b64 <xTaskRemoveFromEventList>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052da:	f000 fd1b 	bl	8005d14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dce9      	bgt.n	80052c2 <prvUnlockQueue+0x60>
 80052ee:	e000      	b.n	80052f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052fa:	f001 f845 	bl	8006388 <vPortExitCritical>
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800530e:	f001 f80d 	bl	800632c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800531a:	2301      	movs	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e001      	b.n	8005324 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005324:	f001 f830 	bl	8006388 <vPortExitCritical>

	return xReturn;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800533a:	f000 fff7 	bl	800632c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	429a      	cmp	r2, r3
 8005348:	d102      	bne.n	8005350 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e001      	b.n	8005354 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005354:	f001 f818 	bl	8006388 <vPortExitCritical>

	return xReturn;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08e      	sub	sp, #56	; 0x38
 8005366:	af04      	add	r7, sp, #16
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <xTaskCreateStatic+0x28>
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	e7fe      	b.n	8005388 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <xTaskCreateStatic+0x42>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	e7fe      	b.n	80053a2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053a4:	2354      	movs	r3, #84	; 0x54
 80053a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b54      	cmp	r3, #84	; 0x54
 80053ac:	d009      	beq.n	80053c2 <xTaskCreateStatic+0x60>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01e      	beq.n	8005408 <xTaskCreateStatic+0xa6>
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053e2:	2300      	movs	r3, #0
 80053e4:	9303      	str	r3, [sp, #12]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f850 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005402:	f000 f8d3 	bl	80055ac <prvAddNewTaskToReadyList>
 8005406:	e001      	b.n	800540c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800540c:	697b      	ldr	r3, [r7, #20]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005416:	b580      	push	{r7, lr}
 8005418:	b08c      	sub	sp, #48	; 0x30
 800541a:	af04      	add	r7, sp, #16
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f85a 	bl	80064e4 <pvPortMalloc>
 8005430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005438:	2054      	movs	r0, #84	; 0x54
 800543a:	f001 f853 	bl	80064e4 <pvPortMalloc>
 800543e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e005      	b.n	800545a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f001 f90a 	bl	8006668 <vPortFree>
 8005454:	e001      	b.n	800545a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d017      	beq.n	8005490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	2300      	movs	r3, #0
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f80e 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005484:	69f8      	ldr	r0, [r7, #28]
 8005486:	f000 f891 	bl	80055ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e002      	b.n	8005496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005496:	69bb      	ldr	r3, [r7, #24]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054b8:	3b01      	subs	r3, #1
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <prvInitialiseNewTask+0x46>
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e7fe      	b.n	80054e4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01f      	beq.n	800552c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e012      	b.n	8005518 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	7819      	ldrb	r1, [r3, #0]
 80054fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	3334      	adds	r3, #52	; 0x34
 8005502:	460a      	mov	r2, r1
 8005504:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d9e9      	bls.n	80054f2 <prvInitialiseNewTask+0x52>
 800551e:	e000      	b.n	8005522 <prvInitialiseNewTask+0x82>
			{
				break;
 8005520:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800552a:	e003      	b.n	8005534 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2b06      	cmp	r3, #6
 8005538:	d901      	bls.n	800553e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800553a:	2306      	movs	r3, #6
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	3304      	adds	r3, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff faa6 	bl	8004aa6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	3318      	adds	r3, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff faa1 	bl	8004aa6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005568:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	f1c3 0207 	rsb	r2, r3, #7
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	2200      	movs	r2, #0
 800557e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	69b8      	ldr	r0, [r7, #24]
 800558e:	f000 fda7 	bl	80060e0 <pxPortInitialiseStack>
 8005592:	4602      	mov	r2, r0
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a4:	bf00      	nop
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055b4:	f000 feba 	bl	800632c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055b8:	4b2a      	ldr	r3, [pc, #168]	; (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a29      	ldr	r2, [pc, #164]	; (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055c2:	4b29      	ldr	r3, [pc, #164]	; (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ca:	4a27      	ldr	r2, [pc, #156]	; (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d110      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055d8:	f000 fbc0 	bl	8005d5c <prvInitialiseTaskLists>
 80055dc:	e00d      	b.n	80055fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055de:	4b23      	ldr	r3, [pc, #140]	; (800566c <prvAddNewTaskToReadyList+0xc0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055e6:	4b20      	ldr	r3, [pc, #128]	; (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d802      	bhi.n	80055fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <prvAddNewTaskToReadyList+0xc4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <prvAddNewTaskToReadyList+0xc4>)
 8005602:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	2201      	movs	r2, #1
 800560a:	409a      	lsls	r2, r3
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a15      	ldr	r2, [pc, #84]	; (8005678 <prvAddNewTaskToReadyList+0xcc>)
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7ff fa47 	bl	8004ac0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005632:	f000 fea9 	bl	8006388 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <prvAddNewTaskToReadyList+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00e      	beq.n	800565c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800563e:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <prvAddNewTaskToReadyList+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d207      	bcs.n	800565c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <prvAddNewTaskToReadyList+0xd0>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000380 	.word	0x20000380
 8005668:	20000280 	.word	0x20000280
 800566c:	2000038c 	.word	0x2000038c
 8005670:	2000039c 	.word	0x2000039c
 8005674:	20000388 	.word	0x20000388
 8005678:	20000284 	.word	0x20000284
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005692:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <vTaskDelay+0x60>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <vTaskDelay+0x2e>
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	e7fe      	b.n	80056ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80056ae:	f000 f879 	bl	80057a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056b2:	2100      	movs	r1, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fcad 	bl	8006014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056ba:	f000 f881 	bl	80057c0 <xTaskResumeAll>
 80056be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <vTaskDelay+0x64>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	200003a8 	.word	0x200003a8
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056f6:	463a      	mov	r2, r7
 80056f8:	1d39      	adds	r1, r7, #4
 80056fa:	f107 0308 	add.w	r3, r7, #8
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fa ff84 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	9202      	str	r2, [sp, #8]
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	2300      	movs	r3, #0
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	2300      	movs	r3, #0
 8005714:	460a      	mov	r2, r1
 8005716:	491d      	ldr	r1, [pc, #116]	; (800578c <vTaskStartScheduler+0xa4>)
 8005718:	481d      	ldr	r0, [pc, #116]	; (8005790 <vTaskStartScheduler+0xa8>)
 800571a:	f7ff fe22 	bl	8005362 <xTaskCreateStatic>
 800571e:	4602      	mov	r2, r0
 8005720:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <vTaskStartScheduler+0xac>)
 8005722:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005724:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <vTaskStartScheduler+0xac>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800572c:	2301      	movs	r3, #1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e001      	b.n	8005736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d115      	bne.n	8005768 <vTaskStartScheduler+0x80>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <vTaskStartScheduler+0xb0>)
 8005750:	f04f 32ff 	mov.w	r2, #4294967295
 8005754:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005756:	4b11      	ldr	r3, [pc, #68]	; (800579c <vTaskStartScheduler+0xb4>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <vTaskStartScheduler+0xb8>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005762:	f000 fd45 	bl	80061f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005766:	e00d      	b.n	8005784 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d109      	bne.n	8005784 <vTaskStartScheduler+0x9c>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e7fe      	b.n	8005782 <vTaskStartScheduler+0x9a>
}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	08006968 	.word	0x08006968
 8005790:	08005d2d 	.word	0x08005d2d
 8005794:	200003a4 	.word	0x200003a4
 8005798:	200003a0 	.word	0x200003a0
 800579c:	2000038c 	.word	0x2000038c
 80057a0:	20000384 	.word	0x20000384

080057a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <vTaskSuspendAll+0x18>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	4a03      	ldr	r2, [pc, #12]	; (80057bc <vTaskSuspendAll+0x18>)
 80057b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	200003a8 	.word	0x200003a8

080057c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ce:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <xTaskResumeAll+0x114>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <xTaskResumeAll+0x2a>
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	e7fe      	b.n	80057e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057ea:	f000 fd9f 	bl	800632c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057ee:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <xTaskResumeAll+0x114>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <xTaskResumeAll+0x114>)
 80057f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <xTaskResumeAll+0x114>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d161      	bne.n	80058c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005800:	4b35      	ldr	r3, [pc, #212]	; (80058d8 <xTaskResumeAll+0x118>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d05d      	beq.n	80058c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005808:	e02e      	b.n	8005868 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580a:	4b34      	ldr	r3, [pc, #208]	; (80058dc <xTaskResumeAll+0x11c>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3318      	adds	r3, #24
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff f9af 	bl	8004b7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff f9aa 	bl	8004b7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	2201      	movs	r2, #1
 800582c:	409a      	lsls	r2, r3
 800582e:	4b2c      	ldr	r3, [pc, #176]	; (80058e0 <xTaskResumeAll+0x120>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4313      	orrs	r3, r2
 8005834:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <xTaskResumeAll+0x120>)
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <xTaskResumeAll+0x124>)
 8005846:	441a      	add	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f7ff f936 	bl	8004ac0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <xTaskResumeAll+0x128>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	429a      	cmp	r2, r3
 8005860:	d302      	bcc.n	8005868 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005862:	4b22      	ldr	r3, [pc, #136]	; (80058ec <xTaskResumeAll+0x12c>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005868:	4b1c      	ldr	r3, [pc, #112]	; (80058dc <xTaskResumeAll+0x11c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1cc      	bne.n	800580a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005876:	f000 fb0b 	bl	8005e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800587a:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <xTaskResumeAll+0x130>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d010      	beq.n	80058a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005886:	f000 f837 	bl	80058f8 <xTaskIncrementTick>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005890:	4b16      	ldr	r3, [pc, #88]	; (80058ec <xTaskResumeAll+0x12c>)
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3b01      	subs	r3, #1
 800589a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f1      	bne.n	8005886 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <xTaskResumeAll+0x130>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <xTaskResumeAll+0x12c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d009      	beq.n	80058c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <xTaskResumeAll+0x134>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058c4:	f000 fd60 	bl	8006388 <vPortExitCritical>

	return xAlreadyYielded;
 80058c8:	68bb      	ldr	r3, [r7, #8]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	200003a8 	.word	0x200003a8
 80058d8:	20000380 	.word	0x20000380
 80058dc:	20000340 	.word	0x20000340
 80058e0:	20000388 	.word	0x20000388
 80058e4:	20000284 	.word	0x20000284
 80058e8:	20000280 	.word	0x20000280
 80058ec:	20000394 	.word	0x20000394
 80058f0:	20000390 	.word	0x20000390
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005902:	4b4e      	ldr	r3, [pc, #312]	; (8005a3c <xTaskIncrementTick+0x144>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 8087 	bne.w	8005a1a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800590c:	4b4c      	ldr	r3, [pc, #304]	; (8005a40 <xTaskIncrementTick+0x148>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005914:	4a4a      	ldr	r2, [pc, #296]	; (8005a40 <xTaskIncrementTick+0x148>)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11f      	bne.n	8005960 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005920:	4b48      	ldr	r3, [pc, #288]	; (8005a44 <xTaskIncrementTick+0x14c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <xTaskIncrementTick+0x46>
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	e7fe      	b.n	800593c <xTaskIncrementTick+0x44>
 800593e:	4b41      	ldr	r3, [pc, #260]	; (8005a44 <xTaskIncrementTick+0x14c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <xTaskIncrementTick+0x150>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3e      	ldr	r2, [pc, #248]	; (8005a44 <xTaskIncrementTick+0x14c>)
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4a3e      	ldr	r2, [pc, #248]	; (8005a48 <xTaskIncrementTick+0x150>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b3e      	ldr	r3, [pc, #248]	; (8005a4c <xTaskIncrementTick+0x154>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <xTaskIncrementTick+0x154>)
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	f000 fa98 	bl	8005e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005960:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <xTaskIncrementTick+0x158>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	429a      	cmp	r2, r3
 8005968:	d348      	bcc.n	80059fc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596a:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <xTaskIncrementTick+0x14c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <xTaskIncrementTick+0x158>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	601a      	str	r2, [r3, #0]
					break;
 800597c:	e03e      	b.n	80059fc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <xTaskIncrementTick+0x14c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d203      	bcs.n	800599e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005996:	4a2e      	ldr	r2, [pc, #184]	; (8005a50 <xTaskIncrementTick+0x158>)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800599c:	e02e      	b.n	80059fc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f8e9 	bl	8004b7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff f8e0 	bl	8004b7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	409a      	lsls	r2, r3
 80059c2:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <xTaskIncrementTick+0x15c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <xTaskIncrementTick+0x15c>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <xTaskIncrementTick+0x160>)
 80059da:	441a      	add	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7ff f86c 	bl	8004ac0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <xTaskIncrementTick+0x164>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3b9      	bcc.n	800596a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059fa:	e7b6      	b.n	800596a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <xTaskIncrementTick+0x164>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	4915      	ldr	r1, [pc, #84]	; (8005a58 <xTaskIncrementTick+0x160>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d907      	bls.n	8005a24 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e004      	b.n	8005a24 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <xTaskIncrementTick+0x168>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <xTaskIncrementTick+0x168>)
 8005a22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a24:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <xTaskIncrementTick+0x16c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a30:	697b      	ldr	r3, [r7, #20]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200003a8 	.word	0x200003a8
 8005a40:	20000384 	.word	0x20000384
 8005a44:	20000338 	.word	0x20000338
 8005a48:	2000033c 	.word	0x2000033c
 8005a4c:	20000398 	.word	0x20000398
 8005a50:	200003a0 	.word	0x200003a0
 8005a54:	20000388 	.word	0x20000388
 8005a58:	20000284 	.word	0x20000284
 8005a5c:	20000280 	.word	0x20000280
 8005a60:	20000390 	.word	0x20000390
 8005a64:	20000394 	.word	0x20000394

08005a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a6e:	4b26      	ldr	r3, [pc, #152]	; (8005b08 <vTaskSwitchContext+0xa0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a76:	4b25      	ldr	r3, [pc, #148]	; (8005b0c <vTaskSwitchContext+0xa4>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a7c:	e03e      	b.n	8005afc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <vTaskSwitchContext+0xa4>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a84:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <vTaskSwitchContext+0xa8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	fab3 f383 	clz	r3, r3
 8005a90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	f1c3 031f 	rsb	r3, r3, #31
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	491e      	ldr	r1, [pc, #120]	; (8005b14 <vTaskSwitchContext+0xac>)
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	e7fe      	b.n	8005ac0 <vTaskSwitchContext+0x58>
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <vTaskSwitchContext+0xac>)
 8005ace:	4413      	add	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d104      	bne.n	8005af2 <vTaskSwitchContext+0x8a>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a07      	ldr	r2, [pc, #28]	; (8005b18 <vTaskSwitchContext+0xb0>)
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	200003a8 	.word	0x200003a8
 8005b0c:	20000394 	.word	0x20000394
 8005b10:	20000388 	.word	0x20000388
 8005b14:	20000284 	.word	0x20000284
 8005b18:	20000280 	.word	0x20000280

08005b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <vTaskPlaceOnEventList+0x24>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	e7fe      	b.n	8005b3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <vTaskPlaceOnEventList+0x44>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3318      	adds	r3, #24
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fe ffdd 	bl	8004b08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b4e:	2101      	movs	r1, #1
 8005b50:	6838      	ldr	r0, [r7, #0]
 8005b52:	f000 fa5f 	bl	8006014 <prvAddCurrentTaskToDelayedList>
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000280 	.word	0x20000280

08005b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <xTaskRemoveFromEventList+0x2a>
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e7fe      	b.n	8005b8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3318      	adds	r3, #24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fff1 	bl	8004b7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b98:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <xTaskRemoveFromEventList+0xac>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11c      	bne.n	8005bda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe ffe8 	bl	8004b7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	2201      	movs	r2, #1
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <xTaskRemoveFromEventList+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <xTaskRemoveFromEventList+0xb0>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <xTaskRemoveFromEventList+0xb4>)
 8005bca:	441a      	add	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f7fe ff74 	bl	8004ac0 <vListInsertEnd>
 8005bd8:	e005      	b.n	8005be6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3318      	adds	r3, #24
 8005bde:	4619      	mov	r1, r3
 8005be0:	480e      	ldr	r0, [pc, #56]	; (8005c1c <xTaskRemoveFromEventList+0xb8>)
 8005be2:	f7fe ff6d 	bl	8004ac0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <xTaskRemoveFromEventList+0xbc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d905      	bls.n	8005c00 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <xTaskRemoveFromEventList+0xc0>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e001      	b.n	8005c04 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c04:	697b      	ldr	r3, [r7, #20]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	200003a8 	.word	0x200003a8
 8005c14:	20000388 	.word	0x20000388
 8005c18:	20000284 	.word	0x20000284
 8005c1c:	20000340 	.word	0x20000340
 8005c20:	20000280 	.word	0x20000280
 8005c24:	20000394 	.word	0x20000394

08005c28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <vTaskInternalSetTimeOutState+0x24>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <vTaskInternalSetTimeOutState+0x28>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000398 	.word	0x20000398
 8005c50:	20000384 	.word	0x20000384

08005c54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <xTaskCheckForTimeOut+0x24>
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e7fe      	b.n	8005c76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <xTaskCheckForTimeOut+0x3e>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e7fe      	b.n	8005c90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005c92:	f000 fb4b 	bl	800632c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <xTaskCheckForTimeOut+0xb8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d102      	bne.n	8005cb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e023      	b.n	8005cfe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <xTaskCheckForTimeOut+0xbc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d007      	beq.n	8005cd2 <xTaskCheckForTimeOut+0x7e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d302      	bcc.n	8005cd2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e015      	b.n	8005cfe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d20b      	bcs.n	8005cf4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ff9d 	bl	8005c28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e004      	b.n	8005cfe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cfe:	f000 fb43 	bl	8006388 <vPortExitCritical>

	return xReturn;
 8005d02:	69fb      	ldr	r3, [r7, #28]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000384 	.word	0x20000384
 8005d10:	20000398 	.word	0x20000398

08005d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <vTaskMissedYield+0x14>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20000394 	.word	0x20000394

08005d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d34:	f000 f852 	bl	8005ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <prvIdleTask+0x28>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d9f9      	bls.n	8005d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <prvIdleTask+0x2c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d50:	e7f0      	b.n	8005d34 <prvIdleTask+0x8>
 8005d52:	bf00      	nop
 8005d54:	20000284 	.word	0x20000284
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e00c      	b.n	8005d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <prvInitialiseTaskLists+0x60>)
 8005d74:	4413      	add	r3, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fe75 	bl	8004a66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b06      	cmp	r3, #6
 8005d86:	d9ef      	bls.n	8005d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d88:	480d      	ldr	r0, [pc, #52]	; (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005d8a:	f7fe fe6c 	bl	8004a66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d8e:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005d90:	f7fe fe69 	bl	8004a66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d94:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <prvInitialiseTaskLists+0x6c>)
 8005d96:	f7fe fe66 	bl	8004a66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d9a:	480c      	ldr	r0, [pc, #48]	; (8005dcc <prvInitialiseTaskLists+0x70>)
 8005d9c:	f7fe fe63 	bl	8004a66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da0:	480b      	ldr	r0, [pc, #44]	; (8005dd0 <prvInitialiseTaskLists+0x74>)
 8005da2:	f7fe fe60 	bl	8004a66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <prvInitialiseTaskLists+0x78>)
 8005da8:	4a05      	ldr	r2, [pc, #20]	; (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvInitialiseTaskLists+0x7c>)
 8005dae:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000284 	.word	0x20000284
 8005dc0:	20000310 	.word	0x20000310
 8005dc4:	20000324 	.word	0x20000324
 8005dc8:	20000340 	.word	0x20000340
 8005dcc:	20000354 	.word	0x20000354
 8005dd0:	2000036c 	.word	0x2000036c
 8005dd4:	20000338 	.word	0x20000338
 8005dd8:	2000033c 	.word	0x2000033c

08005ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de2:	e019      	b.n	8005e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005de4:	f000 faa2 	bl	800632c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <prvCheckTasksWaitingTermination+0x4c>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fec0 	bl	8004b7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <prvCheckTasksWaitingTermination+0x50>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <prvCheckTasksWaitingTermination+0x50>)
 8005e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e0e:	f000 fabb 	bl	8006388 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f80e 	bl	8005e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e1      	bne.n	8005de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000354 	.word	0x20000354
 8005e2c:	20000380 	.word	0x20000380
 8005e30:	20000368 	.word	0x20000368

08005e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d108      	bne.n	8005e58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fc0c 	bl	8006668 <vPortFree>
				vPortFree( pxTCB );
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fc09 	bl	8006668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e56:	e017      	b.n	8005e88 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d103      	bne.n	8005e6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fc00 	bl	8006668 <vPortFree>
	}
 8005e68:	e00e      	b.n	8005e88 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d009      	beq.n	8005e88 <prvDeleteTCB+0x54>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e7fe      	b.n	8005e86 <prvDeleteTCB+0x52>
	}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvResetNextTaskUnblockTime+0x38>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <prvResetNextTaskUnblockTime+0x3c>)
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea8:	e008      	b.n	8005ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <prvResetNextTaskUnblockTime+0x38>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <prvResetNextTaskUnblockTime+0x3c>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000338 	.word	0x20000338
 8005ecc:	200003a0 	.word	0x200003a0

08005ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <xTaskGetSchedulerState+0x34>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	e008      	b.n	8005ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <xTaskGetSchedulerState+0x38>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005eec:	2302      	movs	r3, #2
 8005eee:	607b      	str	r3, [r7, #4]
 8005ef0:	e001      	b.n	8005ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ef6:	687b      	ldr	r3, [r7, #4]
	}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	2000038c 	.word	0x2000038c
 8005f08:	200003a8 	.word	0x200003a8

08005f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d06c      	beq.n	8005ffc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f22:	4b39      	ldr	r3, [pc, #228]	; (8006008 <xTaskPriorityDisinherit+0xfc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d009      	beq.n	8005f40 <xTaskPriorityDisinherit+0x34>
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e7fe      	b.n	8005f3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <xTaskPriorityDisinherit+0x50>
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	e7fe      	b.n	8005f5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d044      	beq.n	8005ffc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d140      	bne.n	8005ffc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fdfb 	bl	8004b7a <uxListRemove>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d115      	bne.n	8005fb6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	491f      	ldr	r1, [pc, #124]	; (800600c <xTaskPriorityDisinherit+0x100>)
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xTaskPriorityDisinherit+0xaa>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43da      	mvns	r2, r3
 8005fac:	4b18      	ldr	r3, [pc, #96]	; (8006010 <xTaskPriorityDisinherit+0x104>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	4a17      	ldr	r2, [pc, #92]	; (8006010 <xTaskPriorityDisinherit+0x104>)
 8005fb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	f1c3 0207 	rsb	r2, r3, #7
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	2201      	movs	r2, #1
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <xTaskPriorityDisinherit+0x104>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	4a0d      	ldr	r2, [pc, #52]	; (8006010 <xTaskPriorityDisinherit+0x104>)
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4a08      	ldr	r2, [pc, #32]	; (800600c <xTaskPriorityDisinherit+0x100>)
 8005fea:	441a      	add	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fd64 	bl	8004ac0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ffc:	697b      	ldr	r3, [r7, #20]
	}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000280 	.word	0x20000280
 800600c:	20000284 	.word	0x20000284
 8006010:	20000388 	.word	0x20000388

08006014 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800601e:	4b29      	ldr	r3, [pc, #164]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006024:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fda5 	bl	8004b7a <uxListRemove>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006036:	4b24      	ldr	r3, [pc, #144]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	2201      	movs	r2, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43da      	mvns	r2, r3
 8006044:	4b21      	ldr	r3, [pc, #132]	; (80060cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4013      	ands	r3, r2
 800604a:	4a20      	ldr	r2, [pc, #128]	; (80060cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800604c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d10a      	bne.n	800606c <prvAddCurrentTaskToDelayedList+0x58>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605c:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	481a      	ldr	r0, [pc, #104]	; (80060d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006066:	f7fe fd2b 	bl	8004ac0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800606a:	e026      	b.n	80060ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006074:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	429a      	cmp	r2, r3
 8006082:	d209      	bcs.n	8006098 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006084:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3304      	adds	r3, #4
 800608e:	4619      	mov	r1, r3
 8006090:	4610      	mov	r0, r2
 8006092:	f7fe fd39 	bl	8004b08 <vListInsert>
}
 8006096:	e010      	b.n	80060ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7fe fd2f 	bl	8004b08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d202      	bcs.n	80060ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6013      	str	r3, [r2, #0]
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000384 	.word	0x20000384
 80060c8:	20000280 	.word	0x20000280
 80060cc:	20000388 	.word	0x20000388
 80060d0:	2000036c 	.word	0x2000036c
 80060d4:	2000033c 	.word	0x2000033c
 80060d8:	20000338 	.word	0x20000338
 80060dc:	200003a0 	.word	0x200003a0

080060e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3b04      	subs	r3, #4
 80060f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3b04      	subs	r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3b04      	subs	r3, #4
 800610e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006110:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <pxPortInitialiseStack+0x64>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b14      	subs	r3, #20
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b04      	subs	r3, #4
 8006126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f06f 0202 	mvn.w	r2, #2
 800612e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3b20      	subs	r3, #32
 8006134:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006136:	68fb      	ldr	r3, [r7, #12]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	08006149 	.word	0x08006149

08006148 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <prvTaskExitError+0x50>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d009      	beq.n	8006170 <prvTaskExitError+0x28>
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e7fe      	b.n	800616e <prvTaskExitError+0x26>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006182:	bf00      	nop
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0fc      	beq.n	8006184 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800618a:	bf00      	nop
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	2000000c 	.word	0x2000000c
 800619c:	00000000 	.word	0x00000000

080061a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <pxCurrentTCBConst2>)
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	6808      	ldr	r0, [r1, #0]
 80061a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	f380 8809 	msr	PSP, r0
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8811 	msr	BASEPRI, r0
 80061ba:	4770      	bx	lr
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst2>:
 80061c0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061c8:	4808      	ldr	r0, [pc, #32]	; (80061ec <prvPortStartFirstTask+0x24>)
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f380 8808 	msr	MSP, r0
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8814 	msr	CONTROL, r0
 80061da:	b662      	cpsie	i
 80061dc:	b661      	cpsie	f
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	df00      	svc	0
 80061e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ea:	bf00      	nop
 80061ec:	e000ed08 	.word	0xe000ed08

080061f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061f6:	4b44      	ldr	r3, [pc, #272]	; (8006308 <xPortStartScheduler+0x118>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a44      	ldr	r2, [pc, #272]	; (800630c <xPortStartScheduler+0x11c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d109      	bne.n	8006214 <xPortStartScheduler+0x24>
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e7fe      	b.n	8006212 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006214:	4b3c      	ldr	r3, [pc, #240]	; (8006308 <xPortStartScheduler+0x118>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a3d      	ldr	r2, [pc, #244]	; (8006310 <xPortStartScheduler+0x120>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d109      	bne.n	8006232 <xPortStartScheduler+0x42>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e7fe      	b.n	8006230 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006232:	4b38      	ldr	r3, [pc, #224]	; (8006314 <xPortStartScheduler+0x124>)
 8006234:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006254:	b2da      	uxtb	r2, r3
 8006256:	4b30      	ldr	r3, [pc, #192]	; (8006318 <xPortStartScheduler+0x128>)
 8006258:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800625a:	4b30      	ldr	r3, [pc, #192]	; (800631c <xPortStartScheduler+0x12c>)
 800625c:	2207      	movs	r2, #7
 800625e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006260:	e009      	b.n	8006276 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006262:	4b2e      	ldr	r3, [pc, #184]	; (800631c <xPortStartScheduler+0x12c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3b01      	subs	r3, #1
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <xPortStartScheduler+0x12c>)
 800626a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b80      	cmp	r3, #128	; 0x80
 8006280:	d0ef      	beq.n	8006262 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006282:	4b26      	ldr	r3, [pc, #152]	; (800631c <xPortStartScheduler+0x12c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1c3 0307 	rsb	r3, r3, #7
 800628a:	2b04      	cmp	r3, #4
 800628c:	d009      	beq.n	80062a2 <xPortStartScheduler+0xb2>
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	e7fe      	b.n	80062a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <xPortStartScheduler+0x12c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	4a1c      	ldr	r2, [pc, #112]	; (800631c <xPortStartScheduler+0x12c>)
 80062aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <xPortStartScheduler+0x12c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <xPortStartScheduler+0x12c>)
 80062b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062c0:	4b17      	ldr	r3, [pc, #92]	; (8006320 <xPortStartScheduler+0x130>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a16      	ldr	r2, [pc, #88]	; (8006320 <xPortStartScheduler+0x130>)
 80062c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062cc:	4b14      	ldr	r3, [pc, #80]	; (8006320 <xPortStartScheduler+0x130>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a13      	ldr	r2, [pc, #76]	; (8006320 <xPortStartScheduler+0x130>)
 80062d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062d8:	f000 f8d6 	bl	8006488 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062dc:	4b11      	ldr	r3, [pc, #68]	; (8006324 <xPortStartScheduler+0x134>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062e2:	f000 f8f5 	bl	80064d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <xPortStartScheduler+0x138>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a0f      	ldr	r2, [pc, #60]	; (8006328 <xPortStartScheduler+0x138>)
 80062ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062f2:	f7ff ff69 	bl	80061c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062f6:	f7ff fbb7 	bl	8005a68 <vTaskSwitchContext>
	prvTaskExitError();
 80062fa:	f7ff ff25 	bl	8006148 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	e000ed00 	.word	0xe000ed00
 800630c:	410fc271 	.word	0x410fc271
 8006310:	410fc270 	.word	0x410fc270
 8006314:	e000e400 	.word	0xe000e400
 8006318:	200003ac 	.word	0x200003ac
 800631c:	200003b0 	.word	0x200003b0
 8006320:	e000ed20 	.word	0xe000ed20
 8006324:	2000000c 	.word	0x2000000c
 8006328:	e000ef34 	.word	0xe000ef34

0800632c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <vPortEnterCritical+0x54>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4a0d      	ldr	r2, [pc, #52]	; (8006380 <vPortEnterCritical+0x54>)
 800634c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <vPortEnterCritical+0x54>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10e      	bne.n	8006374 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <vPortEnterCritical+0x58>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <vPortEnterCritical+0x48>
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	e7fe      	b.n	8006372 <vPortEnterCritical+0x46>
	}
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	2000000c 	.word	0x2000000c
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <vPortExitCritical+0x4c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <vPortExitCritical+0x22>
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	607b      	str	r3, [r7, #4]
 80063a8:	e7fe      	b.n	80063a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <vPortExitCritical+0x4c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	4a08      	ldr	r2, [pc, #32]	; (80063d4 <vPortExitCritical+0x4c>)
 80063b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <vPortExitCritical+0x4c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <vPortExitCritical+0x3e>
 80063bc:	2300      	movs	r3, #0
 80063be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000000c 	.word	0x2000000c
	...

080063e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063e0:	f3ef 8009 	mrs	r0, PSP
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <pxCurrentTCBConst>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	f01e 0f10 	tst.w	lr, #16
 80063f0:	bf08      	it	eq
 80063f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006404:	f380 8811 	msr	BASEPRI, r0
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f7ff fb2a 	bl	8005a68 <vTaskSwitchContext>
 8006414:	f04f 0000 	mov.w	r0, #0
 8006418:	f380 8811 	msr	BASEPRI, r0
 800641c:	bc09      	pop	{r0, r3}
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	6808      	ldr	r0, [r1, #0]
 8006422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006426:	f01e 0f10 	tst.w	lr, #16
 800642a:	bf08      	it	eq
 800642c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006430:	f380 8809 	msr	PSP, r0
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst>:
 8006440:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006460:	f7ff fa4a 	bl	80058f8 <xTaskIncrementTick>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <SysTick_Handler+0x3c>)
 800646c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <vPortSetupTimerInterrupt+0x34>)
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <vPortSetupTimerInterrupt+0x38>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <vPortSetupTimerInterrupt+0x3c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <vPortSetupTimerInterrupt+0x40>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	099b      	lsrs	r3, r3, #6
 80064a4:	4a09      	ldr	r2, [pc, #36]	; (80064cc <vPortSetupTimerInterrupt+0x44>)
 80064a6:	3b01      	subs	r3, #1
 80064a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064aa:	4b04      	ldr	r3, [pc, #16]	; (80064bc <vPortSetupTimerInterrupt+0x34>)
 80064ac:	2207      	movs	r2, #7
 80064ae:	601a      	str	r2, [r3, #0]
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	e000e010 	.word	0xe000e010
 80064c0:	e000e018 	.word	0xe000e018
 80064c4:	20000000 	.word	0x20000000
 80064c8:	10624dd3 	.word	0x10624dd3
 80064cc:	e000e014 	.word	0xe000e014

080064d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064e0 <vPortEnableVFP+0x10>
 80064d4:	6801      	ldr	r1, [r0, #0]
 80064d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064da:	6001      	str	r1, [r0, #0]
 80064dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064de:	bf00      	nop
 80064e0:	e000ed88 	.word	0xe000ed88

080064e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064f0:	f7ff f958 	bl	80057a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064f4:	4b57      	ldr	r3, [pc, #348]	; (8006654 <pvPortMalloc+0x170>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064fc:	f000 f90c 	bl	8006718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006500:	4b55      	ldr	r3, [pc, #340]	; (8006658 <pvPortMalloc+0x174>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4013      	ands	r3, r2
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 808c 	bne.w	8006626 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01c      	beq.n	800654e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006514:	2208      	movs	r2, #8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	3308      	adds	r3, #8
 800652e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <pvPortMalloc+0x6a>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e7fe      	b.n	800654c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d068      	beq.n	8006626 <pvPortMalloc+0x142>
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <pvPortMalloc+0x178>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d863      	bhi.n	8006626 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800655e:	4b40      	ldr	r3, [pc, #256]	; (8006660 <pvPortMalloc+0x17c>)
 8006560:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006562:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <pvPortMalloc+0x17c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006568:	e004      	b.n	8006574 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d903      	bls.n	8006586 <pvPortMalloc+0xa2>
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f1      	bne.n	800656a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006586:	4b33      	ldr	r3, [pc, #204]	; (8006654 <pvPortMalloc+0x170>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	429a      	cmp	r2, r3
 800658e:	d04a      	beq.n	8006626 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	4413      	add	r3, r2
 8006598:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	2308      	movs	r3, #8
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d91e      	bls.n	80065f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <pvPortMalloc+0xf4>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e7fe      	b.n	80065d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065ea:	69b8      	ldr	r0, [r7, #24]
 80065ec:	f000 f8f6 	bl	80067dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065f0:	4b1a      	ldr	r3, [pc, #104]	; (800665c <pvPortMalloc+0x178>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	4a18      	ldr	r2, [pc, #96]	; (800665c <pvPortMalloc+0x178>)
 80065fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065fe:	4b17      	ldr	r3, [pc, #92]	; (800665c <pvPortMalloc+0x178>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b18      	ldr	r3, [pc, #96]	; (8006664 <pvPortMalloc+0x180>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d203      	bcs.n	8006612 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <pvPortMalloc+0x178>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <pvPortMalloc+0x180>)
 8006610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <pvPortMalloc+0x174>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	431a      	orrs	r2, r3
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006626:	f7ff f8cb 	bl	80057c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <pvPortMalloc+0x164>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e7fe      	b.n	8006646 <pvPortMalloc+0x162>
	return pvReturn;
 8006648:	69fb      	ldr	r3, [r7, #28]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20003fbc 	.word	0x20003fbc
 8006658:	20003fc8 	.word	0x20003fc8
 800665c:	20003fc0 	.word	0x20003fc0
 8006660:	20003fb4 	.word	0x20003fb4
 8006664:	20003fc4 	.word	0x20003fc4

08006668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d046      	beq.n	8006708 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800667a:	2308      	movs	r3, #8
 800667c:	425b      	negs	r3, r3
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4b20      	ldr	r3, [pc, #128]	; (8006710 <vPortFree+0xa8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <vPortFree+0x42>
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e7fe      	b.n	80066a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <vPortFree+0x5e>
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	e7fe      	b.n	80066c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <vPortFree+0xa8>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d019      	beq.n	8006708 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d115      	bne.n	8006708 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortFree+0xa8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066ec:	f7ff f85a 	bl	80057a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <vPortFree+0xac>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4413      	add	r3, r2
 80066fa:	4a06      	ldr	r2, [pc, #24]	; (8006714 <vPortFree+0xac>)
 80066fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066fe:	6938      	ldr	r0, [r7, #16]
 8006700:	f000 f86c 	bl	80067dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006704:	f7ff f85c 	bl	80057c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006708:	bf00      	nop
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20003fc8 	.word	0x20003fc8
 8006714:	20003fc0 	.word	0x20003fc0

08006718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800671e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <prvHeapInit+0xac>)
 8006726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3307      	adds	r3, #7
 8006736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	4a1f      	ldr	r2, [pc, #124]	; (80067c4 <prvHeapInit+0xac>)
 8006748:	4413      	add	r3, r2
 800674a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <prvHeapInit+0xb0>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006756:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <prvHeapInit+0xb0>)
 8006758:	2200      	movs	r2, #0
 800675a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4413      	add	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006764:	2208      	movs	r2, #8
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a15      	ldr	r2, [pc, #84]	; (80067cc <prvHeapInit+0xb4>)
 8006778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800677a:	4b14      	ldr	r3, [pc, #80]	; (80067cc <prvHeapInit+0xb4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <prvHeapInit+0xb4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <prvHeapInit+0xb4>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <prvHeapInit+0xb8>)
 80067a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <prvHeapInit+0xbc>)
 80067ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <prvHeapInit+0xc0>)
 80067b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	200003b4 	.word	0x200003b4
 80067c8:	20003fb4 	.word	0x20003fb4
 80067cc:	20003fbc 	.word	0x20003fbc
 80067d0:	20003fc4 	.word	0x20003fc4
 80067d4:	20003fc0 	.word	0x20003fc0
 80067d8:	20003fc8 	.word	0x20003fc8

080067dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067e4:	4b28      	ldr	r3, [pc, #160]	; (8006888 <prvInsertBlockIntoFreeList+0xac>)
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e002      	b.n	80067f0 <prvInsertBlockIntoFreeList+0x14>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d8f7      	bhi.n	80067ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d108      	bne.n	800681e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d118      	bne.n	8006864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b15      	ldr	r3, [pc, #84]	; (800688c <prvInsertBlockIntoFreeList+0xb0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d00d      	beq.n	800685a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e008      	b.n	800686c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <prvInsertBlockIntoFreeList+0xb0>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e003      	b.n	800686c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d002      	beq.n	800687a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20003fb4 	.word	0x20003fb4
 800688c:	20003fbc 	.word	0x20003fbc

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4e0d      	ldr	r6, [pc, #52]	; (80068c8 <__libc_init_array+0x38>)
 8006894:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006896:	1ba4      	subs	r4, r4, r6
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	2500      	movs	r5, #0
 800689c:	42a5      	cmp	r5, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	4e0b      	ldr	r6, [pc, #44]	; (80068d0 <__libc_init_array+0x40>)
 80068a2:	4c0c      	ldr	r4, [pc, #48]	; (80068d4 <__libc_init_array+0x44>)
 80068a4:	f000 f82c 	bl	8006900 <_init>
 80068a8:	1ba4      	subs	r4, r4, r6
 80068aa:	10a4      	asrs	r4, r4, #2
 80068ac:	2500      	movs	r5, #0
 80068ae:	42a5      	cmp	r5, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b8:	4798      	blx	r3
 80068ba:	3501      	adds	r5, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c2:	4798      	blx	r3
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	08006990 	.word	0x08006990
 80068cc:	08006990 	.word	0x08006990
 80068d0:	08006990 	.word	0x08006990
 80068d4:	08006994 	.word	0x08006994

080068d8 <memcpy>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	1e43      	subs	r3, r0, #1
 80068dc:	440a      	add	r2, r1
 80068de:	4291      	cmp	r1, r2
 80068e0:	d100      	bne.n	80068e4 <memcpy+0xc>
 80068e2:	bd10      	pop	{r4, pc}
 80068e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ec:	e7f7      	b.n	80068de <memcpy+0x6>

080068ee <memset>:
 80068ee:	4402      	add	r2, r0
 80068f0:	4603      	mov	r3, r0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d100      	bne.n	80068f8 <memset+0xa>
 80068f6:	4770      	bx	lr
 80068f8:	f803 1b01 	strb.w	r1, [r3], #1
 80068fc:	e7f9      	b.n	80068f2 <memset+0x4>
	...

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
