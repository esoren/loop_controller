
loop_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000010  08005ef0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004178  08005ef0  00024178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003577  00000000  00000000  00036919  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00039e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018448  00000000  00000000  0003c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000117ba  00000000  00000000  00054900  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099cc1  00000000  00000000  000660ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffd7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  000ffdf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e48 	.word	0x08005e48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005e48 	.word	0x08005e48

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC1_Init+0x98>)
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_ADC1_Init+0x9c>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC1_Init+0x98>)
 80004fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_ADC1_Init+0x98>)
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_ADC1_Init+0xa0>)
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_ADC1_Init+0x98>)
 800052e:	2201      	movs	r2, #1
 8000530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_ADC1_Init+0x98>)
 800053c:	2201      	movs	r2, #1
 800053e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_ADC1_Init+0x98>)
 8000542:	f001 f87f 	bl	8001644 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 fa20 	bl	8000990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_ADC1_Init+0x98>)
 8000562:	f001 f8b3 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800056c:	f000 fa10 	bl	8000990 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20003fcc 	.word	0x20003fcc
 800057c:	40012000 	.word	0x40012000
 8000580:	0f000001 	.word	0x0f000001

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_ADC_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_ADC_MspInit+0x84>)
 80005f2:	f001 fb6b 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012000 	.word	0x40012000
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000

0800060c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <DWT_Delay_Init+0x58>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <DWT_Delay_Init+0x58>)
 8000616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800061a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <DWT_Delay_Init+0x58>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a10      	ldr	r2, [pc, #64]	; (8000664 <DWT_Delay_Init+0x58>)
 8000622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000626:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <DWT_Delay_Init+0x5c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <DWT_Delay_Init+0x5c>)
 800062e:	f023 0301 	bic.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <DWT_Delay_Init+0x5c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <DWT_Delay_Init+0x5c>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <DWT_Delay_Init+0x5c>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  	 asm("NOP");
 8000646:	bf00      	nop
  	 asm("NOP");
 8000648:	bf00      	nop
  	 asm("NOP");
 800064a:	bf00      	nop


  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <DWT_Delay_Init+0x5c>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000658:	2301      	movs	r3, #1
  }
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000edf0 	.word	0xe000edf0
 8000668:	e0001000 	.word	0xe0001000

0800066c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <vApplicationGetIdleTaskMemory+0x2c>)
 800067c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <vApplicationGetIdleTaskMemory+0x30>)
 8000682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000080 	.word	0x20000080

080006a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_FREERTOS_Init+0x58>)
 80006a8:	f107 041c 	add.w	r4, r7, #28
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f990 	bl	80049e6 <osThreadCreate>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_FREERTOS_Init+0x5c>)
 80006ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_FREERTOS_Init+0x60>)
 80006ce:	463c      	mov	r4, r7
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80006de:	463b      	mov	r3, r7
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 f97f 	bl	80049e6 <osThreadCreate>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_FREERTOS_Init+0x64>)
 80006ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80006ee:	bf00      	nop
 80006f0:	3738      	adds	r7, #56	; 0x38
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bdb0      	pop	{r4, r5, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08005e6c 	.word	0x08005e6c
 80006fc:	20004014 	.word	0x20004014
 8000700:	08005e94 	.word	0x08005e94
 8000704:	20004018 	.word	0x20004018

08000708 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f004 f9b4 	bl	8004a7e <osDelay>
 8000716:	e7fb      	b.n	8000710 <StartDefaultTask+0x8>

08000718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a42      	ldr	r2, [pc, #264]	; (8000840 <MX_GPIO_Init+0x128>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <MX_GPIO_Init+0x128>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <MX_GPIO_Init+0x128>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <MX_GPIO_Init+0x128>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0x128>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <MX_GPIO_Init+0x128>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_GPIO_Init+0x128>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <MX_GPIO_Init+0x128>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0x128>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80007a4:	4827      	ldr	r0, [pc, #156]	; (8000844 <MX_GPIO_Init+0x12c>)
 80007a6:	f001 fc13 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	4825      	ldr	r0, [pc, #148]	; (8000848 <MX_GPIO_Init+0x130>)
 80007b2:	f001 fc0d 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_PWR_Pin|MOTOR_CS_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007bc:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_GPIO_Init+0x134>)
 80007be:	f001 fc07 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_GPIO_Init+0x138>)
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_GPIO_Init+0x130>)
 80007d8:	f001 fa78 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 80007dc:	f44f 7304 	mov.w	r3, #528	; 0x210
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_GPIO_Init+0x12c>)
 80007f6:	f001 fa69 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 80007fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_GPIO_Init+0x130>)
 8000814:	f001 fa5a 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TMC_PWR_Pin|MOTOR_CS_Pin;
 8000818:	f44f 7340 	mov.w	r3, #768	; 0x300
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_GPIO_Init+0x134>)
 8000832:	f001 fa4b 	bl	8001ccc <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020800 	.word	0x40020800
 800084c:	40020400 	.word	0x40020400
 8000850:	10210000 	.word	0x10210000

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fe90 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f81a 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f7ff ff5a 	bl	8000718 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000864:	f000 f95e 	bl	8000b24 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000868:	f000 fdec 	bl	8001444 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800086c:	f7ff fe38 	bl	80004e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000870:	f000 fabe 	bl	8000df0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000874:	f000 fb60 	bl	8000f38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  enable_motor_driver();
 8000878:	f000 f88e 	bl	8000998 <enable_motor_driver>
  DWT_Delay_Init();
 800087c:	f7ff fec6 	bl	800060c <DWT_Delay_Init>
  tmc_init();
 8000880:	f000 fd76 	bl	8001370 <tmc_init>

  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000884:	2003      	movs	r0, #3
 8000886:	f001 f9ec 	bl	8001c62 <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800088a:	f7ff ff09 	bl	80006a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800088e:	f004 f8a3 	bl	80049d8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000892:	e7fe      	b.n	8000892 <main+0x3e>

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fac8 	bl	8005e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <SystemClock_Config+0xd0>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a28      	ldr	r2, [pc, #160]	; (8000964 <SystemClock_Config+0xd0>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <SystemClock_Config+0xd0>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd4>)
 80008e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	2310      	movs	r3, #16
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000904:	2300      	movs	r3, #0
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000908:	2310      	movs	r3, #16
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800090c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000912:	2304      	movs	r3, #4
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fb70 	bl	8002004 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092a:	f000 f831 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fdca 	bl	80024e4 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000956:	f000 f81b 	bl	8000990 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097e:	f000 fe1f 	bl	80015c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40000c00 	.word	0x40000c00

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x4>
	...

08000998 <enable_motor_driver>:
#include "dwt_stm32_delay.h"
#include "tim.h"
#include "tmc2130.h"


void enable_motor_driver(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2110      	movs	r1, #16
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <enable_motor_driver+0x14>)
 80009a2:	f001 fb15 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020000 	.word	0x40020000

080009b0 <set_motor_dir>:
void disable_motor_driver(void) {
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
}


void set_motor_dir(uint8_t motor_dir) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	if(motor_dir == 0) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d106      	bne.n	80009ce <set_motor_dir+0x1e>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <set_motor_dir+0x34>)
 80009c8:	f001 fb02 	bl	8001fd0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
	}
}
 80009cc:	e005      	b.n	80009da <set_motor_dir+0x2a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <set_motor_dir+0x34>)
 80009d6:	f001 fafb 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40020000 	.word	0x40020000

080009e8 <send_motor_steps>:

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim1, step_count);
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <send_motor_steps+0x58>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <send_motor_steps+0x58>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <send_motor_steps+0x58>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <send_motor_steps+0x58>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0201 	orr.w	r2, r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a10:	2100      	movs	r1, #0
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <send_motor_steps+0x58>)
 8000a14:	f002 face 	bl	8002fb4 <HAL_TIM_OC_Start_IT>

	__HAL_TIM_SET_AUTORELOAD(&htim2,delay_in_us);
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <send_motor_steps+0x5c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <send_motor_steps+0x5c>)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <send_motor_steps+0x5c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2264      	movs	r2, #100	; 0x64
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a2e:	2108      	movs	r1, #8
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <send_motor_steps+0x5c>)
 8000a32:	f002 fbfb 	bl	800322c <HAL_TIM_PWM_Start>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200040b4 	.word	0x200040b4
 8000a44:	200040f4 	.word	0x200040f4

08000a48 <StartMotorTask>:


void StartMotorTask(void const *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	uint8_t first = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(;;)
	  {
		  if(first) {
 8000a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d05e      	beq.n	8000b1c <StartMotorTask+0xd4>
			  uint8_t dir = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	77bb      	strb	r3, [r7, #30]
			  uint32_t wait = 20000;
 8000a62:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a66:	61bb      	str	r3, [r7, #24]
			  uint8_t move = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  uint32_t res = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
			  uint32_t sg_result = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
			  uint32_t min_sg_result = 1024;
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
			  uint32_t max_sg_result = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]


			  uint32_t count = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
			  uint8_t status = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
			  uint8_t homing = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	77fb      	strb	r3, [r7, #31]
			  set_motor_dir(0);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff ff8f 	bl	80009b0 <set_motor_dir>

			  while(homing == 1) {
 8000a92:	e035      	b.n	8000b00 <StartMotorTask+0xb8>
				  if(move) {
 8000a94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d02f      	beq.n	8000afc <StartMotorTask+0xb4>
					  send_motor_steps(400,wait);
 8000a9c:	69b9      	ldr	r1, [r7, #24]
 8000a9e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000aa2:	f7ff ffa1 	bl	80009e8 <send_motor_steps>
					  HAL_Delay(25); //wait for motor to settle before checking the stall result
 8000aa6:	2019      	movs	r0, #25
 8000aa8:	f000 fdaa 	bl	8001600 <HAL_Delay>

					  res = tmc_readwrite_register(TMC_REG_DRV_STATUS, res, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ab0:	206f      	movs	r0, #111	; 0x6f
 8000ab2:	f000 fbcb 	bl	800124c <tmc_readwrite_register>
 8000ab6:	62b8      	str	r0, [r7, #40]	; 0x28
					  sg_result = res & 0x3ff;
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000abe:	617b      	str	r3, [r7, #20]


					  if(sg_result > max_sg_result) max_sg_result = sg_result;
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d901      	bls.n	8000acc <StartMotorTask+0x84>
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	623b      	str	r3, [r7, #32]
					  if(sg_result > 0 && sg_result < min_sg_result ) min_sg_result = sg_result;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d005      	beq.n	8000ade <StartMotorTask+0x96>
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d201      	bcs.n	8000ade <StartMotorTask+0x96>
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24

					  status = tmc_get_status();
 8000ade:	f000 fb61 	bl	80011a4 <tmc_get_status>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73fb      	strb	r3, [r7, #15]
					  if((status >> 2) & 0x01) { //if stall is detected
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <StartMotorTask+0xb8>
						  move = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000afa:	e001      	b.n	8000b00 <StartMotorTask+0xb8>
					  }



				  } else {
					  homing = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	77fb      	strb	r3, [r7, #31]
			  while(homing == 1) {
 8000b00:	7ffb      	ldrb	r3, [r7, #31]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d0c6      	beq.n	8000a94 <StartMotorTask+0x4c>
				  }
			  }

			  set_motor_dir(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff ff52 	bl	80009b0 <set_motor_dir>
			  send_motor_steps(19100,wait);
 8000b0c:	69b9      	ldr	r1, [r7, #24]
 8000b0e:	f644 209c 	movw	r0, #19100	; 0x4a9c
 8000b12:	f7ff ff69 	bl	80009e8 <send_motor_steps>
			  first = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f





	    osDelay(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f003 ffae 	bl	8004a7e <osDelay>
		  if(first) {
 8000b22:	e798      	b.n	8000a56 <StartMotorTask+0xe>

08000b24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b2a:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <MX_SPI1_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b58:	2238      	movs	r2, #56	; 0x38
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b76:	f001 fed9 	bl	800292c <HAL_SPI_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b80:	f7ff ff06 	bl	8000990 <Error_Handler>
  }

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000401c 	.word	0x2000401c
 8000b8c:	40013000 	.word	0x40013000

08000b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_SPI_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23e0      	movs	r3, #224	; 0xe0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_SPI_MspInit+0x8c>)
 8000c06:	f001 f861 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013000 	.word	0x40013000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_MspInit+0x54>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_MspInit+0x54>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x54>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_MspInit+0x54>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_MspInit+0x54>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_MspInit+0x54>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210f      	movs	r1, #15
 8000c62:	f06f 0001 	mvn.w	r0, #1
 8000c66:	f001 f807 	bl	8001c78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2032      	movs	r0, #50	; 0x32
 8000c8e:	f000 fff3 	bl	8001c78 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000c92:	2032      	movs	r0, #50	; 0x32
 8000c94:	f001 f80c 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_InitTick+0xa4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_InitTick+0xa4>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_InitTick+0xa4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb4:	f107 0210 	add.w	r2, r7, #16
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fe02 	bl	80028c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cc4:	f001 fdd8 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <HAL_InitTick+0xa8>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	0c9b      	lsrs	r3, r3, #18
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_InitTick+0xac>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <HAL_InitTick+0xb0>)
 8000ce0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_InitTick+0xac>)
 8000ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_InitTick+0xac>)
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_InitTick+0xac>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_InitTick+0xac>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_InitTick+0xac>)
 8000cfe:	f002 f8d5 	bl	8002eac <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d104      	bne.n	8000d12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_InitTick+0xac>)
 8000d0a:	f002 f8fa 	bl	8002f02 <HAL_TIM_Base_Start_IT>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	20004074 	.word	0x20004074
 8000d28:	40000c00 	.word	0x40000c00

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000d64:	2108      	movs	r1, #8
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000d68:	f002 fa92 	bl	8003290 <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000d6e:	f002 fadb 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
        HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d72:	2100      	movs	r1, #0
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000d76:	f002 f995 	bl	80030a4 <HAL_TIM_OC_Stop_IT>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200040f4 	.word	0x200040f4
 8000d84:	200040b4 	.word	0x200040b4

08000d88 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d8e:	f002 facb 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200040b4 	.word	0x200040b4

08000d9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM1_CC_IRQHandler+0x10>)
 8000da2:	f002 fac1 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 // HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200040b4 	.word	0x200040b4

08000db0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM5_IRQHandler+0x10>)
 8000db6:	f002 fab7 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20004074 	.word	0x20004074

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <SystemInit+0x28>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <SystemInit+0x28>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SystemInit+0x28>)
 8000dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dde:	609a      	str	r2, [r3, #8]
#endif
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b096      	sub	sp, #88	; 0x58
 8000df4:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f005 f804 	bl	8005e38 <memset>

  htim1.Instance = TIM1;
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e32:	4a40      	ldr	r2, [pc, #256]	; (8000f34 <MX_TIM1_Init+0x144>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5a:	4835      	ldr	r0, [pc, #212]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e5c:	f002 f826 	bl	8002eac <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e66:	f7ff fd93 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e6a:	4831      	ldr	r0, [pc, #196]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e6c:	f002 f86d 	bl	8002f4a <HAL_TIM_OC_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e76:	f7ff fd8b 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000e7e:	2370      	movs	r3, #112	; 0x70
 8000e80:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000e82:	2300      	movs	r3, #0
 8000e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	653b      	str	r3, [r7, #80]	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e92:	4619      	mov	r1, r3
 8000e94:	4826      	ldr	r0, [pc, #152]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000e96:	f002 fd2c 	bl	80038f2 <HAL_TIM_SlaveConfigSynchro>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000ea0:	f7ff fd76 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481f      	ldr	r0, [pc, #124]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000eb4:	f003 f8da 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000ebe:	f7ff fd67 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000ee8:	f002 fb26 	bl	8003538 <HAL_TIM_OC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000ef2:	f7ff fd4d 	bl	8000990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_TIM1_Init+0x140>)
 8000f1a:	f003 f915 	bl	8004148 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000f24:	f7ff fd34 	bl	8000990 <Error_Handler>
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3758      	adds	r7, #88	; 0x58
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200040b4 	.word	0x200040b4
 8000f34:	40010000 	.word	0x40010000

08000f38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f7e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f90:	4823      	ldr	r0, [pc, #140]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000f92:	f001 ff8b 	bl	8002eac <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f9c:	f7ff fcf8 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481c      	ldr	r0, [pc, #112]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000fae:	f002 fbe9 	bl	8003784 <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000fb8:	f7ff fcea 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000fbe:	f002 f8ff 	bl	80031c0 <HAL_TIM_PWM_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fc8:	f7ff fce2 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_TIM2_Init+0xe8>)
 8000fdc:	f003 f846 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000fe6:	f7ff fcd3 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8000fee:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2208      	movs	r2, #8
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM2_Init+0xe8>)
 8001004:	f002 faf8 	bl	80035f8 <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800100e:	f7ff fcbf 	bl	8000990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM2_Init+0xe8>)
 8001014:	f000 f87a 	bl	800110c <HAL_TIM_MspPostInit>

}
 8001018:	bf00      	nop
 800101a:	3738      	adds	r7, #56	; 0x38
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200040f4 	.word	0x200040f4

08001024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <HAL_TIM_Base_MspInit+0xdc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d145      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a26      	ldr	r2, [pc, #152]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001090:	2301      	movs	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <HAL_TIM_Base_MspInit+0xe4>)
 800109c:	f000 fe16 	bl	8001ccc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2105      	movs	r1, #5
 80010a4:	2019      	movs	r0, #25
 80010a6:	f000 fde7 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010aa:	2019      	movs	r0, #25
 80010ac:	f000 fe00 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	201a      	movs	r0, #26
 80010b6:	f000 fddf 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010ba:	201a      	movs	r0, #26
 80010bc:	f000 fdf8 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2105      	movs	r1, #5
 80010c4:	201b      	movs	r0, #27
 80010c6:	f000 fdd7 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010ca:	201b      	movs	r0, #27
 80010cc:	f000 fdf0 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010d0:	e012      	b.n	80010f8 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010da:	d10d      	bne.n	80010f8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_TIM_Base_MspInit+0xe0>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40010000 	.word	0x40010000
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112c:	d11e      	bne.n	800116c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_TIM_MspPostInit+0x68>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_TIM_MspPostInit+0x68>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_TIM_MspPostInit+0x68>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800115c:	2301      	movs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <HAL_TIM_MspPostInit+0x6c>)
 8001168:	f000 fdb0 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400

0800117c <tmc_enable_stallguard>:
#include "cmsis_os.h"
#include "spi.h"
#include "gpio.h"


uint32_t tmc_enable_stallguard(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint32_t reg_data = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
	int8_t sgt = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	70fb      	strb	r3, [r7, #3]


	reg_data = 0x01060000; //sgt = 64, filt = 1;
 800118a:	f04f 7383 	mov.w	r3, #17170432	; 0x1060000
 800118e:	607b      	str	r3, [r7, #4]

	tmc_readwrite_register(TMC_REG_COOLCONF, reg_data, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	206d      	movs	r0, #109	; 0x6d
 8001196:	f000 f859 	bl	800124c <tmc_readwrite_register>




	return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <tmc_get_status>:


uint8_t tmc_get_status() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af02      	add	r7, sp, #8
		uint8_t rx_data[5];
		uint8_t tx_data[5];
		uint32_t payload =0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
		uint8_t status = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	76fb      	strb	r3, [r7, #27]
		uint8_t send_count = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	76bb      	strb	r3, [r7, #26]

		uint8_t addr = TMC_REG_GSTAT;
 80011b6:	2301      	movs	r3, #1
 80011b8:	767b      	strb	r3, [r7, #25]
		uint32_t data = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]


		tx_data[0] = addr;
 80011be:	7e7b      	ldrb	r3, [r7, #25]
 80011c0:	713b      	strb	r3, [r7, #4]
		tx_data[1] = (data >> 24) & 0x00ff;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	0e1b      	lsrs	r3, r3, #24
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	717b      	strb	r3, [r7, #5]
		tx_data[2] = (data >> 16) & 0x00ff;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	71bb      	strb	r3, [r7, #6]
		tx_data[3] = (data >> 8)  & 0x00ff;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	71fb      	strb	r3, [r7, #7]
		tx_data[4] = (data)	      & 0x00ff;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	723b      	strb	r3, [r7, #8]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011e0:	bf00      	nop
 80011e2:	4818      	ldr	r0, [pc, #96]	; (8001244 <tmc_get_status+0xa0>)
 80011e4:	f001 fda8 	bl	8002d38 <HAL_SPI_GetState>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d1f9      	bne.n	80011e2 <tmc_get_status+0x3e>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <tmc_get_status+0xa4>)
 80011f6:	f000 feeb 	bl	8001fd0 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011fa:	bf00      	nop
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <tmc_get_status+0xa0>)
 80011fe:	f001 fd9b 	bl	8002d38 <HAL_SPI_GetState>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d1f9      	bne.n	80011fc <tmc_get_status+0x58>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	1d39      	adds	r1, r7, #4
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2305      	movs	r3, #5
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <tmc_get_status+0xa0>)
 8001218:	f001 fbec 	bl	80029f4 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800121c:	bf00      	nop
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <tmc_get_status+0xa0>)
 8001220:	f001 fd8a 	bl	8002d38 <HAL_SPI_GetState>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d1f9      	bne.n	800121e <tmc_get_status+0x7a>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <tmc_get_status+0xa4>)
 8001232:	f000 fecd 	bl	8001fd0 <HAL_GPIO_WritePin>





		status = rx_data[0];
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	76fb      	strb	r3, [r7, #27]

		return status;
 800123a:	7efb      	ldrb	r3, [r7, #27]




}
 800123c:	4618      	mov	r0, r3
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000401c 	.word	0x2000401c
 8001248:	40020400 	.word	0x40020400

0800124c <tmc_readwrite_register>:

uint32_t tmc_readwrite_register(uint8_t addr, uint32_t data, uint8_t set_write_flag) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_data[5];
	uint8_t tx_data[5];
	uint32_t payload =0;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
	uint8_t send_count = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	77fb      	strb	r3, [r7, #31]


	if(set_write_flag) {
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <tmc_readwrite_register+0x2a>
		addr |= 0x80;
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001270:	71fb      	strb	r3, [r7, #7]
		send_count = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	77fb      	strb	r3, [r7, #31]

	}

	//send twice according to TMC2130 datasheet
	for (uint8_t i = 0; i < send_count; i++) {
 8001276:	2300      	movs	r3, #0
 8001278:	77bb      	strb	r3, [r7, #30]
 800127a:	e03f      	b.n	80012fc <tmc_readwrite_register+0xb0>

		tx_data[0] = addr;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	723b      	strb	r3, [r7, #8]
		tx_data[1] = (data >> 24) & 0x00ff;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	0e1b      	lsrs	r3, r3, #24
 8001284:	b2db      	uxtb	r3, r3
 8001286:	727b      	strb	r3, [r7, #9]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	0c1b      	lsrs	r3, r3, #16
 800128c:	b2db      	uxtb	r3, r3
 800128e:	72bb      	strb	r3, [r7, #10]
		tx_data[3] = (data >> 8)  & 0x00ff;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = (data)	      & 0x00ff;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	733b      	strb	r3, [r7, #12]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800129e:	bf00      	nop
 80012a0:	4820      	ldr	r0, [pc, #128]	; (8001324 <tmc_readwrite_register+0xd8>)
 80012a2:	f001 fd49 	bl	8002d38 <HAL_SPI_GetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d1f9      	bne.n	80012a0 <tmc_readwrite_register+0x54>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	481d      	ldr	r0, [pc, #116]	; (8001328 <tmc_readwrite_register+0xdc>)
 80012b4:	f000 fe8c 	bl	8001fd0 <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012b8:	bf00      	nop
 80012ba:	481a      	ldr	r0, [pc, #104]	; (8001324 <tmc_readwrite_register+0xd8>)
 80012bc:	f001 fd3c 	bl	8002d38 <HAL_SPI_GetState>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d1f9      	bne.n	80012ba <tmc_readwrite_register+0x6e>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80012c6:	f107 0210 	add.w	r2, r7, #16
 80012ca:	f107 0108 	add.w	r1, r7, #8
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2305      	movs	r3, #5
 80012d6:	4813      	ldr	r0, [pc, #76]	; (8001324 <tmc_readwrite_register+0xd8>)
 80012d8:	f001 fb8c 	bl	80029f4 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012dc:	bf00      	nop
 80012de:	4811      	ldr	r0, [pc, #68]	; (8001324 <tmc_readwrite_register+0xd8>)
 80012e0:	f001 fd2a 	bl	8002d38 <HAL_SPI_GetState>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d1f9      	bne.n	80012de <tmc_readwrite_register+0x92>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <tmc_readwrite_register+0xdc>)
 80012f2:	f000 fe6d 	bl	8001fd0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < send_count; i++) {
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	3301      	adds	r3, #1
 80012fa:	77bb      	strb	r3, [r7, #30]
 80012fc:	7fba      	ldrb	r2, [r7, #30]
 80012fe:	7ffb      	ldrb	r3, [r7, #31]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3bb      	bcc.n	800127c <tmc_readwrite_register+0x30>



	}

	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 8001304:	7c7b      	ldrb	r3, [r7, #17]
 8001306:	061a      	lsls	r2, r3, #24
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	441a      	add	r2, r3
			+ (rx_data[3] << 8 ) +  rx_data[4];
 800130e:	7cfb      	ldrb	r3, [r7, #19]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4413      	add	r3, r2
 8001314:	7d3a      	ldrb	r2, [r7, #20]
 8001316:	4413      	add	r3, r2
	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 8001318:	61bb      	str	r3, [r7, #24]


	return payload;
 800131a:	69bb      	ldr	r3, [r7, #24]


}
 800131c:	4618      	mov	r0, r3
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000401c 	.word	0x2000401c
 8001328:	40020400 	.word	0x40020400

0800132c <tmc_set_motor_current>:

/* ihold: 		hold current. 5 bits.  0 = 1/32, 31=32/32
 * irun:  		run current.  5 bits.  0 = 1/32, 31=32/32
 * iholddelay: 	number of clock cycles to power down. 4 bits. Delay is 2^18*iholddelay clocks periods.
 */
void tmc_set_motor_current(uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	460b      	mov	r3, r1
 8001338:	71bb      	strb	r3, [r7, #6]
 800133a:	4613      	mov	r3, r2
 800133c:	717b      	strb	r3, [r7, #5]
	uint32_t reg_data = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]

	reg_data = (ihold & 0x1F)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
			+  ((irun & 0x1F) << 8)
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001350:	431a      	orrs	r2, r3
			+  ((iholddelay & 0x0F) << 16);
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800135a:	4413      	add	r3, r2
	reg_data = (ihold & 0x1F)
 800135c:	60fb      	str	r3, [r7, #12]

	tmc_readwrite_register(TMC_REG_IHOLD_IRUN, reg_data, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	68f9      	ldr	r1, [r7, #12]
 8001362:	2010      	movs	r0, #16
 8001364:	f7ff ff72 	bl	800124c <tmc_readwrite_register>

	return;
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <tmc_init>:

/*initializes the TMC2130 driver for StealthChop operation with current appropriate for loop antenna
 *
 */
void tmc_init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8

	uint8_t rx_data[2] = {0,0};
 8001376:	2300      	movs	r3, #0
 8001378:	713b      	strb	r3, [r7, #4]
 800137a:	2300      	movs	r3, #0
 800137c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[2] = {0,0};
 800137e:	2300      	movs	r3, #0
 8001380:	703b      	strb	r3, [r7, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <tmc_init+0xc4>)
 800138e:	f000 fe1f 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 f934 	bl	8001600 <HAL_Delay>

	//Power cycle the TMC2130
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139e:	4825      	ldr	r0, [pc, #148]	; (8001434 <tmc_init+0xc4>)
 80013a0:	f000 fe16 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f000 f92b 	bl	8001600 <HAL_Delay>
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	4820      	ldr	r0, [pc, #128]	; (8001434 <tmc_init+0xc4>)
 80013b2:	f000 fe0d 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f000 f922 	bl	8001600 <HAL_Delay>

	//write 16 bits out of SPI interface (without clearing CS pin) to set sck polarity correct.
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013bc:	bf00      	nop
 80013be:	481e      	ldr	r0, [pc, #120]	; (8001438 <tmc_init+0xc8>)
 80013c0:	f001 fcba 	bl	8002d38 <HAL_SPI_GetState>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d1f9      	bne.n	80013be <tmc_init+0x4e>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80013ca:	1d3a      	adds	r2, r7, #4
 80013cc:	4639      	mov	r1, r7
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2302      	movs	r3, #2
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <tmc_init+0xc8>)
 80013d8:	f001 fb0c 	bl	80029f4 <HAL_SPI_TransmitReceive>

	//clear the status register by reading it
	tmc_readwrite_register(TMC_REG_GSTAT, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff ff33 	bl	800124c <tmc_readwrite_register>

	//TOFF=4, TBL=2, HSTRT=4. HEND=0
	tmc_readwrite_register(TMC_REG_CHOPCONF, 0x5010044, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	4914      	ldr	r1, [pc, #80]	; (800143c <tmc_init+0xcc>)
 80013ea:	206c      	movs	r0, #108	; 0x6c
 80013ec:	f7ff ff2e 	bl	800124c <tmc_readwrite_register>

	//IHOLD_IRUN: IHOLD=10, IRUN=31 (max. current), IHOLDDELAY=6
	tmc_set_motor_current(3, 10, 10);
 80013f0:	220a      	movs	r2, #10
 80013f2:	210a      	movs	r1, #10
 80013f4:	2003      	movs	r0, #3
 80013f6:	f7ff ff99 	bl	800132c <tmc_set_motor_current>

	//approx 1 second to fully power down the motor after motion stops
	tmc_readwrite_register(TMC_REG_TPOWERDOWN, 0x40, 1);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	2011      	movs	r0, #17
 8001400:	f7ff ff24 	bl	800124c <tmc_readwrite_register>

	//en_pwm_mode = 1, DIAG1 set to indicate stall, push-pull active high
	tmc_readwrite_register(TMC_REG_GCONF, 0x2104, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	f242 1104 	movw	r1, #8452	; 0x2104
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff1e 	bl	800124c <tmc_readwrite_register>

	//enable stallguard and set sensitvity
	tmc_enable_stallguard();
 8001410:	f7ff feb4 	bl	800117c <tmc_enable_stallguard>

	//switching velocity = 35000
	tmc_readwrite_register(TMC_REG_TPWMTHRS, 0x1F4, 1);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800141a:	2013      	movs	r0, #19
 800141c:	f7ff ff16 	bl	800124c <tmc_readwrite_register>

	//approx pwm_autoscale = 1, PWM_GRAD = 1, PWM_AMPL=255
	tmc_readwrite_register(TMC_REG_PWM_CONF, 0x401C8, 1);
 8001420:	2201      	movs	r2, #1
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <tmc_init+0xd0>)
 8001424:	2070      	movs	r0, #112	; 0x70
 8001426:	f7ff ff11 	bl	800124c <tmc_readwrite_register>

	return;
 800142a:	bf00      	nop
}
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40020400 	.word	0x40020400
 8001438:	2000401c 	.word	0x2000401c
 800143c:	05010044 	.word	0x05010044
 8001440:	000401c8 	.word	0x000401c8

08001444 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_USART2_UART_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800147c:	f002 feca 	bl	8004214 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001486:	f7ff fa83 	bl	8000990 <Error_Handler>
  }

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20004134 	.word	0x20004134
 8001494:	40004400 	.word	0x40004400

08001498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_UART_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014f2:	230c      	movs	r3, #12
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001502:	2307      	movs	r3, #7
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_MspInit+0x8c>)
 800150e:	f000 fbdd 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40004400 	.word	0x40004400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800152c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800152e:	e003      	b.n	8001538 <LoopCopyDataInit>

08001530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001536:	3104      	adds	r1, #4

08001538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800153c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001540:	d3f6      	bcc.n	8001530 <CopyDataInit>
  ldr  r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001544:	e002      	b.n	800154c <LoopFillZerobss>

08001546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001548:	f842 3b04 	str.w	r3, [r2], #4

0800154c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001550:	d3f9      	bcc.n	8001546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001552:	f7ff fc37 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f004 fc4b 	bl	8005df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff f97b 	bl	8000854 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001564:	08005ee0 	.word	0x08005ee0
  ldr  r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800156c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001570:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001574:	20004178 	.word	0x20004178

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_Init+0x40>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_Init+0x40>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x40>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 fb5c 	bl	8001c62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fb64 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fb36 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20004174 	.word	0x20004174

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20004174 	.word	0x20004174

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d005      	beq.n	8001626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_Delay+0x40>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001626:	bf00      	nop
 8001628:	f7ff ffde 	bl	80015e8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	429a      	cmp	r2, r3
 8001636:	d8f7      	bhi.n	8001628 <HAL_Delay+0x28>
  {
  }
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e033      	b.n	80016c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe ff8e 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800168a:	f023 0302 	bic.w	r3, r3, #2
 800168e:	f043 0202 	orr.w	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f93a 	bl	8001910 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
 80016b2:	e001      	b.n	80016b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e105      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x228>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d925      	bls.n	8001744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68d9      	ldr	r1, [r3, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43da      	mvns	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	4603      	mov	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	3b1e      	subs	r3, #30
 8001738:	409a      	lsls	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	e022      	b.n	800178a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6919      	ldr	r1, [r3, #16]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4403      	add	r3, r0
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d824      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	221f      	movs	r2, #31
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	400a      	ands	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b05      	subs	r3, #5
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
 80017da:	e04c      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d824      	bhi.n	800182e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b23      	subs	r3, #35	; 0x23
 80017f6:	221f      	movs	r2, #31
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43da      	mvns	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	400a      	ands	r2, r1
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b23      	subs	r3, #35	; 0x23
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
 800182c:	e023      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b41      	subs	r3, #65	; 0x41
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b41      	subs	r3, #65	; 0x41
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_ADC_ConfigChannel+0x234>)
 8001878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_ADC_ConfigChannel+0x238>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d109      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1cc>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d105      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_ADC_ConfigChannel+0x238>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d123      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d003      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x1e6>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d11b      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d111      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_ADC_ConfigChannel+0x23c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_ADC_ConfigChannel+0x240>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000
 8001908:	20000000 	.word	0x20000000
 800190c:	431bde83 	.word	0x431bde83

08001910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <ADC_Init+0x1f0>)
 800191a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	431a      	orrs	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	021a      	lsls	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <ADC_Init+0x1f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e00f      	b.n	8001a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0202 	bic.w	r2, r2, #2
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e1b      	ldrb	r3, [r3, #24]
 8001a28:	005a      	lsls	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	3b01      	subs	r3, #1
 8001a68:	035a      	lsls	r2, r3, #13
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e007      	b.n	8001a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	051a      	lsls	r2, r3, #20
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac6:	025a      	lsls	r2, r3, #9
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	029a      	lsls	r2, r3, #10
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff4c 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8a:	f7ff ff61 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f7ff ffb1 	bl	8001bfc <NVIC_EncodePriority>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff80 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff54 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e159      	b.n	8001f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8148 	bne.w	8001f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d00b      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0xfc>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a2 	beq.w	8001f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x202>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x1fe>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <HAL_GPIO_Init+0x2f4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_GPIO_Init+0x2f8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x1f6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x1f2>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f12:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f18:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f aea2 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e25b      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d075      	beq.n	800210e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002022:	4ba3      	ldr	r3, [pc, #652]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d00c      	beq.n	8002048 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202e:	4ba0      	ldr	r3, [pc, #640]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002036:	2b08      	cmp	r3, #8
 8002038:	d112      	bne.n	8002060 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203a:	4b9d      	ldr	r3, [pc, #628]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002046:	d10b      	bne.n	8002060 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	4b99      	ldr	r3, [pc, #612]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05b      	beq.n	800210c <HAL_RCC_OscConfig+0x108>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d157      	bne.n	800210c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e236      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x74>
 800206a:	4b91      	ldr	r3, [pc, #580]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a90      	ldr	r2, [pc, #576]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x98>
 8002082:	4b8b      	ldr	r3, [pc, #556]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a8a      	ldr	r2, [pc, #552]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a87      	ldr	r2, [pc, #540]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 800209c:	4b84      	ldr	r3, [pc, #528]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a83      	ldr	r2, [pc, #524]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a80      	ldr	r2, [pc, #512]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fa94 	bl	80015e8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fa90 	bl	80015e8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1fb      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xc0>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fa80 	bl	80015e8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fa7c 	bl	80015e8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1e7      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0xe8>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002126:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212e:	2b08      	cmp	r3, #8
 8002130:	d11c      	bne.n	800216c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x152>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1bb      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b56      	ldr	r3, [pc, #344]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4952      	ldr	r1, [pc, #328]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	e03a      	b.n	80021e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002174:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7ff fa35 	bl	80015e8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff fa31 	bl	80015e8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e19c      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4940      	ldr	r1, [pc, #256]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff fa14 	bl	80015e8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c4:	f7ff fa10 	bl	80015e8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e17b      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d030      	beq.n	8002250 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCC_OscConfig+0x2b4>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff f9f4 	bl	80015e8 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff f9f0 	bl	80015e8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e15b      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x200>
 8002222:	e015      	b.n	8002250 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCC_OscConfig+0x2b4>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7ff f9dd 	bl	80015e8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff f9d9 	bl	80015e8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e144      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a0 	beq.w	800239e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x2b8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d121      	bne.n	80022de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_RCC_OscConfig+0x2b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_RCC_OscConfig+0x2b8>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7ff f99f 	bl	80015e8 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	e011      	b.n	80022d2 <HAL_RCC_OscConfig+0x2ce>
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	42470000 	.word	0x42470000
 80022b8:	42470e80 	.word	0x42470e80
 80022bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c0:	f7ff f992 	bl	80015e8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0fd      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x4d4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a7c      	ldr	r2, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	e01c      	b.n	800232e <HAL_RCC_OscConfig+0x32a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d10c      	bne.n	8002316 <HAL_RCC_OscConfig+0x312>
 80022fc:	4b77      	ldr	r3, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4a76      	ldr	r2, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6713      	str	r3, [r2, #112]	; 0x70
 8002308:	4b74      	ldr	r3, [pc, #464]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	4a73      	ldr	r2, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6713      	str	r3, [r2, #112]	; 0x70
 8002314:	e00b      	b.n	800232e <HAL_RCC_OscConfig+0x32a>
 8002316:	4b71      	ldr	r3, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	4a70      	ldr	r2, [pc, #448]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	; 0x70
 8002322:	4b6e      	ldr	r3, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a6d      	ldr	r2, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d015      	beq.n	8002362 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7ff f957 	bl	80015e8 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff f953 	bl	80015e8 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0bc      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ee      	beq.n	800233e <HAL_RCC_OscConfig+0x33a>
 8002360:	e014      	b.n	800238c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff f941 	bl	80015e8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7ff f93d 	bl	80015e8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0a6      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ee      	bne.n	800236a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4b52      	ldr	r3, [pc, #328]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8092 	beq.w	80024cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a8:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d05c      	beq.n	800246e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d141      	bne.n	8002440 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	4b48      	ldr	r3, [pc, #288]	; (80024e0 <HAL_RCC_OscConfig+0x4dc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff f911 	bl	80015e8 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ca:	f7ff f90d 	bl	80015e8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e078      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	019b      	lsls	r3, r3, #6
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	4933      	ldr	r1, [pc, #204]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_RCC_OscConfig+0x4dc>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff f8e6 	bl	80015e8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff f8e2 	bl	80015e8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e04d      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x41c>
 800243e:	e045      	b.n	80024cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x4dc>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7ff f8cf 	bl	80015e8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff f8cb 	bl	80015e8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e036      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x44a>
 800246c:	e02e      	b.n	80024cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e029      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_RCC_OscConfig+0x4d8>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	429a      	cmp	r2, r3
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a2:	4013      	ands	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470060 	.word	0x42470060

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cc      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d90c      	bls.n	8002520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d119      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e067      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4934      	ldr	r1, [pc, #208]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d4:	f7ff f808 	bl	80015e8 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff f804 	bl	80015e8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d20c      	bcs.n	800262c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f821 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800266e:	4601      	mov	r1, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	fa21 f303 	lsr.w	r3, r1, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe faf4 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08005eb8 	.word	0x08005eb8
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c6:	4b63      	ldr	r3, [pc, #396]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d007      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x32>
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d008      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x38>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 80b4 	bne.w	8002844 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026de:	60bb      	str	r3, [r7, #8]
       break;
 80026e0:	e0b3      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e2:	4b5e      	ldr	r3, [pc, #376]	; (800285c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026e4:	60bb      	str	r3, [r7, #8]
      break;
 80026e6:	e0b0      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e8:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f2:	4b58      	ldr	r3, [pc, #352]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04a      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fe:	4b55      	ldr	r3, [pc, #340]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	099b      	lsrs	r3, r3, #6
 8002704:	f04f 0400 	mov.w	r4, #0
 8002708:	f240 11ff 	movw	r1, #511	; 0x1ff
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	ea03 0501 	and.w	r5, r3, r1
 8002714:	ea04 0602 	and.w	r6, r4, r2
 8002718:	4629      	mov	r1, r5
 800271a:	4632      	mov	r2, r6
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	f04f 0400 	mov.w	r4, #0
 8002724:	0154      	lsls	r4, r2, #5
 8002726:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800272a:	014b      	lsls	r3, r1, #5
 800272c:	4619      	mov	r1, r3
 800272e:	4622      	mov	r2, r4
 8002730:	1b49      	subs	r1, r1, r5
 8002732:	eb62 0206 	sbc.w	r2, r2, r6
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	0194      	lsls	r4, r2, #6
 8002740:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002744:	018b      	lsls	r3, r1, #6
 8002746:	1a5b      	subs	r3, r3, r1
 8002748:	eb64 0402 	sbc.w	r4, r4, r2
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	00e2      	lsls	r2, r4, #3
 8002756:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800275a:	00d9      	lsls	r1, r3, #3
 800275c:	460b      	mov	r3, r1
 800275e:	4614      	mov	r4, r2
 8002760:	195b      	adds	r3, r3, r5
 8002762:	eb44 0406 	adc.w	r4, r4, r6
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	0262      	lsls	r2, r4, #9
 8002770:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002774:	0259      	lsls	r1, r3, #9
 8002776:	460b      	mov	r3, r1
 8002778:	4614      	mov	r4, r2
 800277a:	4618      	mov	r0, r3
 800277c:	4621      	mov	r1, r4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 0400 	mov.w	r4, #0
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	f7fd fd2a 	bl	80001e0 <__aeabi_uldivmod>
 800278c:	4603      	mov	r3, r0
 800278e:	460c      	mov	r4, r1
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e049      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	f04f 0400 	mov.w	r4, #0
 800279e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	ea03 0501 	and.w	r5, r3, r1
 80027aa:	ea04 0602 	and.w	r6, r4, r2
 80027ae:	4629      	mov	r1, r5
 80027b0:	4632      	mov	r2, r6
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	0154      	lsls	r4, r2, #5
 80027bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027c0:	014b      	lsls	r3, r1, #5
 80027c2:	4619      	mov	r1, r3
 80027c4:	4622      	mov	r2, r4
 80027c6:	1b49      	subs	r1, r1, r5
 80027c8:	eb62 0206 	sbc.w	r2, r2, r6
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	f04f 0400 	mov.w	r4, #0
 80027d4:	0194      	lsls	r4, r2, #6
 80027d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027da:	018b      	lsls	r3, r1, #6
 80027dc:	1a5b      	subs	r3, r3, r1
 80027de:	eb64 0402 	sbc.w	r4, r4, r2
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	00e2      	lsls	r2, r4, #3
 80027ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027f0:	00d9      	lsls	r1, r3, #3
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	195b      	adds	r3, r3, r5
 80027f8:	eb44 0406 	adc.w	r4, r4, r6
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	02a2      	lsls	r2, r4, #10
 8002806:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800280a:	0299      	lsls	r1, r3, #10
 800280c:	460b      	mov	r3, r1
 800280e:	4614      	mov	r4, r2
 8002810:	4618      	mov	r0, r3
 8002812:	4621      	mov	r1, r4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f04f 0400 	mov.w	r4, #0
 800281a:	461a      	mov	r2, r3
 800281c:	4623      	mov	r3, r4
 800281e:	f7fd fcdf 	bl	80001e0 <__aeabi_uldivmod>
 8002822:	4603      	mov	r3, r0
 8002824:	460c      	mov	r4, r1
 8002826:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	60bb      	str	r3, [r7, #8]
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002846:	60bb      	str	r3, [r7, #8]
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	68bb      	ldr	r3, [r7, #8]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4601      	mov	r1, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4a03      	ldr	r2, [pc, #12]	; (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	08005ec8 	.word	0x08005ec8

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffdc 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028a8:	4601      	mov	r1, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0b5b      	lsrs	r3, r3, #13
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08005ec8 	.word	0x08005ec8

080028c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	220f      	movs	r2, #15
 80028d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	08db      	lsrs	r3, r3, #3
 8002902:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_RCC_GetClockConfig+0x60>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40023c00 	.word	0x40023c00

0800292c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e056      	b.n	80029ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe f919 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002974:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	ea42 0103 	orr.w	r1, r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	0c1b      	lsrs	r3, r3, #16
 80029bc:	f003 0104 	and.w	r1, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a02:	2301      	movs	r3, #1
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x26>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e18a      	b.n	8002d30 <HAL_SPI_TransmitReceive+0x33c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a22:	f7fe fde1 	bl	80015e8 <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d00f      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x70>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4a:	d107      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x68>
 8002a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d003      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a62:	e15b      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x82>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x82>
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a7c:	e14e      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d003      	beq.n	8002a92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	887a      	ldrh	r2, [r7, #2]
 8002aba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b40      	cmp	r3, #64	; 0x40
 8002ad4:	d007      	beq.n	8002ae6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aee:	d178      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x10a>
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d166      	bne.n	8002bcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c9a      	adds	r2, r3, #2
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b22:	e053      	b.n	8002bcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d11b      	bne.n	8002b6a <HAL_SPI_TransmitReceive+0x176>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d016      	beq.n	8002b6a <HAL_SPI_TransmitReceive+0x176>
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d113      	bne.n	8002b6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	881a      	ldrh	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d119      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x1b8>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d014      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	1c9a      	adds	r2, r3, #2
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bac:	f7fe fd1c 	bl	80015e8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d807      	bhi.n	8002bcc <HAL_SPI_TransmitReceive+0x1d8>
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d003      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bca:	e0a7      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1a6      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x130>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1a1      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x130>
 8002be0:	e07c      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_SPI_TransmitReceive+0x1fc>
 8002bea:	8b7b      	ldrh	r3, [r7, #26]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d16b      	bne.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c16:	e057      	b.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d11c      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x26c>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_SPI_TransmitReceive+0x26c>
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d114      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d119      	bne.n	8002ca2 <HAL_SPI_TransmitReceive+0x2ae>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d014      	beq.n	8002ca2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ca2:	f7fe fca1 	bl	80015e8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d803      	bhi.n	8002cba <HAL_SPI_TransmitReceive+0x2c6>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d102      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x2cc>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cc6:	e029      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1a2      	bne.n	8002c18 <HAL_SPI_TransmitReceive+0x224>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d19d      	bne.n	8002c18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f8a1 	bl	8002e28 <SPI_EndRxTxTransaction>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cf8:	e010      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	e000      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3730      	adds	r7, #48	; 0x30
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d64:	e04c      	b.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d048      	beq.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fc3b 	bl	80015e8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d902      	bls.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d13d      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9c:	d111      	bne.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da6:	d004      	beq.n	8002db2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d107      	bne.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dca:	d10f      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e00f      	b.n	8002e20 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d1a3      	bne.n	8002d66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <SPI_EndRxTxTransaction+0x7c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <SPI_EndRxTxTransaction+0x80>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0d5b      	lsrs	r3, r3, #21
 8002e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e52:	d112      	bne.n	8002e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff ff78 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e00f      	b.n	8002e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d0f2      	beq.n	8002e7a <SPI_EndRxTxTransaction+0x52>
 8002e94:	e000      	b.n	8002e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e96:	bf00      	nop
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	165e9f81 	.word	0x165e9f81

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e01d      	b.n	8002efa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f8a6 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 fd6c 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b06      	cmp	r3, #6
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01d      	b.n	8002f98 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f815 	bl	8002fa0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f000 fd1d 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d841      	bhi.n	8003048 <HAL_TIM_OC_Start_IT+0x94>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <HAL_TIM_OC_Start_IT+0x18>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003049 	.word	0x08003049
 8002fd4:	08003049 	.word	0x08003049
 8002fd8:	08003049 	.word	0x08003049
 8002fdc:	08003013 	.word	0x08003013
 8002fe0:	08003049 	.word	0x08003049
 8002fe4:	08003049 	.word	0x08003049
 8002fe8:	08003049 	.word	0x08003049
 8002fec:	08003025 	.word	0x08003025
 8002ff0:	08003049 	.word	0x08003049
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	08003037 	.word	0x08003037
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0202 	orr.w	r2, r2, #2
 800300e:	60da      	str	r2, [r3, #12]
      break;
 8003010:	e01b      	b.n	800304a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	60da      	str	r2, [r3, #12]
      break;
 8003022:	e012      	b.n	800304a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	60da      	str	r2, [r3, #12]
      break;
 8003034:	e009      	b.n	800304a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0210 	orr.w	r2, r2, #16
 8003044:	60da      	str	r2, [r3, #12]
      break;
 8003046:	e000      	b.n	800304a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003048:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 ffe4 	bl	8004020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_TIM_OC_Start_IT+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d107      	bne.n	8003072 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b06      	cmp	r3, #6
 8003082:	d007      	beq.n	8003094 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000

080030a4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d841      	bhi.n	8003138 <HAL_TIM_OC_Stop_IT+0x94>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_TIM_OC_Stop_IT+0x18>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003139 	.word	0x08003139
 80030c4:	08003139 	.word	0x08003139
 80030c8:	08003139 	.word	0x08003139
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003139 	.word	0x08003139
 80030d4:	08003139 	.word	0x08003139
 80030d8:	08003139 	.word	0x08003139
 80030dc:	08003115 	.word	0x08003115
 80030e0:	08003139 	.word	0x08003139
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003139 	.word	0x08003139
 80030ec:	08003127 	.word	0x08003127
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0202 	bic.w	r2, r2, #2
 80030fe:	60da      	str	r2, [r3, #12]
      break;
 8003100:	e01b      	b.n	800313a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0204 	bic.w	r2, r2, #4
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e012      	b.n	800313a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0208 	bic.w	r2, r2, #8
 8003122:	60da      	str	r2, [r3, #12]
      break;
 8003124:	e009      	b.n	800313a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0210 	bic.w	r2, r2, #16
 8003134:	60da      	str	r2, [r3, #12]
      break;
 8003136:	e000      	b.n	800313a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003138:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	6839      	ldr	r1, [r7, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 ff6c 	bl	8004020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_TIM_OC_Stop_IT+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d117      	bne.n	8003182 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	f241 1311 	movw	r3, #4369	; 0x1111
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <HAL_TIM_OC_Stop_IT+0xde>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	f240 4344 	movw	r3, #1092	; 0x444
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d107      	bne.n	8003182 <HAL_TIM_OC_Stop_IT+0xde>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	f241 1311 	movw	r3, #4369	; 0x1111
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <HAL_TIM_OC_Stop_IT+0x10e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	f240 4344 	movw	r3, #1092	; 0x444
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_OC_Stop_IT+0x10e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40010000 	.word	0x40010000

080031c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e01d      	b.n	800320e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f815 	bl	8003216 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fbe2 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 feee 	bl	8004020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_TIM_PWM_Start+0x60>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d107      	bne.n	800325e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d007      	beq.n	8003280 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000

08003290 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 febc 	bl	8004020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_TIM_PWM_Stop+0x94>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d117      	bne.n	80032e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_TIM_PWM_Stop+0x52>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	f240 4344 	movw	r3, #1092	; 0x444
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_TIM_PWM_Stop+0x52>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_TIM_PWM_Stop+0x82>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	f240 4344 	movw	r3, #1092	; 0x444
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_TIM_PWM_Stop+0x82>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40010000 	.word	0x40010000

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0202 	mvn.w	r2, #2
 8003354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fb0d 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 faff 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb10 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fae3 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fad5 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fae6 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0208 	mvn.w	r2, #8
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fab9 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 faab 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fabc 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b10      	cmp	r3, #16
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0210 	mvn.w	r2, #16
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2208      	movs	r2, #8
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa8f 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa81 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fa92 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0201 	mvn.w	r2, #1
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fa60 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d107      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fe94 	bl	8004200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d10e      	bne.n	8003504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa57 	bl	80039b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d10e      	bne.n	8003530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0220 	mvn.w	r2, #32
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fe5e 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_TIM_OC_ConfigChannel+0x1a>
 800354e:	2302      	movs	r3, #2
 8003550:	e04e      	b.n	80035f0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d839      	bhi.n	80035dc <HAL_TIM_OC_ConfigChannel+0xa4>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_TIM_OC_ConfigChannel+0x38>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035dd 	.word	0x080035dd
 8003578:	080035dd 	.word	0x080035dd
 800357c:	080035dd 	.word	0x080035dd
 8003580:	080035b3 	.word	0x080035b3
 8003584:	080035dd 	.word	0x080035dd
 8003588:	080035dd 	.word	0x080035dd
 800358c:	080035dd 	.word	0x080035dd
 8003590:	080035c1 	.word	0x080035c1
 8003594:	080035dd 	.word	0x080035dd
 8003598:	080035dd 	.word	0x080035dd
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035cf 	.word	0x080035cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa8c 	bl	8003ac8 <TIM_OC1_SetConfig>
      break;
 80035b0:	e015      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 faeb 	bl	8003b94 <TIM_OC2_SetConfig>
      break;
 80035be:	e00e      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb50 	bl	8003c6c <TIM_OC3_SetConfig>
      break;
 80035cc:	e007      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fbb3 	bl	8003d40 <TIM_OC4_SetConfig>
      break;
 80035da:	e000      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80035dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800360e:	2302      	movs	r3, #2
 8003610:	e0b4      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	f200 809f 	bhi.w	8003768 <HAL_TIM_PWM_ConfigChannel+0x170>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003665 	.word	0x08003665
 8003634:	08003769 	.word	0x08003769
 8003638:	08003769 	.word	0x08003769
 800363c:	08003769 	.word	0x08003769
 8003640:	080036a5 	.word	0x080036a5
 8003644:	08003769 	.word	0x08003769
 8003648:	08003769 	.word	0x08003769
 800364c:	08003769 	.word	0x08003769
 8003650:	080036e7 	.word	0x080036e7
 8003654:	08003769 	.word	0x08003769
 8003658:	08003769 	.word	0x08003769
 800365c:	08003769 	.word	0x08003769
 8003660:	08003727 	.word	0x08003727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa2c 	bl	8003ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	619a      	str	r2, [r3, #24]
      break;
 80036a2:	e062      	b.n	800376a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fa72 	bl	8003b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
      break;
 80036e4:	e041      	b.n	800376a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fabd 	bl	8003c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0204 	bic.w	r2, r2, #4
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	61da      	str	r2, [r3, #28]
      break;
 8003724:	e021      	b.n	800376a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fb07 	bl	8003d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	61da      	str	r2, [r3, #28]
      break;
 8003766:	e000      	b.n	800376a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003768:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIM_ConfigClockSource+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e0a6      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x166>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d067      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0x120>
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d80b      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x6c>
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d073      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x140>
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d802      	bhi.n	80037e6 <HAL_TIM_ConfigClockSource+0x62>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d06f      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037e4:	e078      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d06c      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x140>
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d06a      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037ee:	e073      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d00d      	beq.n	8003810 <HAL_TIM_ConfigClockSource+0x8c>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d804      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x7e>
 80037f8:	2b50      	cmp	r3, #80	; 0x50
 80037fa:	d033      	beq.n	8003864 <HAL_TIM_ConfigClockSource+0xe0>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d041      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003800:	e06a      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d066      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x152>
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380c:	d017      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800380e:	e063      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f000 fbde 	bl	8003fe0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003832:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]
      break;
 800383c:	e04c      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f000 fbc7 	bl	8003fe0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003860:	609a      	str	r2, [r3, #8]
      break;
 8003862:	e039      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	461a      	mov	r2, r3
 8003872:	f000 fb3b 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2150      	movs	r1, #80	; 0x50
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fb94 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003882:	e029      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	461a      	mov	r2, r3
 8003892:	f000 fb5a 	bl	8003f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2160      	movs	r1, #96	; 0x60
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fb84 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80038a2:	e019      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f000 fb1b 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fb74 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80038c2:	e009      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 fb6b 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80038d4:	e000      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003906:	2302      	movs	r3, #2
 8003908:	e031      	b.n	800396e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa5f 	bl	8003de0 <TIM_SlaveTimer_SetConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e018      	b.n	800396e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800395a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a34      	ldr	r2, [pc, #208]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00f      	beq.n	8003a00 <TIM_Base_SetConfig+0x38>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d00b      	beq.n	8003a00 <TIM_Base_SetConfig+0x38>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a31      	ldr	r2, [pc, #196]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <TIM_Base_SetConfig+0x38>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <TIM_Base_SetConfig+0xec>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_Base_SetConfig+0x38>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a25      	ldr	r2, [pc, #148]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01b      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d017      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <TIM_Base_SetConfig+0xec>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_Base_SetConfig+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <TIM_Base_SetConfig+0xfc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d103      	bne.n	8003a98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	615a      	str	r2, [r3, #20]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800

08003ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 0302 	bic.w	r3, r3, #2
 8003b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <TIM_OC1_SetConfig+0xc8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10c      	bne.n	8003b3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0308 	bic.w	r3, r3, #8
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <TIM_OC1_SetConfig+0xc8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d111      	bne.n	8003b6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40010000 	.word	0x40010000

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0210 	bic.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0320 	bic.w	r3, r3, #32
 8003bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <TIM_OC2_SetConfig+0xd4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10d      	bne.n	8003c10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <TIM_OC2_SetConfig+0xd4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d113      	bne.n	8003c40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000

08003c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <TIM_OC3_SetConfig+0xd0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10d      	bne.n	8003ce6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <TIM_OC3_SetConfig+0xd0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d113      	bne.n	8003d16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40010000 	.word	0x40010000

08003d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <TIM_OC4_SetConfig+0x9c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d109      	bne.n	8003db4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000

08003de0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b30      	cmp	r3, #48	; 0x30
 8003e24:	d05c      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x100>
 8003e26:	2b30      	cmp	r3, #48	; 0x30
 8003e28:	d806      	bhi.n	8003e38 <TIM_SlaveTimer_SetConfig+0x58>
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d058      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x100>
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d056      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x100>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d054      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003e36:	e054      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d03d      	beq.n	8003eb8 <TIM_SlaveTimer_SetConfig+0xd8>
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d802      	bhi.n	8003e46 <TIM_SlaveTimer_SetConfig+0x66>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d010      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003e44:	e04d      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003e46:	2b60      	cmp	r3, #96	; 0x60
 8003e48:	d040      	beq.n	8003ecc <TIM_SlaveTimer_SetConfig+0xec>
 8003e4a:	2b70      	cmp	r3, #112	; 0x70
 8003e4c:	d000      	beq.n	8003e50 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003e4e:	e048      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68d9      	ldr	r1, [r3, #12]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f000 f8be 	bl	8003fe0 <TIM_ETR_SetConfig>
      break;
 8003e64:	e03d      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d101      	bne.n	8003e72 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e038      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e98:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
      break;
 8003eb6:	e014      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f000 f811 	bl	8003eec <TIM_TI1_ConfigInputStage>
      break;
 8003eca:	e00a      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 f836 	bl	8003f4a <TIM_TI2_ConfigInputStage>
      break;
 8003ede:	e000      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8003ee0:	bf00      	nop
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 030a 	bic.w	r3, r3, #10
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f043 0307 	orr.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	431a      	orrs	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2201      	movs	r2, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004080:	2302      	movs	r3, #2
 8004082:	e050      	b.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d013      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a16      	ldr	r2, [pc, #88]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10c      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40014000 	.word	0x40014000

08004148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e03d      	b.n	80041e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e03f      	b.n	80042a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd f92c 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f829 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800426c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042f2:	f023 030c 	bic.w	r3, r3, #12
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431e:	f040 818b 	bne.w	8004638 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4ac1      	ldr	r2, [pc, #772]	; (800462c <UART_SetConfig+0x37c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d005      	beq.n	8004338 <UART_SetConfig+0x88>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4abf      	ldr	r2, [pc, #764]	; (8004630 <UART_SetConfig+0x380>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f040 80bd 	bne.w	80044b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe fab2 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 800433c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	461d      	mov	r5, r3
 8004342:	f04f 0600 	mov.w	r6, #0
 8004346:	46a8      	mov	r8, r5
 8004348:	46b1      	mov	r9, r6
 800434a:	eb18 0308 	adds.w	r3, r8, r8
 800434e:	eb49 0409 	adc.w	r4, r9, r9
 8004352:	4698      	mov	r8, r3
 8004354:	46a1      	mov	r9, r4
 8004356:	eb18 0805 	adds.w	r8, r8, r5
 800435a:	eb49 0906 	adc.w	r9, r9, r6
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800436a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800436e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004372:	4688      	mov	r8, r1
 8004374:	4691      	mov	r9, r2
 8004376:	eb18 0005 	adds.w	r0, r8, r5
 800437a:	eb49 0106 	adc.w	r1, r9, r6
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	461d      	mov	r5, r3
 8004384:	f04f 0600 	mov.w	r6, #0
 8004388:	196b      	adds	r3, r5, r5
 800438a:	eb46 0406 	adc.w	r4, r6, r6
 800438e:	461a      	mov	r2, r3
 8004390:	4623      	mov	r3, r4
 8004392:	f7fb ff25 	bl	80001e0 <__aeabi_uldivmod>
 8004396:	4603      	mov	r3, r0
 8004398:	460c      	mov	r4, r1
 800439a:	461a      	mov	r2, r3
 800439c:	4ba5      	ldr	r3, [pc, #660]	; (8004634 <UART_SetConfig+0x384>)
 800439e:	fba3 2302 	umull	r2, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	461d      	mov	r5, r3
 80043ac:	f04f 0600 	mov.w	r6, #0
 80043b0:	46a9      	mov	r9, r5
 80043b2:	46b2      	mov	sl, r6
 80043b4:	eb19 0309 	adds.w	r3, r9, r9
 80043b8:	eb4a 040a 	adc.w	r4, sl, sl
 80043bc:	4699      	mov	r9, r3
 80043be:	46a2      	mov	sl, r4
 80043c0:	eb19 0905 	adds.w	r9, r9, r5
 80043c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043dc:	4689      	mov	r9, r1
 80043de:	4692      	mov	sl, r2
 80043e0:	eb19 0005 	adds.w	r0, r9, r5
 80043e4:	eb4a 0106 	adc.w	r1, sl, r6
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	461d      	mov	r5, r3
 80043ee:	f04f 0600 	mov.w	r6, #0
 80043f2:	196b      	adds	r3, r5, r5
 80043f4:	eb46 0406 	adc.w	r4, r6, r6
 80043f8:	461a      	mov	r2, r3
 80043fa:	4623      	mov	r3, r4
 80043fc:	f7fb fef0 	bl	80001e0 <__aeabi_uldivmod>
 8004400:	4603      	mov	r3, r0
 8004402:	460c      	mov	r4, r1
 8004404:	461a      	mov	r2, r3
 8004406:	4b8b      	ldr	r3, [pc, #556]	; (8004634 <UART_SetConfig+0x384>)
 8004408:	fba3 1302 	umull	r1, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	2164      	movs	r1, #100	; 0x64
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	3332      	adds	r3, #50	; 0x32
 800441a:	4a86      	ldr	r2, [pc, #536]	; (8004634 <UART_SetConfig+0x384>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004428:	4498      	add	r8, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	461d      	mov	r5, r3
 800442e:	f04f 0600 	mov.w	r6, #0
 8004432:	46a9      	mov	r9, r5
 8004434:	46b2      	mov	sl, r6
 8004436:	eb19 0309 	adds.w	r3, r9, r9
 800443a:	eb4a 040a 	adc.w	r4, sl, sl
 800443e:	4699      	mov	r9, r3
 8004440:	46a2      	mov	sl, r4
 8004442:	eb19 0905 	adds.w	r9, r9, r5
 8004446:	eb4a 0a06 	adc.w	sl, sl, r6
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004456:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800445e:	4689      	mov	r9, r1
 8004460:	4692      	mov	sl, r2
 8004462:	eb19 0005 	adds.w	r0, r9, r5
 8004466:	eb4a 0106 	adc.w	r1, sl, r6
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	461d      	mov	r5, r3
 8004470:	f04f 0600 	mov.w	r6, #0
 8004474:	196b      	adds	r3, r5, r5
 8004476:	eb46 0406 	adc.w	r4, r6, r6
 800447a:	461a      	mov	r2, r3
 800447c:	4623      	mov	r3, r4
 800447e:	f7fb feaf 	bl	80001e0 <__aeabi_uldivmod>
 8004482:	4603      	mov	r3, r0
 8004484:	460c      	mov	r4, r1
 8004486:	461a      	mov	r2, r3
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <UART_SetConfig+0x384>)
 800448a:	fba3 1302 	umull	r1, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2164      	movs	r1, #100	; 0x64
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	3332      	adds	r3, #50	; 0x32
 800449c:	4a65      	ldr	r2, [pc, #404]	; (8004634 <UART_SetConfig+0x384>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	f003 0207 	and.w	r2, r3, #7
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4442      	add	r2, r8
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	e26f      	b.n	8004992 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fe f9e1 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80044b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	461d      	mov	r5, r3
 80044bc:	f04f 0600 	mov.w	r6, #0
 80044c0:	46a8      	mov	r8, r5
 80044c2:	46b1      	mov	r9, r6
 80044c4:	eb18 0308 	adds.w	r3, r8, r8
 80044c8:	eb49 0409 	adc.w	r4, r9, r9
 80044cc:	4698      	mov	r8, r3
 80044ce:	46a1      	mov	r9, r4
 80044d0:	eb18 0805 	adds.w	r8, r8, r5
 80044d4:	eb49 0906 	adc.w	r9, r9, r6
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044ec:	4688      	mov	r8, r1
 80044ee:	4691      	mov	r9, r2
 80044f0:	eb18 0005 	adds.w	r0, r8, r5
 80044f4:	eb49 0106 	adc.w	r1, r9, r6
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	461d      	mov	r5, r3
 80044fe:	f04f 0600 	mov.w	r6, #0
 8004502:	196b      	adds	r3, r5, r5
 8004504:	eb46 0406 	adc.w	r4, r6, r6
 8004508:	461a      	mov	r2, r3
 800450a:	4623      	mov	r3, r4
 800450c:	f7fb fe68 	bl	80001e0 <__aeabi_uldivmod>
 8004510:	4603      	mov	r3, r0
 8004512:	460c      	mov	r4, r1
 8004514:	461a      	mov	r2, r3
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <UART_SetConfig+0x384>)
 8004518:	fba3 2302 	umull	r2, r3, r3, r2
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	461d      	mov	r5, r3
 8004526:	f04f 0600 	mov.w	r6, #0
 800452a:	46a9      	mov	r9, r5
 800452c:	46b2      	mov	sl, r6
 800452e:	eb19 0309 	adds.w	r3, r9, r9
 8004532:	eb4a 040a 	adc.w	r4, sl, sl
 8004536:	4699      	mov	r9, r3
 8004538:	46a2      	mov	sl, r4
 800453a:	eb19 0905 	adds.w	r9, r9, r5
 800453e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800454e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004552:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004556:	4689      	mov	r9, r1
 8004558:	4692      	mov	sl, r2
 800455a:	eb19 0005 	adds.w	r0, r9, r5
 800455e:	eb4a 0106 	adc.w	r1, sl, r6
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	461d      	mov	r5, r3
 8004568:	f04f 0600 	mov.w	r6, #0
 800456c:	196b      	adds	r3, r5, r5
 800456e:	eb46 0406 	adc.w	r4, r6, r6
 8004572:	461a      	mov	r2, r3
 8004574:	4623      	mov	r3, r4
 8004576:	f7fb fe33 	bl	80001e0 <__aeabi_uldivmod>
 800457a:	4603      	mov	r3, r0
 800457c:	460c      	mov	r4, r1
 800457e:	461a      	mov	r2, r3
 8004580:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <UART_SetConfig+0x384>)
 8004582:	fba3 1302 	umull	r1, r3, r3, r2
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2164      	movs	r1, #100	; 0x64
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	3332      	adds	r3, #50	; 0x32
 8004594:	4a27      	ldr	r2, [pc, #156]	; (8004634 <UART_SetConfig+0x384>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045a2:	4498      	add	r8, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	461d      	mov	r5, r3
 80045a8:	f04f 0600 	mov.w	r6, #0
 80045ac:	46a9      	mov	r9, r5
 80045ae:	46b2      	mov	sl, r6
 80045b0:	eb19 0309 	adds.w	r3, r9, r9
 80045b4:	eb4a 040a 	adc.w	r4, sl, sl
 80045b8:	4699      	mov	r9, r3
 80045ba:	46a2      	mov	sl, r4
 80045bc:	eb19 0905 	adds.w	r9, r9, r5
 80045c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d8:	4689      	mov	r9, r1
 80045da:	4692      	mov	sl, r2
 80045dc:	eb19 0005 	adds.w	r0, r9, r5
 80045e0:	eb4a 0106 	adc.w	r1, sl, r6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	461d      	mov	r5, r3
 80045ea:	f04f 0600 	mov.w	r6, #0
 80045ee:	196b      	adds	r3, r5, r5
 80045f0:	eb46 0406 	adc.w	r4, r6, r6
 80045f4:	461a      	mov	r2, r3
 80045f6:	4623      	mov	r3, r4
 80045f8:	f7fb fdf2 	bl	80001e0 <__aeabi_uldivmod>
 80045fc:	4603      	mov	r3, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	461a      	mov	r2, r3
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <UART_SetConfig+0x384>)
 8004604:	fba3 1302 	umull	r1, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	2164      	movs	r1, #100	; 0x64
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	3332      	adds	r3, #50	; 0x32
 8004616:	4a07      	ldr	r2, [pc, #28]	; (8004634 <UART_SetConfig+0x384>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	f003 0207 	and.w	r2, r3, #7
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4442      	add	r2, r8
 8004628:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800462a:	e1b2      	b.n	8004992 <UART_SetConfig+0x6e2>
 800462c:	40011000 	.word	0x40011000
 8004630:	40011400 	.word	0x40011400
 8004634:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4ad7      	ldr	r2, [pc, #860]	; (800499c <UART_SetConfig+0x6ec>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d005      	beq.n	800464e <UART_SetConfig+0x39e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4ad6      	ldr	r2, [pc, #856]	; (80049a0 <UART_SetConfig+0x6f0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	f040 80d1 	bne.w	80047f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800464e:	f7fe f927 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8004652:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	469a      	mov	sl, r3
 8004658:	f04f 0b00 	mov.w	fp, #0
 800465c:	46d0      	mov	r8, sl
 800465e:	46d9      	mov	r9, fp
 8004660:	eb18 0308 	adds.w	r3, r8, r8
 8004664:	eb49 0409 	adc.w	r4, r9, r9
 8004668:	4698      	mov	r8, r3
 800466a:	46a1      	mov	r9, r4
 800466c:	eb18 080a 	adds.w	r8, r8, sl
 8004670:	eb49 090b 	adc.w	r9, r9, fp
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004680:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004684:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004688:	4688      	mov	r8, r1
 800468a:	4691      	mov	r9, r2
 800468c:	eb1a 0508 	adds.w	r5, sl, r8
 8004690:	eb4b 0609 	adc.w	r6, fp, r9
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4619      	mov	r1, r3
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	0094      	lsls	r4, r2, #2
 80046a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ac:	008b      	lsls	r3, r1, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	4623      	mov	r3, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	4631      	mov	r1, r6
 80046b6:	f7fb fd93 	bl	80001e0 <__aeabi_uldivmod>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	461a      	mov	r2, r3
 80046c0:	4bb8      	ldr	r3, [pc, #736]	; (80049a4 <UART_SetConfig+0x6f4>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	469b      	mov	fp, r3
 80046d0:	f04f 0c00 	mov.w	ip, #0
 80046d4:	46d9      	mov	r9, fp
 80046d6:	46e2      	mov	sl, ip
 80046d8:	eb19 0309 	adds.w	r3, r9, r9
 80046dc:	eb4a 040a 	adc.w	r4, sl, sl
 80046e0:	4699      	mov	r9, r3
 80046e2:	46a2      	mov	sl, r4
 80046e4:	eb19 090b 	adds.w	r9, r9, fp
 80046e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004700:	4689      	mov	r9, r1
 8004702:	4692      	mov	sl, r2
 8004704:	eb1b 0509 	adds.w	r5, fp, r9
 8004708:	eb4c 060a 	adc.w	r6, ip, sl
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4619      	mov	r1, r3
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f04f 0400 	mov.w	r4, #0
 800471e:	0094      	lsls	r4, r2, #2
 8004720:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004724:	008b      	lsls	r3, r1, #2
 8004726:	461a      	mov	r2, r3
 8004728:	4623      	mov	r3, r4
 800472a:	4628      	mov	r0, r5
 800472c:	4631      	mov	r1, r6
 800472e:	f7fb fd57 	bl	80001e0 <__aeabi_uldivmod>
 8004732:	4603      	mov	r3, r0
 8004734:	460c      	mov	r4, r1
 8004736:	461a      	mov	r2, r3
 8004738:	4b9a      	ldr	r3, [pc, #616]	; (80049a4 <UART_SetConfig+0x6f4>)
 800473a:	fba3 1302 	umull	r1, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2164      	movs	r1, #100	; 0x64
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	3332      	adds	r3, #50	; 0x32
 800474c:	4a95      	ldr	r2, [pc, #596]	; (80049a4 <UART_SetConfig+0x6f4>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004758:	4498      	add	r8, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	469b      	mov	fp, r3
 800475e:	f04f 0c00 	mov.w	ip, #0
 8004762:	46d9      	mov	r9, fp
 8004764:	46e2      	mov	sl, ip
 8004766:	eb19 0309 	adds.w	r3, r9, r9
 800476a:	eb4a 040a 	adc.w	r4, sl, sl
 800476e:	4699      	mov	r9, r3
 8004770:	46a2      	mov	sl, r4
 8004772:	eb19 090b 	adds.w	r9, r9, fp
 8004776:	eb4a 0a0c 	adc.w	sl, sl, ip
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800478a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800478e:	4689      	mov	r9, r1
 8004790:	4692      	mov	sl, r2
 8004792:	eb1b 0509 	adds.w	r5, fp, r9
 8004796:	eb4c 060a 	adc.w	r6, ip, sl
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4619      	mov	r1, r3
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	f04f 0400 	mov.w	r4, #0
 80047ac:	0094      	lsls	r4, r2, #2
 80047ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047b2:	008b      	lsls	r3, r1, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4623      	mov	r3, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	4631      	mov	r1, r6
 80047bc:	f7fb fd10 	bl	80001e0 <__aeabi_uldivmod>
 80047c0:	4603      	mov	r3, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b77      	ldr	r3, [pc, #476]	; (80049a4 <UART_SetConfig+0x6f4>)
 80047c8:	fba3 1302 	umull	r1, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	2164      	movs	r1, #100	; 0x64
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	3332      	adds	r3, #50	; 0x32
 80047da:	4a72      	ldr	r2, [pc, #456]	; (80049a4 <UART_SetConfig+0x6f4>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	f003 020f 	and.w	r2, r3, #15
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4442      	add	r2, r8
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	e0d0      	b.n	8004992 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fe f842 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80047f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	469a      	mov	sl, r3
 80047fa:	f04f 0b00 	mov.w	fp, #0
 80047fe:	46d0      	mov	r8, sl
 8004800:	46d9      	mov	r9, fp
 8004802:	eb18 0308 	adds.w	r3, r8, r8
 8004806:	eb49 0409 	adc.w	r4, r9, r9
 800480a:	4698      	mov	r8, r3
 800480c:	46a1      	mov	r9, r4
 800480e:	eb18 080a 	adds.w	r8, r8, sl
 8004812:	eb49 090b 	adc.w	r9, r9, fp
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004822:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004826:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800482a:	4688      	mov	r8, r1
 800482c:	4691      	mov	r9, r2
 800482e:	eb1a 0508 	adds.w	r5, sl, r8
 8004832:	eb4b 0609 	adc.w	r6, fp, r9
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4619      	mov	r1, r3
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	0094      	lsls	r4, r2, #2
 800484a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	461a      	mov	r2, r3
 8004852:	4623      	mov	r3, r4
 8004854:	4628      	mov	r0, r5
 8004856:	4631      	mov	r1, r6
 8004858:	f7fb fcc2 	bl	80001e0 <__aeabi_uldivmod>
 800485c:	4603      	mov	r3, r0
 800485e:	460c      	mov	r4, r1
 8004860:	461a      	mov	r2, r3
 8004862:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <UART_SetConfig+0x6f4>)
 8004864:	fba3 2302 	umull	r2, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	469b      	mov	fp, r3
 8004872:	f04f 0c00 	mov.w	ip, #0
 8004876:	46d9      	mov	r9, fp
 8004878:	46e2      	mov	sl, ip
 800487a:	eb19 0309 	adds.w	r3, r9, r9
 800487e:	eb4a 040a 	adc.w	r4, sl, sl
 8004882:	4699      	mov	r9, r3
 8004884:	46a2      	mov	sl, r4
 8004886:	eb19 090b 	adds.w	r9, r9, fp
 800488a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800489e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048a2:	4689      	mov	r9, r1
 80048a4:	4692      	mov	sl, r2
 80048a6:	eb1b 0509 	adds.w	r5, fp, r9
 80048aa:	eb4c 060a 	adc.w	r6, ip, sl
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4619      	mov	r1, r3
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	f04f 0400 	mov.w	r4, #0
 80048c0:	0094      	lsls	r4, r2, #2
 80048c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048c6:	008b      	lsls	r3, r1, #2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4623      	mov	r3, r4
 80048cc:	4628      	mov	r0, r5
 80048ce:	4631      	mov	r1, r6
 80048d0:	f7fb fc86 	bl	80001e0 <__aeabi_uldivmod>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	461a      	mov	r2, r3
 80048da:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <UART_SetConfig+0x6f4>)
 80048dc:	fba3 1302 	umull	r1, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2164      	movs	r1, #100	; 0x64
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	3332      	adds	r3, #50	; 0x32
 80048ee:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <UART_SetConfig+0x6f4>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fa:	4498      	add	r8, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	469b      	mov	fp, r3
 8004900:	f04f 0c00 	mov.w	ip, #0
 8004904:	46d9      	mov	r9, fp
 8004906:	46e2      	mov	sl, ip
 8004908:	eb19 0309 	adds.w	r3, r9, r9
 800490c:	eb4a 040a 	adc.w	r4, sl, sl
 8004910:	4699      	mov	r9, r3
 8004912:	46a2      	mov	sl, r4
 8004914:	eb19 090b 	adds.w	r9, r9, fp
 8004918:	eb4a 0a0c 	adc.w	sl, sl, ip
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004928:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800492c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004930:	4689      	mov	r9, r1
 8004932:	4692      	mov	sl, r2
 8004934:	eb1b 0509 	adds.w	r5, fp, r9
 8004938:	eb4c 060a 	adc.w	r6, ip, sl
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	f04f 0400 	mov.w	r4, #0
 800494e:	0094      	lsls	r4, r2, #2
 8004950:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004954:	008b      	lsls	r3, r1, #2
 8004956:	461a      	mov	r2, r3
 8004958:	4623      	mov	r3, r4
 800495a:	4628      	mov	r0, r5
 800495c:	4631      	mov	r1, r6
 800495e:	f7fb fc3f 	bl	80001e0 <__aeabi_uldivmod>
 8004962:	4603      	mov	r3, r0
 8004964:	460c      	mov	r4, r1
 8004966:	461a      	mov	r2, r3
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <UART_SetConfig+0x6f4>)
 800496a:	fba3 1302 	umull	r1, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2164      	movs	r1, #100	; 0x64
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <UART_SetConfig+0x6f4>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 020f 	and.w	r2, r3, #15
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4442      	add	r2, r8
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	e7ff      	b.n	8004992 <UART_SetConfig+0x6e2>
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499c:	40011000 	.word	0x40011000
 80049a0:	40011400 	.word	0x40011400
 80049a4:	51eb851f 	.word	0x51eb851f

080049a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ba:	2b84      	cmp	r3, #132	; 0x84
 80049bc:	d005      	beq.n	80049ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	3303      	adds	r3, #3
 80049c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049ca:	68fb      	ldr	r3, [r7, #12]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049dc:	f000 fada 	bl	8004f94 <vTaskStartScheduler>
  
  return osOK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e8:	b089      	sub	sp, #36	; 0x24
 80049ea:	af04      	add	r7, sp, #16
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <osThreadCreate+0x54>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01c      	beq.n	8004a3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685c      	ldr	r4, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681d      	ldr	r5, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691e      	ldr	r6, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ffc8 	bl	80049a8 <makeFreeRtosPriority>
 8004a18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a22:	9202      	str	r2, [sp, #8]
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	9100      	str	r1, [sp, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 f8ed 	bl	8004c0e <xTaskCreateStatic>
 8004a34:	4603      	mov	r3, r0
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e01c      	b.n	8004a74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685c      	ldr	r4, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a46:	b29e      	uxth	r6, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff ffaa 	bl	80049a8 <makeFreeRtosPriority>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f107 030c 	add.w	r3, r7, #12
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	9200      	str	r2, [sp, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	4632      	mov	r2, r6
 8004a62:	4629      	mov	r1, r5
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 f92c 	bl	8004cc2 <xTaskCreate>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d001      	beq.n	8004a74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a74:	68fb      	ldr	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <osDelay+0x16>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	e000      	b.n	8004a96 <osDelay+0x18>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fa48 	bl	8004f2c <vTaskDelay>
  
  return osOK;
 8004a9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f103 0208 	add.w	r2, r3, #8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f04f 32ff 	mov.w	r2, #4294967295
 8004abe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f103 0208 	add.w	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f103 0208 	add.w	r2, r3, #8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d103      	bne.n	8004b68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e00c      	b.n	8004b82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e002      	b.n	8004b76 <vListInsert+0x2e>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d2f6      	bcs.n	8004b70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6852      	ldr	r2, [r2, #4]
 8004bda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d103      	bne.n	8004bee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08e      	sub	sp, #56	; 0x38
 8004c12:	af04      	add	r7, sp, #16
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	623b      	str	r3, [r7, #32]
 8004c34:	e7fe      	b.n	8004c34 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <xTaskCreateStatic+0x42>
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e7fe      	b.n	8004c4e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c50:	2354      	movs	r3, #84	; 0x54
 8004c52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b54      	cmp	r3, #84	; 0x54
 8004c58:	d009      	beq.n	8004c6e <xTaskCreateStatic+0x60>
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e7fe      	b.n	8004c6c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01e      	beq.n	8004cb4 <xTaskCreateStatic+0xa6>
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9303      	str	r3, [sp, #12]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	9302      	str	r3, [sp, #8]
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f850 	bl	8004d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cae:	f000 f8d3 	bl	8004e58 <prvAddNewTaskToReadyList>
 8004cb2:	e001      	b.n	8004cb8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cb8:	697b      	ldr	r3, [r7, #20]
	}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3728      	adds	r7, #40	; 0x28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b08c      	sub	sp, #48	; 0x30
 8004cc6:	af04      	add	r7, sp, #16
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 feb4 	bl	8005a44 <pvPortMalloc>
 8004cdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00e      	beq.n	8004d02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ce4:	2054      	movs	r0, #84	; 0x54
 8004ce6:	f000 fead 	bl	8005a44 <pvPortMalloc>
 8004cea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8004cf8:	e005      	b.n	8004d06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f000 ff64 	bl	8005bc8 <vPortFree>
 8004d00:	e001      	b.n	8004d06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d017      	beq.n	8004d3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d14:	88fa      	ldrh	r2, [r7, #6]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9303      	str	r3, [sp, #12]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	9302      	str	r3, [sp, #8]
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f80e 	bl	8004d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d30:	69f8      	ldr	r0, [r7, #28]
 8004d32:	f000 f891 	bl	8004e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e002      	b.n	8004d42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d42:	69bb      	ldr	r3, [r7, #24]
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d64:	3b01      	subs	r3, #1
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <prvInitialiseNewTask+0x46>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e7fe      	b.n	8004d90 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01f      	beq.n	8004dd8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e012      	b.n	8004dc4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	7819      	ldrb	r1, [r3, #0]
 8004da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	3334      	adds	r3, #52	; 0x34
 8004dae:	460a      	mov	r2, r1
 8004db0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d006      	beq.n	8004dcc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	d9e9      	bls.n	8004d9e <prvInitialiseNewTask+0x52>
 8004dca:	e000      	b.n	8004dce <prvInitialiseNewTask+0x82>
			{
				break;
 8004dcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dd6:	e003      	b.n	8004de0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d901      	bls.n	8004dea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004de6:	2306      	movs	r3, #6
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2200      	movs	r2, #0
 8004dfa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fe70 	bl	8004ae6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	3318      	adds	r3, #24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fe6b 	bl	8004ae6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	f1c3 0207 	rsb	r2, r3, #7
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2200      	movs	r2, #0
 8004e2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	69b8      	ldr	r0, [r7, #24]
 8004e3a:	f000 fbfd 	bl	8005638 <pxPortInitialiseStack>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e50:	bf00      	nop
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e60:	f000 fd14 	bl	800588c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e64:	4b2a      	ldr	r3, [pc, #168]	; (8004f10 <prvAddNewTaskToReadyList+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <prvAddNewTaskToReadyList+0xb8>)
 8004e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e6e:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <prvAddNewTaskToReadyList+0xbc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e76:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <prvAddNewTaskToReadyList+0xbc>)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e7c:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <prvAddNewTaskToReadyList+0xb8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d110      	bne.n	8004ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e84:	f000 fab8 	bl	80053f8 <prvInitialiseTaskLists>
 8004e88:	e00d      	b.n	8004ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e8a:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <prvAddNewTaskToReadyList+0xc0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <prvAddNewTaskToReadyList+0xbc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d802      	bhi.n	8004ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <prvAddNewTaskToReadyList+0xbc>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <prvAddNewTaskToReadyList+0xc4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <prvAddNewTaskToReadyList+0xc4>)
 8004eae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <prvAddNewTaskToReadyList+0xc8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <prvAddNewTaskToReadyList+0xc8>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <prvAddNewTaskToReadyList+0xcc>)
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7ff fe11 	bl	8004b00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ede:	f000 fd03 	bl	80058e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <prvAddNewTaskToReadyList+0xc0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <prvAddNewTaskToReadyList+0xbc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d207      	bcs.n	8004f08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <prvAddNewTaskToReadyList+0xd0>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000380 	.word	0x20000380
 8004f14:	20000280 	.word	0x20000280
 8004f18:	2000038c 	.word	0x2000038c
 8004f1c:	2000039c 	.word	0x2000039c
 8004f20:	20000388 	.word	0x20000388
 8004f24:	20000284 	.word	0x20000284
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <vTaskDelay+0x60>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <vTaskDelay+0x2e>
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	e7fe      	b.n	8004f58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004f5a:	f000 f879 	bl	8005050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f5e:	2100      	movs	r1, #0
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fb03 	bl	800556c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f66:	f000 f881 	bl	800506c <xTaskResumeAll>
 8004f6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d107      	bne.n	8004f82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <vTaskDelay+0x64>)
 8004f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200003a8 	.word	0x200003a8
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fa2:	463a      	mov	r2, r7
 8004fa4:	1d39      	adds	r1, r7, #4
 8004fa6:	f107 0308 	add.w	r3, r7, #8
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb fb5e 	bl	800066c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	9202      	str	r2, [sp, #8]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	491d      	ldr	r1, [pc, #116]	; (8005038 <vTaskStartScheduler+0xa4>)
 8004fc4:	481d      	ldr	r0, [pc, #116]	; (800503c <vTaskStartScheduler+0xa8>)
 8004fc6:	f7ff fe22 	bl	8004c0e <xTaskCreateStatic>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <vTaskStartScheduler+0xac>)
 8004fce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <vTaskStartScheduler+0xac>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e001      	b.n	8004fe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d115      	bne.n	8005014 <vTaskStartScheduler+0x80>
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <vTaskStartScheduler+0xb0>)
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8005000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <vTaskStartScheduler+0xb4>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005008:	4b10      	ldr	r3, [pc, #64]	; (800504c <vTaskStartScheduler+0xb8>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800500e:	f000 fb9f 	bl	8005750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005012:	e00d      	b.n	8005030 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d109      	bne.n	8005030 <vTaskStartScheduler+0x9c>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e7fe      	b.n	800502e <vTaskStartScheduler+0x9a>
}
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08005eb0 	.word	0x08005eb0
 800503c:	080053c9 	.word	0x080053c9
 8005040:	200003a4 	.word	0x200003a4
 8005044:	200003a0 	.word	0x200003a0
 8005048:	2000038c 	.word	0x2000038c
 800504c:	20000384 	.word	0x20000384

08005050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <vTaskSuspendAll+0x18>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	4a03      	ldr	r2, [pc, #12]	; (8005068 <vTaskSuspendAll+0x18>)
 800505c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200003a8 	.word	0x200003a8

0800506c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <xTaskResumeAll+0x114>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <xTaskResumeAll+0x2a>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	e7fe      	b.n	8005094 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005096:	f000 fbf9 	bl	800588c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <xTaskResumeAll+0x114>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4a37      	ldr	r2, [pc, #220]	; (8005180 <xTaskResumeAll+0x114>)
 80050a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a4:	4b36      	ldr	r3, [pc, #216]	; (8005180 <xTaskResumeAll+0x114>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d161      	bne.n	8005170 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <xTaskResumeAll+0x118>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05d      	beq.n	8005170 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050b4:	e02e      	b.n	8005114 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b6:	4b34      	ldr	r3, [pc, #208]	; (8005188 <xTaskResumeAll+0x11c>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3318      	adds	r3, #24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fd79 	bl	8004bba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fd74 	bl	8004bba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	2201      	movs	r2, #1
 80050d8:	409a      	lsls	r2, r3
 80050da:	4b2c      	ldr	r3, [pc, #176]	; (800518c <xTaskResumeAll+0x120>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <xTaskResumeAll+0x120>)
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a27      	ldr	r2, [pc, #156]	; (8005190 <xTaskResumeAll+0x124>)
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7ff fd00 	bl	8004b00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4b23      	ldr	r3, [pc, #140]	; (8005194 <xTaskResumeAll+0x128>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <xTaskResumeAll+0x12c>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <xTaskResumeAll+0x11c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1cc      	bne.n	80050b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005122:	f000 fa03 	bl	800552c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <xTaskResumeAll+0x130>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005132:	f000 f837 	bl	80051a4 <xTaskIncrementTick>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800513c:	4b16      	ldr	r3, [pc, #88]	; (8005198 <xTaskResumeAll+0x12c>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3b01      	subs	r3, #1
 8005146:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f1      	bne.n	8005132 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <xTaskResumeAll+0x130>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <xTaskResumeAll+0x12c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <xTaskResumeAll+0x134>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005170:	f000 fbba 	bl	80058e8 <vPortExitCritical>

	return xAlreadyYielded;
 8005174:	68bb      	ldr	r3, [r7, #8]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200003a8 	.word	0x200003a8
 8005184:	20000380 	.word	0x20000380
 8005188:	20000340 	.word	0x20000340
 800518c:	20000388 	.word	0x20000388
 8005190:	20000284 	.word	0x20000284
 8005194:	20000280 	.word	0x20000280
 8005198:	20000394 	.word	0x20000394
 800519c:	20000390 	.word	0x20000390
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ae:	4b4e      	ldr	r3, [pc, #312]	; (80052e8 <xTaskIncrementTick+0x144>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 8087 	bne.w	80052c6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051b8:	4b4c      	ldr	r3, [pc, #304]	; (80052ec <xTaskIncrementTick+0x148>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051c0:	4a4a      	ldr	r2, [pc, #296]	; (80052ec <xTaskIncrementTick+0x148>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11f      	bne.n	800520c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80051cc:	4b48      	ldr	r3, [pc, #288]	; (80052f0 <xTaskIncrementTick+0x14c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <xTaskIncrementTick+0x46>
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	e7fe      	b.n	80051e8 <xTaskIncrementTick+0x44>
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <xTaskIncrementTick+0x14c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	4b40      	ldr	r3, [pc, #256]	; (80052f4 <xTaskIncrementTick+0x150>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a3e      	ldr	r2, [pc, #248]	; (80052f0 <xTaskIncrementTick+0x14c>)
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4a3e      	ldr	r2, [pc, #248]	; (80052f4 <xTaskIncrementTick+0x150>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4b3e      	ldr	r3, [pc, #248]	; (80052f8 <xTaskIncrementTick+0x154>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a3c      	ldr	r2, [pc, #240]	; (80052f8 <xTaskIncrementTick+0x154>)
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	f000 f990 	bl	800552c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800520c:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <xTaskIncrementTick+0x158>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	429a      	cmp	r2, r3
 8005214:	d348      	bcc.n	80052a8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <xTaskIncrementTick+0x14c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <xTaskIncrementTick+0x158>)
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	601a      	str	r2, [r3, #0]
					break;
 8005228:	e03e      	b.n	80052a8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522a:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <xTaskIncrementTick+0x14c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d203      	bcs.n	800524a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005242:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <xTaskIncrementTick+0x158>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005248:	e02e      	b.n	80052a8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fcb3 	bl	8004bba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	3318      	adds	r3, #24
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fcaa 	bl	8004bba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	2201      	movs	r2, #1
 800526c:	409a      	lsls	r2, r3
 800526e:	4b24      	ldr	r3, [pc, #144]	; (8005300 <xTaskIncrementTick+0x15c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	4a22      	ldr	r2, [pc, #136]	; (8005300 <xTaskIncrementTick+0x15c>)
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <xTaskIncrementTick+0x160>)
 8005286:	441a      	add	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7ff fc36 	bl	8004b00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <xTaskIncrementTick+0x164>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3b9      	bcc.n	8005216 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80052a2:	2301      	movs	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052a6:	e7b6      	b.n	8005216 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <xTaskIncrementTick+0x164>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4915      	ldr	r1, [pc, #84]	; (8005304 <xTaskIncrementTick+0x160>)
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d907      	bls.n	80052d0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e004      	b.n	80052d0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <xTaskIncrementTick+0x168>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4a0f      	ldr	r2, [pc, #60]	; (800530c <xTaskIncrementTick+0x168>)
 80052ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <xTaskIncrementTick+0x16c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80052d8:	2301      	movs	r3, #1
 80052da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052dc:	697b      	ldr	r3, [r7, #20]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200003a8 	.word	0x200003a8
 80052ec:	20000384 	.word	0x20000384
 80052f0:	20000338 	.word	0x20000338
 80052f4:	2000033c 	.word	0x2000033c
 80052f8:	20000398 	.word	0x20000398
 80052fc:	200003a0 	.word	0x200003a0
 8005300:	20000388 	.word	0x20000388
 8005304:	20000284 	.word	0x20000284
 8005308:	20000280 	.word	0x20000280
 800530c:	20000390 	.word	0x20000390
 8005310:	20000394 	.word	0x20000394

08005314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800531a:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <vTaskSwitchContext+0xa0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005322:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <vTaskSwitchContext+0xa4>)
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005328:	e03e      	b.n	80053a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800532a:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <vTaskSwitchContext+0xa4>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <vTaskSwitchContext+0xa8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	fab3 f383 	clz	r3, r3
 800533c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	f1c3 031f 	rsb	r3, r3, #31
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	491e      	ldr	r1, [pc, #120]	; (80053c0 <vTaskSwitchContext+0xac>)
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <vTaskSwitchContext+0x5a>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e7fe      	b.n	800536c <vTaskSwitchContext+0x58>
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <vTaskSwitchContext+0xac>)
 800537a:	4413      	add	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3308      	adds	r3, #8
 8005390:	429a      	cmp	r2, r3
 8005392:	d104      	bne.n	800539e <vTaskSwitchContext+0x8a>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <vTaskSwitchContext+0xb0>)
 80053a6:	6013      	str	r3, [r2, #0]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	200003a8 	.word	0x200003a8
 80053b8:	20000394 	.word	0x20000394
 80053bc:	20000388 	.word	0x20000388
 80053c0:	20000284 	.word	0x20000284
 80053c4:	20000280 	.word	0x20000280

080053c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053d0:	f000 f852 	bl	8005478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <prvIdleTask+0x28>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d9f9      	bls.n	80053d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <prvIdleTask+0x2c>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053ec:	e7f0      	b.n	80053d0 <prvIdleTask+0x8>
 80053ee:	bf00      	nop
 80053f0:	20000284 	.word	0x20000284
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e00c      	b.n	800541e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <prvInitialiseTaskLists+0x60>)
 8005410:	4413      	add	r3, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fb47 	bl	8004aa6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3301      	adds	r3, #1
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b06      	cmp	r3, #6
 8005422:	d9ef      	bls.n	8005404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005424:	480d      	ldr	r0, [pc, #52]	; (800545c <prvInitialiseTaskLists+0x64>)
 8005426:	f7ff fb3e 	bl	8004aa6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800542a:	480d      	ldr	r0, [pc, #52]	; (8005460 <prvInitialiseTaskLists+0x68>)
 800542c:	f7ff fb3b 	bl	8004aa6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005430:	480c      	ldr	r0, [pc, #48]	; (8005464 <prvInitialiseTaskLists+0x6c>)
 8005432:	f7ff fb38 	bl	8004aa6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005436:	480c      	ldr	r0, [pc, #48]	; (8005468 <prvInitialiseTaskLists+0x70>)
 8005438:	f7ff fb35 	bl	8004aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800543c:	480b      	ldr	r0, [pc, #44]	; (800546c <prvInitialiseTaskLists+0x74>)
 800543e:	f7ff fb32 	bl	8004aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <prvInitialiseTaskLists+0x78>)
 8005444:	4a05      	ldr	r2, [pc, #20]	; (800545c <prvInitialiseTaskLists+0x64>)
 8005446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <prvInitialiseTaskLists+0x7c>)
 800544a:	4a05      	ldr	r2, [pc, #20]	; (8005460 <prvInitialiseTaskLists+0x68>)
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000284 	.word	0x20000284
 800545c:	20000310 	.word	0x20000310
 8005460:	20000324 	.word	0x20000324
 8005464:	20000340 	.word	0x20000340
 8005468:	20000354 	.word	0x20000354
 800546c:	2000036c 	.word	0x2000036c
 8005470:	20000338 	.word	0x20000338
 8005474:	2000033c 	.word	0x2000033c

08005478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800547e:	e019      	b.n	80054b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005480:	f000 fa04 	bl	800588c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <prvCheckTasksWaitingTermination+0x4c>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fb92 	bl	8004bba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <prvCheckTasksWaitingTermination+0x50>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <prvCheckTasksWaitingTermination+0x50>)
 800549e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <prvCheckTasksWaitingTermination+0x54>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <prvCheckTasksWaitingTermination+0x54>)
 80054a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054aa:	f000 fa1d 	bl	80058e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f80e 	bl	80054d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <prvCheckTasksWaitingTermination+0x54>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e1      	bne.n	8005480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000354 	.word	0x20000354
 80054c8:	20000380 	.word	0x20000380
 80054cc:	20000368 	.word	0x20000368

080054d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d108      	bne.n	80054f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb6e 	bl	8005bc8 <vPortFree>
				vPortFree( pxTCB );
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fb6b 	bl	8005bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054f2:	e017      	b.n	8005524 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d103      	bne.n	8005506 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fb62 	bl	8005bc8 <vPortFree>
	}
 8005504:	e00e      	b.n	8005524 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800550c:	2b02      	cmp	r3, #2
 800550e:	d009      	beq.n	8005524 <prvDeleteTCB+0x54>
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e7fe      	b.n	8005522 <prvDeleteTCB+0x52>
	}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <prvResetNextTaskUnblockTime+0x38>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvResetNextTaskUnblockTime+0x3c>)
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005544:	e008      	b.n	8005558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <prvResetNextTaskUnblockTime+0x38>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <prvResetNextTaskUnblockTime+0x3c>)
 8005556:	6013      	str	r3, [r2, #0]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	20000338 	.word	0x20000338
 8005568:	200003a0 	.word	0x200003a0

0800556c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800557c:	4b28      	ldr	r3, [pc, #160]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3304      	adds	r3, #4
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fb19 	bl	8004bba <uxListRemove>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2201      	movs	r2, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43da      	mvns	r2, r3
 800559c:	4b21      	ldr	r3, [pc, #132]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4013      	ands	r3, r2
 80055a2:	4a20      	ldr	r2, [pc, #128]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d10a      	bne.n	80055c4 <prvAddCurrentTaskToDelayedList+0x58>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	481a      	ldr	r0, [pc, #104]	; (8005628 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055be:	f7ff fa9f 	bl	8004b00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c2:	e026      	b.n	8005612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055cc:	4b14      	ldr	r3, [pc, #80]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d209      	bcs.n	80055f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055dc:	4b13      	ldr	r3, [pc, #76]	; (800562c <prvAddCurrentTaskToDelayedList+0xc0>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7ff faad 	bl	8004b48 <vListInsert>
}
 80055ee:	e010      	b.n	8005612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7ff faa3 	bl	8004b48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	d202      	bcs.n	8005612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800560c:	4a09      	ldr	r2, [pc, #36]	; (8005634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6013      	str	r3, [r2, #0]
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000384 	.word	0x20000384
 8005620:	20000280 	.word	0x20000280
 8005624:	20000388 	.word	0x20000388
 8005628:	2000036c 	.word	0x2000036c
 800562c:	2000033c 	.word	0x2000033c
 8005630:	20000338 	.word	0x20000338
 8005634:	200003a0 	.word	0x200003a0

08005638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b04      	subs	r3, #4
 8005648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3b04      	subs	r3, #4
 8005656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f023 0201 	bic.w	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3b04      	subs	r3, #4
 8005666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005668:	4a0c      	ldr	r2, [pc, #48]	; (800569c <pxPortInitialiseStack+0x64>)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3b14      	subs	r3, #20
 8005672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3b04      	subs	r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f06f 0202 	mvn.w	r2, #2
 8005686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3b20      	subs	r3, #32
 800568c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800568e:	68fb      	ldr	r3, [r7, #12]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	080056a1 	.word	0x080056a1

080056a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <prvTaskExitError+0x50>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d009      	beq.n	80056c8 <prvTaskExitError+0x28>
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e7fe      	b.n	80056c6 <prvTaskExitError+0x26>
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056da:	bf00      	nop
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0fc      	beq.n	80056dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	2000000c 	.word	0x2000000c
	...

08005700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <pxCurrentTCBConst2>)
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	f380 8809 	msr	PSP, r0
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	4770      	bx	lr
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst2>:
 8005720:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005728:	4808      	ldr	r0, [pc, #32]	; (800574c <prvPortStartFirstTask+0x24>)
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	f380 8808 	msr	MSP, r0
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8814 	msr	CONTROL, r0
 800573a:	b662      	cpsie	i
 800573c:	b661      	cpsie	f
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	df00      	svc	0
 8005748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800574a:	bf00      	nop
 800574c:	e000ed08 	.word	0xe000ed08

08005750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005756:	4b44      	ldr	r3, [pc, #272]	; (8005868 <xPortStartScheduler+0x118>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a44      	ldr	r2, [pc, #272]	; (800586c <xPortStartScheduler+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d109      	bne.n	8005774 <xPortStartScheduler+0x24>
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	e7fe      	b.n	8005772 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005774:	4b3c      	ldr	r3, [pc, #240]	; (8005868 <xPortStartScheduler+0x118>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <xPortStartScheduler+0x120>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <xPortStartScheduler+0x42>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e7fe      	b.n	8005790 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <xPortStartScheduler+0x124>)
 8005794:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	4b30      	ldr	r3, [pc, #192]	; (8005878 <xPortStartScheduler+0x128>)
 80057b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ba:	4b30      	ldr	r3, [pc, #192]	; (800587c <xPortStartScheduler+0x12c>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057c0:	e009      	b.n	80057d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <xPortStartScheduler+0x12c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <xPortStartScheduler+0x12c>)
 80057ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b80      	cmp	r3, #128	; 0x80
 80057e0:	d0ef      	beq.n	80057c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <xPortStartScheduler+0x12c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1c3 0307 	rsb	r3, r3, #7
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d009      	beq.n	8005802 <xPortStartScheduler+0xb2>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	e7fe      	b.n	8005800 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <xPortStartScheduler+0x12c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	4a1c      	ldr	r2, [pc, #112]	; (800587c <xPortStartScheduler+0x12c>)
 800580a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <xPortStartScheduler+0x12c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <xPortStartScheduler+0x12c>)
 8005816:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xPortStartScheduler+0x130>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <xPortStartScheduler+0x130>)
 8005826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800582a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <xPortStartScheduler+0x130>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <xPortStartScheduler+0x130>)
 8005832:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005836:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005838:	f000 f8d6 	bl	80059e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <xPortStartScheduler+0x134>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005842:	f000 f8f5 	bl	8005a30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <xPortStartScheduler+0x138>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a0f      	ldr	r2, [pc, #60]	; (8005888 <xPortStartScheduler+0x138>)
 800584c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005850:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005852:	f7ff ff69 	bl	8005728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005856:	f7ff fd5d 	bl	8005314 <vTaskSwitchContext>
	prvTaskExitError();
 800585a:	f7ff ff21 	bl	80056a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed00 	.word	0xe000ed00
 800586c:	410fc271 	.word	0x410fc271
 8005870:	410fc270 	.word	0x410fc270
 8005874:	e000e400 	.word	0xe000e400
 8005878:	200003ac 	.word	0x200003ac
 800587c:	200003b0 	.word	0x200003b0
 8005880:	e000ed20 	.word	0xe000ed20
 8005884:	2000000c 	.word	0x2000000c
 8005888:	e000ef34 	.word	0xe000ef34

0800588c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <vPortEnterCritical+0x54>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <vPortEnterCritical+0x54>)
 80058ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <vPortEnterCritical+0x54>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d10e      	bne.n	80058d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <vPortEnterCritical+0x58>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <vPortEnterCritical+0x48>
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	e7fe      	b.n	80058d2 <vPortEnterCritical+0x46>
	}
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	2000000c 	.word	0x2000000c
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <vPortExitCritical+0x4c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <vPortExitCritical+0x22>
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e7fe      	b.n	8005908 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <vPortExitCritical+0x4c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	4a08      	ldr	r2, [pc, #32]	; (8005934 <vPortExitCritical+0x4c>)
 8005912:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <vPortExitCritical+0x4c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <vPortExitCritical+0x3e>
 800591c:	2300      	movs	r3, #0
 800591e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
	...

08005940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005940:	f3ef 8009 	mrs	r0, PSP
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <pxCurrentTCBConst>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f01e 0f10 	tst.w	lr, #16
 8005950:	bf08      	it	eq
 8005952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005964:	f380 8811 	msr	BASEPRI, r0
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f7ff fcd0 	bl	8005314 <vTaskSwitchContext>
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f380 8811 	msr	BASEPRI, r0
 800597c:	bc09      	pop	{r0, r3}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005986:	f01e 0f10 	tst.w	lr, #16
 800598a:	bf08      	it	eq
 800598c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005990:	f380 8809 	msr	PSP, r0
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst>:
 80059a0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059c0:	f7ff fbf0 	bl	80051a4 <xTaskIncrementTick>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <SysTick_Handler+0x3c>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <vPortSetupTimerInterrupt+0x34>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortSetupTimerInterrupt+0x38>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <vPortSetupTimerInterrupt+0x3c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <vPortSetupTimerInterrupt+0x40>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <vPortSetupTimerInterrupt+0x44>)
 8005a06:	3b01      	subs	r3, #1
 8005a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a0a:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <vPortSetupTimerInterrupt+0x34>)
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	601a      	str	r2, [r3, #0]
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000e010 	.word	0xe000e010
 8005a20:	e000e018 	.word	0xe000e018
 8005a24:	20000000 	.word	0x20000000
 8005a28:	10624dd3 	.word	0x10624dd3
 8005a2c:	e000e014 	.word	0xe000e014

08005a30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a40 <vPortEnableVFP+0x10>
 8005a34:	6801      	ldr	r1, [r0, #0]
 8005a36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a3a:	6001      	str	r1, [r0, #0]
 8005a3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a3e:	bf00      	nop
 8005a40:	e000ed88 	.word	0xe000ed88

08005a44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a50:	f7ff fafe 	bl	8005050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a54:	4b57      	ldr	r3, [pc, #348]	; (8005bb4 <pvPortMalloc+0x170>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a5c:	f000 f90c 	bl	8005c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a60:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <pvPortMalloc+0x174>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 808c 	bne.w	8005b86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01c      	beq.n	8005aae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a74:	2208      	movs	r2, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f023 0307 	bic.w	r3, r3, #7
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <pvPortMalloc+0x6a>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e7fe      	b.n	8005aac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d068      	beq.n	8005b86 <pvPortMalloc+0x142>
 8005ab4:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <pvPortMalloc+0x178>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d863      	bhi.n	8005b86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005abe:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <pvPortMalloc+0x17c>)
 8005ac0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <pvPortMalloc+0x17c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac8:	e004      	b.n	8005ad4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d903      	bls.n	8005ae6 <pvPortMalloc+0xa2>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f1      	bne.n	8005aca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <pvPortMalloc+0x170>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d04a      	beq.n	8005b86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2208      	movs	r2, #8
 8005af6:	4413      	add	r3, r2
 8005af8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d91e      	bls.n	8005b50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d009      	beq.n	8005b38 <pvPortMalloc+0xf4>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e7fe      	b.n	8005b36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b4a:	69b8      	ldr	r0, [r7, #24]
 8005b4c:	f000 f8f6 	bl	8005d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <pvPortMalloc+0x178>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <pvPortMalloc+0x178>)
 8005b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <pvPortMalloc+0x178>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <pvPortMalloc+0x180>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d203      	bcs.n	8005b72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <pvPortMalloc+0x178>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <pvPortMalloc+0x180>)
 8005b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <pvPortMalloc+0x174>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b86:	f7ff fa71 	bl	800506c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <pvPortMalloc+0x164>
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e7fe      	b.n	8005ba6 <pvPortMalloc+0x162>
	return pvReturn;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20003fbc 	.word	0x20003fbc
 8005bb8:	20003fc8 	.word	0x20003fc8
 8005bbc:	20003fc0 	.word	0x20003fc0
 8005bc0:	20003fb4 	.word	0x20003fb4
 8005bc4:	20003fc4 	.word	0x20003fc4

08005bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d046      	beq.n	8005c68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bda:	2308      	movs	r3, #8
 8005bdc:	425b      	negs	r3, r3
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <vPortFree+0xa8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <vPortFree+0x42>
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e7fe      	b.n	8005c08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <vPortFree+0x5e>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	e7fe      	b.n	8005c24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <vPortFree+0xa8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d019      	beq.n	8005c68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortFree+0xa8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	401a      	ands	r2, r3
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c4c:	f7ff fa00 	bl	8005050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <vPortFree+0xac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <vPortFree+0xac>)
 8005c5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f000 f86c 	bl	8005d3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c64:	f7ff fa02 	bl	800506c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c68:	bf00      	nop
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20003fc8 	.word	0x20003fc8
 8005c74:	20003fc0 	.word	0x20003fc0

08005c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c84:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <prvHeapInit+0xac>)
 8005c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3307      	adds	r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <prvHeapInit+0xac>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <prvHeapInit+0xb0>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cb6:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <prvHeapInit+0xb0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <prvHeapInit+0xb4>)
 8005cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <prvHeapInit+0xb4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <prvHeapInit+0xb4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <prvHeapInit+0xb4>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <prvHeapInit+0xb8>)
 8005d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <prvHeapInit+0xbc>)
 8005d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <prvHeapInit+0xc0>)
 8005d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	200003b4 	.word	0x200003b4
 8005d28:	20003fb4 	.word	0x20003fb4
 8005d2c:	20003fbc 	.word	0x20003fbc
 8005d30:	20003fc4 	.word	0x20003fc4
 8005d34:	20003fc0 	.word	0x20003fc0
 8005d38:	20003fc8 	.word	0x20003fc8

08005d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d44:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <prvInsertBlockIntoFreeList+0xac>)
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e002      	b.n	8005d50 <prvInsertBlockIntoFreeList+0x14>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d8f7      	bhi.n	8005d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d108      	bne.n	8005d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d118      	bne.n	8005dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <prvInsertBlockIntoFreeList+0xb0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d00d      	beq.n	8005dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e008      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <prvInsertBlockIntoFreeList+0xb0>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e003      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d002      	beq.n	8005dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20003fb4 	.word	0x20003fb4
 8005dec:	20003fbc 	.word	0x20003fbc

08005df0 <__libc_init_array>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4e0d      	ldr	r6, [pc, #52]	; (8005e28 <__libc_init_array+0x38>)
 8005df4:	4c0d      	ldr	r4, [pc, #52]	; (8005e2c <__libc_init_array+0x3c>)
 8005df6:	1ba4      	subs	r4, r4, r6
 8005df8:	10a4      	asrs	r4, r4, #2
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	42a5      	cmp	r5, r4
 8005dfe:	d109      	bne.n	8005e14 <__libc_init_array+0x24>
 8005e00:	4e0b      	ldr	r6, [pc, #44]	; (8005e30 <__libc_init_array+0x40>)
 8005e02:	4c0c      	ldr	r4, [pc, #48]	; (8005e34 <__libc_init_array+0x44>)
 8005e04:	f000 f820 	bl	8005e48 <_init>
 8005e08:	1ba4      	subs	r4, r4, r6
 8005e0a:	10a4      	asrs	r4, r4, #2
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	42a5      	cmp	r5, r4
 8005e10:	d105      	bne.n	8005e1e <__libc_init_array+0x2e>
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e18:	4798      	blx	r3
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	e7ee      	b.n	8005dfc <__libc_init_array+0xc>
 8005e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e22:	4798      	blx	r3
 8005e24:	3501      	adds	r5, #1
 8005e26:	e7f2      	b.n	8005e0e <__libc_init_array+0x1e>
 8005e28:	08005ed8 	.word	0x08005ed8
 8005e2c:	08005ed8 	.word	0x08005ed8
 8005e30:	08005ed8 	.word	0x08005ed8
 8005e34:	08005edc 	.word	0x08005edc

08005e38 <memset>:
 8005e38:	4402      	add	r2, r0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d100      	bne.n	8005e42 <memset+0xa>
 8005e40:	4770      	bx	lr
 8005e42:	f803 1b01 	strb.w	r1, [r3], #1
 8005e46:	e7f9      	b.n	8005e3c <memset+0x4>

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
