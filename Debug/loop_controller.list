
loop_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e8  080073e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f0  080073f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080073f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000416c  20000010  08007408  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  08007408  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a58f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c4d  00000000  00000000  0003a5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003e220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c0  00000000  00000000  0003f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019076  00000000  00000000  00040b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132d3  00000000  00000000  00059bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a793  00000000  00000000  0006ced1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  001076e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800733c 	.word	0x0800733c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800733c 	.word	0x0800733c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0x98>)
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_ADC1_Init+0x9c>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ADC1_Init+0x98>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ADC1_Init+0x98>)
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_ADC1_Init+0xa0>)
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_ADC1_Init+0x98>)
 800053e:	2201      	movs	r2, #1
 8000540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0x98>)
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <MX_ADC1_Init+0x98>)
 8000552:	f001 f95b 	bl	800180c <HAL_ADC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800055c:	f000 fa5e 	bl	8000a1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0x98>)
 8000572:	f001 f98f 	bl	8001894 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800057c:	f000 fa4e 	bl	8000a1c <Error_Handler>
  }

}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20003fcc 	.word	0x20003fcc
 800058c:	40012000 	.word	0x40012000
 8000590:	0f000001 	.word	0x0f000001

08000594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <HAL_ADC_MspInit+0x7c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d127      	bne.n	8000606 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c4:	6453      	str	r3, [r2, #68]	; 0x44
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_ADC_MspInit+0x80>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <HAL_ADC_MspInit+0x84>)
 8000602:	f001 fc69 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40012000 	.word	0x40012000
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000

0800061c <debugPrintln>:
 *      Author: Eric
 */

#include "usart.h"

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000626:	6838      	ldr	r0, [r7, #0]
 8000628:	f7ff fdda 	bl	80001e0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	230a      	movs	r3, #10
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f003 ff40 	bl	80044ba <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800063a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800063e:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000640:	f107 010c 	add.w	r1, r7, #12
 8000644:	230a      	movs	r3, #10
 8000646:	2202      	movs	r2, #2
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f003 ff36 	bl	80044ba <HAL_UART_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <vApplicationGetIdleTaskMemory+0x2c>)
 8000668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <vApplicationGetIdleTaskMemory+0x30>)
 800066e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000002c 	.word	0x2000002c
 8000688:	20000080 	.word	0x20000080

0800068c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08e      	sub	sp, #56	; 0x38
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


	xMotorQueue = xQueueCreate(30, sizeof(motorMessage_t));
 8000692:	2200      	movs	r2, #0
 8000694:	2108      	movs	r1, #8
 8000696:	201e      	movs	r0, #30
 8000698:	f004 ff4a 	bl	8005530 <xQueueGenericCreate>
 800069c:	4602      	mov	r2, r0
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_FREERTOS_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_FREERTOS_Init+0x6c>)
 80006a4:	f107 041c 	add.w	r4, r7, #28
 80006a8:	461d      	mov	r5, r3
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fdba 	bl	8005236 <osThreadCreate>
 80006c2:	4602      	mov	r2, r0
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_FREERTOS_Init+0x70>)
 80006c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_FREERTOS_Init+0x74>)
 80006ca:	463c      	mov	r4, r7
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80006da:	463b      	mov	r3, r7
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fda9 	bl	8005236 <osThreadCreate>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_FREERTOS_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	; 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000401c 	.word	0x2000401c
 80006f8:	08007360 	.word	0x08007360
 80006fc:	20004014 	.word	0x20004014
 8000700:	08007388 	.word	0x08007388
 8000704:	20004018 	.word	0x20004018

08000708 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  uint8_t first_run = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	77fb      	strb	r3, [r7, #31]
  motorMessage_t motorMessage;
  BaseType_t xStatus;
  uint8_t manual_run = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	77bb      	strb	r3, [r7, #30]
  uint32_t manual_step = 25000;
 8000718:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800071c:	61bb      	str	r3, [r7, #24]
  uint8_t turn_off_motor = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	777b      	strb	r3, [r7, #29]
  uint8_t turn_on_motor = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	75fb      	strb	r3, [r7, #23]
  {

	  	//Testing on 06/07/2022
	  	//25380 = CW band of 20m

	  	if(turn_off_motor) {
 8000726:	7f7b      	ldrb	r3, [r7, #29]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d005      	beq.n	8000738 <StartDefaultTask+0x30>
	  		power_off_motor_driver();
 800072c:	f000 f97a 	bl	8000a24 <power_off_motor_driver>
	  		disable_motor_driver();
 8000730:	f000 f990 	bl	8000a54 <disable_motor_driver>
	  		turn_off_motor = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	777b      	strb	r3, [r7, #29]
	  	}



		if(manual_run) {
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00e      	beq.n	800075c <StartDefaultTask+0x54>
				motorMessage.motorCommand = MOVE_TO_POSITION;
 800073e:	2302      	movs	r3, #2
 8000740:	723b      	strb	r3, [r7, #8]
				motorMessage.steps = manual_step;
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	60fb      	str	r3, [r7, #12]

				xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <StartDefaultTask+0x9c>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	f107 0108 	add.w	r1, r7, #8
 800074e:	2300      	movs	r3, #0
 8000750:	2200      	movs	r2, #0
 8000752:	f004 ff4b 	bl	80055ec <xQueueGenericSend>
 8000756:	6138      	str	r0, [r7, #16]

				if (xStatus != pdPASS) {
					//todo: add an assert or wait
				}
				manual_run = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	77bb      	strb	r3, [r7, #30]
	}


	if(first_run) {
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d01c      	beq.n	800079c <StartDefaultTask+0x94>
		motorMessage.motorCommand = HOME;
 8000762:	2301      	movs	r3, #1
 8000764:	723b      	strb	r3, [r7, #8]
		motorMessage.steps = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <StartDefaultTask+0x9c>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f107 0108 	add.w	r1, r7, #8
 8000772:	2300      	movs	r3, #0
 8000774:	2200      	movs	r2, #0
 8000776:	f004 ff39 	bl	80055ec <xQueueGenericSend>
 800077a:	6138      	str	r0, [r7, #16]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		motorMessage.motorCommand = MOVE_TO_POSITION;
 800077c:	2302      	movs	r3, #2
 800077e:	723b      	strb	r3, [r7, #8]
		motorMessage.steps = 25380;
 8000780:	f246 3324 	movw	r3, #25380	; 0x6324
 8000784:	60fb      	str	r3, [r7, #12]

		xStatus = xQueueSendToBack(xMotorQueue, &motorMessage, 0);
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <StartDefaultTask+0x9c>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	f107 0108 	add.w	r1, r7, #8
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	f004 ff2b 	bl	80055ec <xQueueGenericSend>
 8000796:	6138      	str	r0, [r7, #16]
		if (xStatus != pdPASS) {
			//todo: add an assert or wait
		}


		first_run = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	77fb      	strb	r3, [r7, #31]

  	}

      osDelay(50);
 800079c:	2032      	movs	r0, #50	; 0x32
 800079e:	f004 fd96 	bl	80052ce <osDelay>
	  	if(turn_off_motor) {
 80007a2:	e7c0      	b.n	8000726 <StartDefaultTask+0x1e>
 80007a4:	2000401c 	.word	0x2000401c

080007a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b40      	ldr	r3, [pc, #256]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <MX_GPIO_Init+0x128>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <MX_GPIO_Init+0x128>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000834:	4827      	ldr	r0, [pc, #156]	; (80008d4 <MX_GPIO_Init+0x12c>)
 8000836:	f001 fcd1 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000840:	4825      	ldr	r0, [pc, #148]	; (80008d8 <MX_GPIO_Init+0x130>)
 8000842:	f001 fccb 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_PWR_Pin|MOTOR_CS_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7140 	mov.w	r1, #768	; 0x300
 800084c:	4823      	ldr	r0, [pc, #140]	; (80008dc <MX_GPIO_Init+0x134>)
 800084e:	f001 fcc5 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x138>)
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	481c      	ldr	r0, [pc, #112]	; (80008d8 <MX_GPIO_Init+0x130>)
 8000868:	f001 fb36 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 800086c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x12c>)
 8000886:	f001 fb27 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_GPIO_Init+0x130>)
 80008a4:	f001 fb18 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TMC_PWR_Pin|MOTOR_CS_Pin;
 80008a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_GPIO_Init+0x134>)
 80008c2:	f001 fb09 	bl	8001ed8 <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020400 	.word	0x40020400
 80008e0:	10210000 	.word	0x10210000

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 ff2c 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f818 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f7ff ff5a 	bl	80007a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008f4:	f000 f9d0 	bl	8000c98 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 fe80 	bl	80015fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008fc:	f7ff fdf8 	bl	80004f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000900:	f000 fb4a 	bl	8000f98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000904:	f000 fbec 	bl	80010e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  enable_motor_driver();
 8000908:	f000 f898 	bl	8000a3c <enable_motor_driver>
  tmc_init();
 800090c:	f000 fe0c 	bl	8001528 <tmc_init>

  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000910:	2003      	movs	r0, #3
 8000912:	f001 fa8a 	bl	8001e2a <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000916:	f7ff feb9 	bl	800068c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800091a:	f004 fc85 	bl	8005228 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	e7fe      	b.n	800091e <main+0x3a>

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f006 fcfb 	bl	800732a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <SystemClock_Config+0xd0>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <SystemClock_Config+0xd0>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <SystemClock_Config+0xd0>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <SystemClock_Config+0xd4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <SystemClock_Config+0xd4>)
 800096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <SystemClock_Config+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	2310      	movs	r3, #16
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000994:	2310      	movs	r3, #16
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000998:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800099e:	2304      	movs	r3, #4
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a2:	2307      	movs	r3, #7
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fc30 	bl	8002210 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009b6:	f000 f831 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fe8a 	bl	80026f0 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009e2:	f000 f81b 	bl	8000a1c <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	; 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0a:	f000 febd 	bl	8001788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40000c00 	.word	0x40000c00

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x4>
	...

08000a24 <power_off_motor_driver>:
//extern QueueHandle_t xMotorQueue;

QueueHandle_t xMotorQueue;


void power_off_motor_driver(void) { //turn on by re-init
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4802      	ldr	r0, [pc, #8]	; (8000a38 <power_off_motor_driver+0x14>)
 8000a30:	f001 fbd4 	bl	80021dc <HAL_GPIO_WritePin>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40020400 	.word	0x40020400

08000a3c <enable_motor_driver>:

void enable_motor_driver(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <enable_motor_driver+0x14>)
 8000a46:	f001 fbc9 	bl	80021dc <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000

08000a54 <disable_motor_driver>:

void disable_motor_driver(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <disable_motor_driver+0x14>)
 8000a5e:	f001 fbbd 	bl	80021dc <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000

08000a6c <set_motor_dir>:


void set_motor_dir(uint8_t motor_dir) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if(motor_dir == 0) {
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d106      	bne.n	8000a8a <set_motor_dir+0x1e>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <set_motor_dir+0x34>)
 8000a84:	f001 fbaa 	bl	80021dc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
	}
}
 8000a88:	e005      	b.n	8000a96 <set_motor_dir+0x2a>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <set_motor_dir+0x34>)
 8000a92:	f001 fba3 	bl	80021dc <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <send_motor_steps>:

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim1, step_count);
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <send_motor_steps+0x58>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <send_motor_steps+0x58>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <send_motor_steps+0x58>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <send_motor_steps+0x58>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000acc:	2100      	movs	r1, #0
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <send_motor_steps+0x58>)
 8000ad0:	f002 fb76 	bl	80031c0 <HAL_TIM_OC_Start_IT>

	__HAL_TIM_SET_AUTORELOAD(&htim2,delay_in_us);
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <send_motor_steps+0x5c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <send_motor_steps+0x5c>)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <send_motor_steps+0x5c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2264      	movs	r2, #100	; 0x64
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000aea:	2108      	movs	r1, #8
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <send_motor_steps+0x5c>)
 8000aee:	f002 fca3 	bl	8003438 <HAL_TIM_PWM_Start>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200040b8 	.word	0x200040b8
 8000b00:	200040f8 	.word	0x200040f8

08000b04 <stop_motor>:


void stop_motor() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000b08:	2108      	movs	r1, #8
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <stop_motor+0x18>)
 8000b0c:	f002 fcc6 	bl	800349c <HAL_TIM_PWM_Stop>
	  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000b10:	2100      	movs	r1, #0
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <stop_motor+0x1c>)
 8000b14:	f002 fbcc 	bl	80032b0 <HAL_TIM_OC_Stop_IT>
	  return;
 8000b18:	bf00      	nop
}
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200040f8 	.word	0x200040f8
 8000b20:	200040b8 	.word	0x200040b8

08000b24 <StartMotorTask>:

void StartMotorTask(void const *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	motorMessage_t motorMessage;
	BaseType_t xStatus;
	uint8_t homing = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t start_movement = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t moving = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint32_t current_position_in_steps = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t target_position_in_steps = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t next_target_position_in_steps = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t step_delta = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
	for(;;)
	  {


		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000b4e:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <StartMotorTask+0x164>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 ffb4 	bl	8005ac0 <uxQueueMessagesWaiting>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d02d      	beq.n	8000bba <StartMotorTask+0x96>
			xStatus = xQueueReceive(xMotorQueue, &motorMessage, 0);
 8000b5e:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <StartMotorTask+0x164>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f107 010c 	add.w	r1, r7, #12
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fecd 	bl	8005908 <xQueueReceive>
 8000b6e:	61f8      	str	r0, [r7, #28]
			if (xStatus == pdPASS) {
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d121      	bne.n	8000bba <StartMotorTask+0x96>

				switch (motorMessage.motorCommand) {
 8000b76:	7b3b      	ldrb	r3, [r7, #12]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d009      	beq.n	8000b90 <StartMotorTask+0x6c>
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d00d      	beq.n	8000b9c <StartMotorTask+0x78>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d11a      	bne.n	8000bba <StartMotorTask+0x96>
					case (HOME):
						target_position_in_steps = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
						homing = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8000b8e:	e014      	b.n	8000bba <StartMotorTask+0x96>
					case(MOVE_TO_POSITION):
						next_target_position_in_steps = motorMessage.steps;
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
						start_movement = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						break;
 8000b9a:	e00e      	b.n	8000bba <StartMotorTask+0x96>
					case(STOP_MOTOR):
						if(!homing) {
 8000b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <StartMotorTask+0x94>
							moving = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							current_position_in_steps = target_position_in_steps; //todo: check the status of the counter and adjust, if necessary
 8000baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
							debugPrintln(&huart2, "Motor Stopped.");
 8000bae:	4937      	ldr	r1, [pc, #220]	; (8000c8c <StartMotorTask+0x168>)
 8000bb0:	4837      	ldr	r0, [pc, #220]	; (8000c90 <StartMotorTask+0x16c>)
 8000bb2:	f7ff fd33 	bl	800061c <debugPrintln>
						}
						break;
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
			} else {
				//todo: error handling
			}
		}

		if(homing) { //todo: make this non-blocking
 8000bba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d036      	beq.n	8000c30 <StartMotorTask+0x10c>
			set_motor_dir(0);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff ff52 	bl	8000a6c <set_motor_dir>
			uint32_t wait = 20000;
 8000bc8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bcc:	61bb      	str	r3, [r7, #24]
			uint32_t at_home_position = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
			uint8_t status = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]

			while(homing) {
 8000bd6:	e026      	b.n	8000c26 <StartMotorTask+0x102>
			  if(!at_home_position) {
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d123      	bne.n	8000c26 <StartMotorTask+0x102>
				  send_motor_steps(100,wait);
 8000bde:	69b9      	ldr	r1, [r7, #24]
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f7ff ff5f 	bl	8000aa4 <send_motor_steps>
				  HAL_Delay(50); //wait for motor to settle before checking the stall result
 8000be6:	2032      	movs	r0, #50	; 0x32
 8000be8:	f000 fdee 	bl	80017c8 <HAL_Delay>
				  //Note: this may be causing variability in the homing position. Maybe can help with this by slowing the homing process or tuning this time.
				  //This whole section needs to be reworked to make it more consistent.

				  status = tmc_get_status();
 8000bec:	f000 fbb6 	bl	800135c <tmc_get_status>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
				  if((status >> 2) & 0x01) { //if stall is detected
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d011      	beq.n	8000c26 <StartMotorTask+0x102>
					  at_home_position = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
					  homing = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					  current_position_in_steps = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
					  target_position_in_steps = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
					  moving = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  stop_motor();
 8000c1a:	f7ff ff73 	bl	8000b04 <stop_motor>
					  debugPrintln(&huart2, "At Home Position.");
 8000c1e:	491d      	ldr	r1, [pc, #116]	; (8000c94 <StartMotorTask+0x170>)
 8000c20:	481b      	ldr	r0, [pc, #108]	; (8000c90 <StartMotorTask+0x16c>)
 8000c22:	f7ff fcfb 	bl	800061c <debugPrintln>
			while(homing) {
 8000c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1d4      	bne.n	8000bd8 <StartMotorTask+0xb4>
 8000c2e:	e026      	b.n	8000c7e <StartMotorTask+0x15a>
				  }
			  }
			}

		} else {
			if(start_movement && !moving) {
 8000c30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d022      	beq.n	8000c7e <StartMotorTask+0x15a>
 8000c38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11e      	bne.n	8000c7e <StartMotorTask+0x15a>
				target_position_in_steps = next_target_position_in_steps;
 8000c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
				step_delta = target_position_in_steps - current_position_in_steps;
 8000c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	623b      	str	r3, [r7, #32]
				if(step_delta > 0) {
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dd03      	ble.n	8000c5a <StartMotorTask+0x136>
						set_motor_dir(1);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff ff0a 	bl	8000a6c <set_motor_dir>
 8000c58:	e002      	b.n	8000c60 <StartMotorTask+0x13c>
				} else {
						set_motor_dir(0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ff06 	bl	8000a6c <set_motor_dir>
				}

				send_motor_steps(  abs(step_delta)  , 20000);
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff19 	bl	8000aa4 <send_motor_steps>
				moving = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				start_movement = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36





	    osDelay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f004 fb25 	bl	80052ce <osDelay>
		if (uxQueueMessagesWaiting(xMotorQueue) > 0) {
 8000c84:	e763      	b.n	8000b4e <StartMotorTask+0x2a>
 8000c86:	bf00      	nop
 8000c88:	2000401c 	.word	0x2000401c
 8000c8c:	080073a4 	.word	0x080073a4
 8000c90:	20004138 	.word	0x20004138
 8000c94:	080073b4 	.word	0x080073b4

08000c98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb8:	2202      	movs	r2, #2
 8000cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ccc:	2238      	movs	r2, #56	; 0x38
 8000cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cea:	f001 ff25 	bl	8002b38 <HAL_SPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f7ff fe92 	bl	8000a1c <Error_Handler>
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20004020 	.word	0x20004020
 8000d00:	40013000 	.word	0x40013000

08000d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d5e:	23e0      	movs	r3, #224	; 0xe0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	f001 f8ad 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40013000 	.word	0x40013000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x54>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_MspInit+0x54>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x54>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_MspInit+0x54>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_MspInit+0x54>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_MspInit+0x54>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	f06f 0001 	mvn.w	r0, #1
 8000dda:	f001 f831 	bl	8001e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f001 f81d 	bl	8001e40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000e06:	2032      	movs	r0, #50	; 0x32
 8000e08:	f001 f836 	bl	8001e78 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e28:	f107 0210 	add.w	r2, r7, #16
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fe4e 	bl	8002ad4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e38:	f001 fe24 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9b      	lsrs	r3, r3, #18
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_InitTick+0xac>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_InitTick+0xb0>)
 8000e54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_InitTick+0xac>)
 8000e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_InitTick+0xac>)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_InitTick+0xac>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_InitTick+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_InitTick+0xac>)
 8000e72:	f002 f921 	bl	80030b8 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d104      	bne.n	8000e86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_InitTick+0xac>)
 8000e7e:	f002 f946 	bl	800310e <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	431bde83 	.word	0x431bde83
 8000e98:	20004078 	.word	0x20004078
 8000e9c:	40000c00 	.word	0x40000c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  motorMessage_t motorMessage;
  BaseType_t xStatus;


  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000eda:	2108      	movs	r1, #8
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000ede:	f002 fadd 	bl	800349c <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000ee4:	f002 fb26 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480a      	ldr	r0, [pc, #40]	; (8000f14 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000eec:	f002 f9e0 	bl	80032b0 <HAL_TIM_OC_Stop_IT>


  motorMessage.motorCommand = STOP_MOTOR;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	713b      	strb	r3, [r7, #4]
  motorMessage.steps = 0; //not used
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]

  xStatus = xQueueSendToFrontFromISR(xMotorQueue, &motorMessage, 0); //todo: consider if this should go to front of queue
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	2301      	movs	r3, #1
 8000f00:	2200      	movs	r2, #0
 8000f02:	f004 fc6d 	bl	80057e0 <xQueueGenericSendFromISR>
 8000f06:	60f8      	str	r0, [r7, #12]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200040f8 	.word	0x200040f8
 8000f14:	200040b8 	.word	0x200040b8
 8000f18:	2000401c 	.word	0x2000401c

08000f1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f22:	f002 fb07 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200040b8 	.word	0x200040b8

08000f30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM1_CC_IRQHandler+0x10>)
 8000f36:	f002 fafd 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 // HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200040b8 	.word	0x200040b8

08000f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <USART2_IRQHandler+0x10>)
 8000f4a:	f003 fb4f 	bl	80045ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004138 	.word	0x20004138

08000f58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <TIM5_IRQHandler+0x10>)
 8000f5e:	f002 fae9 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20004078 	.word	0x20004078

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <SystemInit+0x28>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <SystemInit+0x28>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SystemInit+0x28>)
 8000f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f86:	609a      	str	r2, [r3, #8]
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	; 0x58
 8000f9c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2220      	movs	r2, #32
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 f9a9 	bl	800732a <memset>

  htim1.Instance = TIM1;
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <MX_TIM1_Init+0x144>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_TIM1_Init+0x140>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001002:	4835      	ldr	r0, [pc, #212]	; (80010d8 <MX_TIM1_Init+0x140>)
 8001004:	f002 f858 	bl	80030b8 <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800100e:	f7ff fd05 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <MX_TIM1_Init+0x140>)
 8001014:	f002 f89f 	bl	8003156 <HAL_TIM_OC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800101e:	f7ff fcfd 	bl	8000a1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001022:	2307      	movs	r3, #7
 8001024:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001026:	2370      	movs	r3, #112	; 0x70
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800102a:	2300      	movs	r3, #0
 800102c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	653b      	str	r3, [r7, #80]	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001036:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103a:	4619      	mov	r1, r3
 800103c:	4826      	ldr	r0, [pc, #152]	; (80010d8 <MX_TIM1_Init+0x140>)
 800103e:	f002 fd5e 	bl	8003afe <HAL_TIM_SlaveConfigSynchro>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001048:	f7ff fce8 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001054:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001058:	4619      	mov	r1, r3
 800105a:	481f      	ldr	r0, [pc, #124]	; (80010d8 <MX_TIM1_Init+0x140>)
 800105c:	f003 f90c 	bl	8004278 <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8001066:	f7ff fcd9 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <MX_TIM1_Init+0x140>)
 8001090:	f002 fb58 	bl	8003744 <HAL_TIM_OC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800109a:	f7ff fcbf 	bl	8000a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM1_Init+0x140>)
 80010c2:	f003 f947 	bl	8004354 <HAL_TIMEx_ConfigBreakDeadTime>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80010cc:	f7ff fca6 	bl	8000a1c <Error_Handler>
  }

}
 80010d0:	bf00      	nop
 80010d2:	3758      	adds	r7, #88	; 0x58
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200040b8 	.word	0x200040b8
 80010dc:	40010000 	.word	0x40010000

080010e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_TIM2_Init+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001126:	f649 4240 	movw	r2, #40000	; 0x9c40
 800112a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_TIM2_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001138:	4823      	ldr	r0, [pc, #140]	; (80011c8 <MX_TIM2_Init+0xe8>)
 800113a:	f001 ffbd 	bl	80030b8 <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001144:	f7ff fc6a 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	4619      	mov	r1, r3
 8001154:	481c      	ldr	r0, [pc, #112]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001156:	f002 fc1b 	bl	8003990 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001160:	f7ff fc5c 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001164:	4818      	ldr	r0, [pc, #96]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001166:	f002 f931 	bl	80033cc <HAL_TIM_PWM_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001170:	f7ff fc54 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_TIM2_Init+0xe8>)
 8001184:	f003 f878 	bl	8004278 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800118e:	f7ff fc45 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001192:	2360      	movs	r3, #96	; 0x60
 8001194:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001196:	f242 7310 	movw	r3, #10000	; 0x2710
 800119a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2208      	movs	r2, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_TIM2_Init+0xe8>)
 80011ac:	f002 fb2a 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011b6:	f7ff fc31 	bl	8000a1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <MX_TIM2_Init+0xe8>)
 80011bc:	f000 f87a 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 80011c0:	bf00      	nop
 80011c2:	3738      	adds	r7, #56	; 0x38
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200040f8 	.word	0x200040f8

080011cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_TIM_Base_MspInit+0xdc>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d145      	bne.n	800127a <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001238:	2301      	movs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	481b      	ldr	r0, [pc, #108]	; (80012b0 <HAL_TIM_Base_MspInit+0xe4>)
 8001244:	f000 fe48 	bl	8001ed8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2105      	movs	r1, #5
 800124c:	2019      	movs	r0, #25
 800124e:	f000 fdf7 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001252:	2019      	movs	r0, #25
 8001254:	f000 fe10 	bl	8001e78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2105      	movs	r1, #5
 800125c:	201a      	movs	r0, #26
 800125e:	f000 fdef 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001262:	201a      	movs	r0, #26
 8001264:	f000 fe08 	bl	8001e78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2105      	movs	r1, #5
 800126c:	201b      	movs	r0, #27
 800126e:	f000 fde7 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001272:	201b      	movs	r0, #27
 8001274:	f000 fe00 	bl	8001e78 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001278:	e012      	b.n	80012a0 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001282:	d10d      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_TIM_Base_MspInit+0xe0>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d4:	d11e      	bne.n	8001314 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_TIM_MspPostInit+0x68>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_TIM_MspPostInit+0x68>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_TIM_MspPostInit+0x68>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <HAL_TIM_MspPostInit+0x6c>)
 8001310:	f000 fde2 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400

08001324 <tmc_enable_stallguard>:
#include "cmsis_os.h"
#include "spi.h"
#include "gpio.h"


uint32_t tmc_enable_stallguard(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	uint32_t reg_data = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
	int8_t sgt = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	70fb      	strb	r3, [r7, #3]


	reg_data = 0x010A0000; //loop antenna
 8001332:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
 8001336:	607b      	str	r3, [r7, #4]
	reg_data = 0x010B0000; //loop antenna
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <tmc_enable_stallguard+0x30>)
 800133a:	607b      	str	r3, [r7, #4]
	reg_data = 0x010D0000;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <tmc_enable_stallguard+0x34>)
 800133e:	607b      	str	r3, [r7, #4]
	//reg_data = 0x013D0000;
	tmc_readwrite_register(TMC_REG_COOLCONF, reg_data, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	206d      	movs	r0, #109	; 0x6d
 8001346:	f000 f85d 	bl	8001404 <tmc_readwrite_register>




	return 0;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	010b0000 	.word	0x010b0000
 8001358:	010d0000 	.word	0x010d0000

0800135c <tmc_get_status>:


uint8_t tmc_get_status() {
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af02      	add	r7, sp, #8
		uint8_t rx_data[5];
		uint8_t tx_data[5];
		uint32_t payload =0;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
		uint8_t status = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	76fb      	strb	r3, [r7, #27]
		uint8_t send_count = 2;
 800136a:	2302      	movs	r3, #2
 800136c:	76bb      	strb	r3, [r7, #26]

		uint8_t addr = TMC_REG_GSTAT;
 800136e:	2301      	movs	r3, #1
 8001370:	767b      	strb	r3, [r7, #25]
		uint32_t data = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]


		tx_data[0] = addr;
 8001376:	7e7b      	ldrb	r3, [r7, #25]
 8001378:	713b      	strb	r3, [r7, #4]
		tx_data[1] = (data >> 24) & 0x00ff;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	0e1b      	lsrs	r3, r3, #24
 800137e:	b2db      	uxtb	r3, r3
 8001380:	717b      	strb	r3, [r7, #5]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2db      	uxtb	r3, r3
 8001388:	71bb      	strb	r3, [r7, #6]
		tx_data[3] = (data >> 8)  & 0x00ff;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b2db      	uxtb	r3, r3
 8001390:	71fb      	strb	r3, [r7, #7]
		tx_data[4] = (data)	      & 0x00ff;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	723b      	strb	r3, [r7, #8]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001398:	bf00      	nop
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <tmc_get_status+0xa0>)
 800139c:	f001 fdd2 	bl	8002f44 <HAL_SPI_GetState>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1f9      	bne.n	800139a <tmc_get_status+0x3e>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <tmc_get_status+0xa4>)
 80013ae:	f000 ff15 	bl	80021dc <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013b2:	bf00      	nop
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <tmc_get_status+0xa0>)
 80013b6:	f001 fdc5 	bl	8002f44 <HAL_SPI_GetState>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1f9      	bne.n	80013b4 <tmc_get_status+0x58>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	1d39      	adds	r1, r7, #4
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2305      	movs	r3, #5
 80013ce:	480b      	ldr	r0, [pc, #44]	; (80013fc <tmc_get_status+0xa0>)
 80013d0:	f001 fc16 	bl	8002c00 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d4:	bf00      	nop
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <tmc_get_status+0xa0>)
 80013d8:	f001 fdb4 	bl	8002f44 <HAL_SPI_GetState>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d1f9      	bne.n	80013d6 <tmc_get_status+0x7a>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <tmc_get_status+0xa4>)
 80013ea:	f000 fef7 	bl	80021dc <HAL_GPIO_WritePin>





		status = rx_data[0];
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	76fb      	strb	r3, [r7, #27]

		return status;
 80013f2:	7efb      	ldrb	r3, [r7, #27]




}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20004020 	.word	0x20004020
 8001400:	40020400 	.word	0x40020400

08001404 <tmc_readwrite_register>:

uint32_t tmc_readwrite_register(uint8_t addr, uint32_t data, uint8_t set_write_flag) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af02      	add	r7, sp, #8
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	4613      	mov	r3, r2
 8001412:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_data[5];
	uint8_t tx_data[5];
	uint32_t payload =0;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
	uint8_t send_count = 2;
 8001418:	2302      	movs	r3, #2
 800141a:	77fb      	strb	r3, [r7, #31]


	if(set_write_flag) {
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <tmc_readwrite_register+0x2a>
		addr |= 0x80;
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001428:	71fb      	strb	r3, [r7, #7]
		send_count = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	77fb      	strb	r3, [r7, #31]

	}

	//send twice according to TMC2130 datasheet
	for (uint8_t i = 0; i < send_count; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	77bb      	strb	r3, [r7, #30]
 8001432:	e03f      	b.n	80014b4 <tmc_readwrite_register+0xb0>

		tx_data[0] = addr;
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	723b      	strb	r3, [r7, #8]
		tx_data[1] = (data >> 24) & 0x00ff;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	0e1b      	lsrs	r3, r3, #24
 800143c:	b2db      	uxtb	r3, r3
 800143e:	727b      	strb	r3, [r7, #9]
		tx_data[2] = (data >> 16) & 0x00ff;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	b2db      	uxtb	r3, r3
 8001446:	72bb      	strb	r3, [r7, #10]
		tx_data[3] = (data >> 8)  & 0x00ff;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = (data)	      & 0x00ff;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	733b      	strb	r3, [r7, #12]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001456:	bf00      	nop
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <tmc_readwrite_register+0xd8>)
 800145a:	f001 fd73 	bl	8002f44 <HAL_SPI_GetState>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d1f9      	bne.n	8001458 <tmc_readwrite_register+0x54>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146a:	481d      	ldr	r0, [pc, #116]	; (80014e0 <tmc_readwrite_register+0xdc>)
 800146c:	f000 feb6 	bl	80021dc <HAL_GPIO_WritePin>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001470:	bf00      	nop
 8001472:	481a      	ldr	r0, [pc, #104]	; (80014dc <tmc_readwrite_register+0xd8>)
 8001474:	f001 fd66 	bl	8002f44 <HAL_SPI_GetState>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d1f9      	bne.n	8001472 <tmc_readwrite_register+0x6e>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 800147e:	f107 0210 	add.w	r2, r7, #16
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2305      	movs	r3, #5
 800148e:	4813      	ldr	r0, [pc, #76]	; (80014dc <tmc_readwrite_register+0xd8>)
 8001490:	f001 fbb6 	bl	8002c00 <HAL_SPI_TransmitReceive>

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001494:	bf00      	nop
 8001496:	4811      	ldr	r0, [pc, #68]	; (80014dc <tmc_readwrite_register+0xd8>)
 8001498:	f001 fd54 	bl	8002f44 <HAL_SPI_GetState>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d1f9      	bne.n	8001496 <tmc_readwrite_register+0x92>
		HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <tmc_readwrite_register+0xdc>)
 80014aa:	f000 fe97 	bl	80021dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < send_count; i++) {
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	3301      	adds	r3, #1
 80014b2:	77bb      	strb	r3, [r7, #30]
 80014b4:	7fba      	ldrb	r2, [r7, #30]
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3bb      	bcc.n	8001434 <tmc_readwrite_register+0x30>



	}

	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80014bc:	7c7b      	ldrb	r3, [r7, #17]
 80014be:	061a      	lsls	r2, r3, #24
 80014c0:	7cbb      	ldrb	r3, [r7, #18]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	441a      	add	r2, r3
			+ (rx_data[3] << 8 ) +  rx_data[4];
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	4413      	add	r3, r2
 80014cc:	7d3a      	ldrb	r2, [r7, #20]
 80014ce:	4413      	add	r3, r2
	payload = (rx_data[1] << 24) + (rx_data[2] << 16)
 80014d0:	61bb      	str	r3, [r7, #24]


	return payload;
 80014d2:	69bb      	ldr	r3, [r7, #24]


}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20004020 	.word	0x20004020
 80014e0:	40020400 	.word	0x40020400

080014e4 <tmc_set_motor_current>:

/* ihold: 		hold current. 5 bits.  0 = 1/32, 31=32/32
 * irun:  		run current.  5 bits.  0 = 1/32, 31=32/32
 * iholddelay: 	number of clock cycles to power down. 4 bits. Delay is 2^18*iholddelay clocks periods.
 */
void tmc_set_motor_current(uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	460b      	mov	r3, r1
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	4613      	mov	r3, r2
 80014f4:	717b      	strb	r3, [r7, #5]
	uint32_t reg_data = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]

	reg_data = (ihold & 0x1F)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
			+  ((irun & 0x1F) << 8)
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001508:	431a      	orrs	r2, r3
			+  ((iholddelay & 0x0F) << 16);
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001512:	4413      	add	r3, r2
	reg_data = (ihold & 0x1F)
 8001514:	60fb      	str	r3, [r7, #12]

	tmc_readwrite_register(TMC_REG_IHOLD_IRUN, reg_data, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	68f9      	ldr	r1, [r7, #12]
 800151a:	2010      	movs	r0, #16
 800151c:	f7ff ff72 	bl	8001404 <tmc_readwrite_register>

	return;
 8001520:	bf00      	nop
}
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <tmc_init>:

/*initializes the TMC2130 driver for StealthChop operation with current appropriate for loop antenna
 *
 */
void tmc_init(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8

	uint8_t rx_data[2] = {0,0};
 800152e:	2300      	movs	r3, #0
 8001530:	713b      	strb	r3, [r7, #4]
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[2] = {0,0};
 8001536:	2300      	movs	r3, #0
 8001538:	703b      	strb	r3, [r7, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(MOTOR_CS_GPIO_Port, MOTOR_CS_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <tmc_init+0xc4>)
 8001546:	f000 fe49 	bl	80021dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 f93c 	bl	80017c8 <HAL_Delay>

	//Power cycle the TMC2130
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001556:	4825      	ldr	r0, [pc, #148]	; (80015ec <tmc_init+0xc4>)
 8001558:	f000 fe40 	bl	80021dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800155c:	2064      	movs	r0, #100	; 0x64
 800155e:	f000 f933 	bl	80017c8 <HAL_Delay>
	HAL_GPIO_WritePin(TMC_PWR_GPIO_Port, TMC_PWR_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	4820      	ldr	r0, [pc, #128]	; (80015ec <tmc_init+0xc4>)
 800156a:	f000 fe37 	bl	80021dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	; 0x64
 8001570:	f000 f92a 	bl	80017c8 <HAL_Delay>

	//write 16 bits out of SPI interface (without clearing CS pin) to set sck polarity correct.
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001574:	bf00      	nop
 8001576:	481e      	ldr	r0, [pc, #120]	; (80015f0 <tmc_init+0xc8>)
 8001578:	f001 fce4 	bl	8002f44 <HAL_SPI_GetState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1f9      	bne.n	8001576 <tmc_init+0x4e>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) tx_data, (uint8_t *) rx_data,  sizeof(rx_data), HAL_MAX_DELAY );
 8001582:	1d3a      	adds	r2, r7, #4
 8001584:	4639      	mov	r1, r7
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2302      	movs	r3, #2
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <tmc_init+0xc8>)
 8001590:	f001 fb36 	bl	8002c00 <HAL_SPI_TransmitReceive>

	//clear the status register by reading it
	tmc_readwrite_register(TMC_REG_GSTAT, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff ff33 	bl	8001404 <tmc_readwrite_register>

	//TOFF=4, TBL=2, HSTRT=4. HEND=0
	tmc_readwrite_register(TMC_REG_CHOPCONF, 0x5010044, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	4914      	ldr	r1, [pc, #80]	; (80015f4 <tmc_init+0xcc>)
 80015a2:	206c      	movs	r0, #108	; 0x6c
 80015a4:	f7ff ff2e 	bl	8001404 <tmc_readwrite_register>

	//IHOLD_IRUN: IHOLD=10, IRUN=31 (max. current), IHOLDDELAY=6
	tmc_set_motor_current(3, 10, 10);
 80015a8:	220a      	movs	r2, #10
 80015aa:	210a      	movs	r1, #10
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff ff99 	bl	80014e4 <tmc_set_motor_current>

	//approx 1 second to fully power down the motor after motion stops
	tmc_readwrite_register(TMC_REG_TPOWERDOWN, 0x40, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	2011      	movs	r0, #17
 80015b8:	f7ff ff24 	bl	8001404 <tmc_readwrite_register>

	//en_pwm_mode = 1, DIAG1 set to indicate stall, push-pull active high
	tmc_readwrite_register(TMC_REG_GCONF, 0x2104, 1);
 80015bc:	2201      	movs	r2, #1
 80015be:	f242 1104 	movw	r1, #8452	; 0x2104
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ff1e 	bl	8001404 <tmc_readwrite_register>

	//enable stallguard and set sensitvity
	tmc_enable_stallguard();
 80015c8:	f7ff feac 	bl	8001324 <tmc_enable_stallguard>

	//switching velocity = 35000
	tmc_readwrite_register(TMC_REG_TPWMTHRS, 0x1F4, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015d2:	2013      	movs	r0, #19
 80015d4:	f7ff ff16 	bl	8001404 <tmc_readwrite_register>

	//approx pwm_autoscale = 1, PWM_GRAD = 1, PWM_AMPL=255
	tmc_readwrite_register(TMC_REG_PWM_CONF, 0x401C8, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	4907      	ldr	r1, [pc, #28]	; (80015f8 <tmc_init+0xd0>)
 80015dc:	2070      	movs	r0, #112	; 0x70
 80015de:	f7ff ff11 	bl	8001404 <tmc_readwrite_register>

	return;
 80015e2:	bf00      	nop
}
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020400 	.word	0x40020400
 80015f0:	20004020 	.word	0x20004020
 80015f4:	05010044 	.word	0x05010044
 80015f8:	000401c8 	.word	0x000401c8

080015fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_USART2_UART_Init+0x50>)
 8001604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001634:	f002 fef4 	bl	8004420 <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800163e:	f7ff f9ed 	bl	8000a1c <Error_Handler>
  }

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20004138 	.word	0x20004138
 800164c:	40004400 	.word	0x40004400

08001650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_UART_MspInit+0x94>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d133      	bne.n	80016da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_UART_MspInit+0x98>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_UART_MspInit+0x98>)
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_UART_MspInit+0x98>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_UART_MspInit+0x98>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_UART_MspInit+0x98>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_UART_MspInit+0x98>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016aa:	230c      	movs	r3, #12
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ba:	2307      	movs	r3, #7
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <HAL_UART_MspInit+0x9c>)
 80016c6:	f000 fc07 	bl	8001ed8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2105      	movs	r1, #5
 80016ce:	2026      	movs	r0, #38	; 0x26
 80016d0:	f000 fbb6 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016d4:	2026      	movs	r0, #38	; 0x26
 80016d6:	f000 fbcf 	bl	8001e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40004400 	.word	0x40004400
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016f6:	e003      	b.n	8001700 <LoopCopyDataInit>

080016f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016fe:	3104      	adds	r1, #4

08001700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001708:	d3f6      	bcc.n	80016f8 <CopyDataInit>
  ldr  r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800170c:	e002      	b.n	8001714 <LoopFillZerobss>

0800170e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800170e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001710:	f842 3b04 	str.w	r3, [r2], #4

08001714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001718:	d3f9      	bcc.n	800170e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800171a:	f7ff fc27 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f005 fdd5 	bl	80072cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff f8df 	bl	80008e4 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800172c:	080073f8 	.word	0x080073f8
  ldr  r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001734:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001738:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800173c:	2000417c 	.word	0x2000417c

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 fb5c 	bl	8001e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fb3a 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fb0c 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20004178 	.word	0x20004178

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20004178 	.word	0x20004178

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_Delay+0x40>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e033      	b.n	800188a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe feb2 	bl	8000594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f93a 	bl	8001ad8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1c>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e105      	b.n	8001abc <HAL_ADC_ConfigChannel+0x228>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	d925      	bls.n	800190c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68d9      	ldr	r1, [r3, #12]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4403      	add	r3, r0
 80018fe:	3b1e      	subs	r3, #30
 8001900:	409a      	lsls	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	e022      	b.n	8001952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	2207      	movs	r2, #7
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	4603      	mov	r3, r0
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4403      	add	r3, r0
 8001948:	409a      	lsls	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d824      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b05      	subs	r3, #5
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b05      	subs	r3, #5
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
 80019a2:	e04c      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d824      	bhi.n	80019f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b23      	subs	r3, #35	; 0x23
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
 80019f4:	e023      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b41      	subs	r3, #65	; 0x41
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b41      	subs	r3, #65	; 0x41
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_ADC_ConfigChannel+0x234>)
 8001a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_ADC_ConfigChannel+0x238>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1cc>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_ADC_ConfigChannel+0x238>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d123      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d003      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x1e6>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b11      	cmp	r3, #17
 8001a78:	d11b      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d111      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_ADC_ConfigChannel+0x23c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_ADC_ConfigChannel+0x240>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9a      	lsrs	r2, r3, #18
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <ADC_Init+0x1f0>)
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	021a      	lsls	r2, r3, #8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6899      	ldr	r1, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <ADC_Init+0x1f4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6899      	ldr	r1, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6899      	ldr	r1, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e00f      	b.n	8001bd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0202 	bic.w	r2, r2, #2
 8001be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6899      	ldr	r1, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	005a      	lsls	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	035a      	lsls	r2, r3, #13
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	e007      	b.n	8001c4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	051a      	lsls	r2, r3, #20
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8e:	025a      	lsls	r2, r3, #9
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	029a      	lsls	r2, r3, #10
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	0f000001 	.word	0x0f000001

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff4c 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e52:	f7ff ff61 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f7ff ffb1 	bl	8001dc4 <NVIC_EncodePriority>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff80 	bl	8001d70 <__NVIC_SetPriority>
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff54 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e159      	b.n	80021a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8148 	bne.w	80021a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d00b      	beq.n	8001f32 <HAL_GPIO_Init+0x5a>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f26:	2b11      	cmp	r3, #17
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0xfc>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a2 	beq.w	80021a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b56      	ldr	r3, [pc, #344]	; (80021bc <HAL_GPIO_Init+0x2e4>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a55      	ldr	r2, [pc, #340]	; (80021bc <HAL_GPIO_Init+0x2e4>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_GPIO_Init+0x2e4>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_GPIO_Init+0x2e8>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2ec>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x202>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x1fe>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_GPIO_Init+0x2f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x1fa>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a45      	ldr	r2, [pc, #276]	; (80021d0 <HAL_GPIO_Init+0x2f8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x1f6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a44      	ldr	r2, [pc, #272]	; (80021d4 <HAL_GPIO_Init+0x2fc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x1f2>
 80020c6:	2304      	movs	r3, #4
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020ca:	2307      	movs	r3, #7
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4934      	ldr	r1, [pc, #208]	; (80021c0 <HAL_GPIO_Init+0x2e8>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fa:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_GPIO_Init+0x300>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211e:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_GPIO_Init+0x300>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_GPIO_Init+0x300>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_GPIO_Init+0x300>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f aea2 	bls.w	8001ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	3724      	adds	r7, #36	; 0x24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f8:	e003      	b.n	8002202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fa:	887b      	ldrh	r3, [r7, #2]
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e25b      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d075      	beq.n	800231a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800222e:	4ba3      	ldr	r3, [pc, #652]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d00c      	beq.n	8002254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b9d      	ldr	r3, [pc, #628]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002252:	d10b      	bne.n	800226c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	4b99      	ldr	r3, [pc, #612]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05b      	beq.n	8002318 <HAL_RCC_OscConfig+0x108>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d157      	bne.n	8002318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e236      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x74>
 8002276:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a90      	ldr	r2, [pc, #576]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fa72 	bl	80017b0 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fa6e 	bl	80017b0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1fb      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xc0>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fa5e 	bl	80017b0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fa5a 	bl	80017b0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1e7      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0xe8>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d063      	beq.n	80023ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b62      	ldr	r3, [pc, #392]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1bb      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4952      	ldr	r1, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e03a      	b.n	80023ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff fa13 	bl	80017b0 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff fa0f 	bl	80017b0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e19c      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4940      	ldr	r1, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f9f2 	bl	80017b0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d0:	f7ff f9ee 	bl	80017b0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e17b      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7ff f9d2 	bl	80017b0 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff f9ce 	bl	80017b0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e15b      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x200>
 800242e:	e015      	b.n	800245c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff f9bb 	bl	80017b0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243e:	f7ff f9b7 	bl	80017b0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e144      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a0 	beq.w	80025aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d121      	bne.n	80024ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7ff f97d 	bl	80017b0 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e011      	b.n	80024de <HAL_RCC_OscConfig+0x2ce>
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470000 	.word	0x42470000
 80024c4:	42470e80 	.word	0x42470e80
 80024c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7ff f970 	bl	80017b0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0fd      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x4d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <HAL_RCC_OscConfig+0x2f0>
 80024f2:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a7c      	ldr	r2, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	e01c      	b.n	800253a <HAL_RCC_OscConfig+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002508:	4b77      	ldr	r3, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a76      	ldr	r2, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
 8002514:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a73      	ldr	r2, [pc, #460]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x32a>
 8002522:	4b71      	ldr	r3, [pc, #452]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a70      	ldr	r2, [pc, #448]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a6d      	ldr	r2, [pc, #436]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7ff f935 	bl	80017b0 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7ff f931 	bl	80017b0 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0bc      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCC_OscConfig+0x33a>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff f91f 	bl	80017b0 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff f91b 	bl	80017b0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0a6      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	4b56      	ldr	r3, [pc, #344]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8092 	beq.w	80026d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d05c      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d141      	bne.n	800264c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_OscConfig+0x4dc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff f8ef 	bl	80017b0 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff f8eb 	bl	80017b0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e078      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	019b      	lsls	r3, r3, #6
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	4933      	ldr	r1, [pc, #204]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261e:	4b33      	ldr	r3, [pc, #204]	; (80026ec <HAL_RCC_OscConfig+0x4dc>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff f8c4 	bl	80017b0 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff f8c0 	bl	80017b0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e04d      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x41c>
 800264a:	e045      	b.n	80026d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x4dc>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff f8ad 	bl	80017b0 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff f8a9 	bl	80017b0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e036      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x44a>
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e029      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	429a      	cmp	r2, r3
 8002698:	d11c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d115      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470060 	.word	0x42470060

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe ffe6 	bl	80017b0 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe ffe2 	bl	80017b0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4601      	mov	r1, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	fa21 f303 	lsr.w	r3, r1, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe faa8 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080073d0 	.word	0x080073d0
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d007      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x32>
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d008      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x38>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80b4 	bne.w	8002a50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028ea:	60bb      	str	r3, [r7, #8]
       break;
 80028ec:	e0b3      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ee:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028f0:	60bb      	str	r3, [r7, #8]
      break;
 80028f2:	e0b0      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f4:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fe:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04a      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290a:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	f04f 0400 	mov.w	r4, #0
 8002914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	ea03 0501 	and.w	r5, r3, r1
 8002920:	ea04 0602 	and.w	r6, r4, r2
 8002924:	4629      	mov	r1, r5
 8002926:	4632      	mov	r2, r6
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	0154      	lsls	r4, r2, #5
 8002932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002936:	014b      	lsls	r3, r1, #5
 8002938:	4619      	mov	r1, r3
 800293a:	4622      	mov	r2, r4
 800293c:	1b49      	subs	r1, r1, r5
 800293e:	eb62 0206 	sbc.w	r2, r2, r6
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f04f 0400 	mov.w	r4, #0
 800294a:	0194      	lsls	r4, r2, #6
 800294c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002950:	018b      	lsls	r3, r1, #6
 8002952:	1a5b      	subs	r3, r3, r1
 8002954:	eb64 0402 	sbc.w	r4, r4, r2
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	00e2      	lsls	r2, r4, #3
 8002962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002966:	00d9      	lsls	r1, r3, #3
 8002968:	460b      	mov	r3, r1
 800296a:	4614      	mov	r4, r2
 800296c:	195b      	adds	r3, r3, r5
 800296e:	eb44 0406 	adc.w	r4, r4, r6
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	0262      	lsls	r2, r4, #9
 800297c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002980:	0259      	lsls	r1, r3, #9
 8002982:	460b      	mov	r3, r1
 8002984:	4614      	mov	r4, r2
 8002986:	4618      	mov	r0, r3
 8002988:	4621      	mov	r1, r4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f04f 0400 	mov.w	r4, #0
 8002990:	461a      	mov	r2, r3
 8002992:	4623      	mov	r3, r4
 8002994:	f7fd fc2c 	bl	80001f0 <__aeabi_uldivmod>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e049      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	f04f 0400 	mov.w	r4, #0
 80029aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	ea03 0501 	and.w	r5, r3, r1
 80029b6:	ea04 0602 	and.w	r6, r4, r2
 80029ba:	4629      	mov	r1, r5
 80029bc:	4632      	mov	r2, r6
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	0154      	lsls	r4, r2, #5
 80029c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029cc:	014b      	lsls	r3, r1, #5
 80029ce:	4619      	mov	r1, r3
 80029d0:	4622      	mov	r2, r4
 80029d2:	1b49      	subs	r1, r1, r5
 80029d4:	eb62 0206 	sbc.w	r2, r2, r6
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	f04f 0400 	mov.w	r4, #0
 80029e0:	0194      	lsls	r4, r2, #6
 80029e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029e6:	018b      	lsls	r3, r1, #6
 80029e8:	1a5b      	subs	r3, r3, r1
 80029ea:	eb64 0402 	sbc.w	r4, r4, r2
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	00e2      	lsls	r2, r4, #3
 80029f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029fc:	00d9      	lsls	r1, r3, #3
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	195b      	adds	r3, r3, r5
 8002a04:	eb44 0406 	adc.w	r4, r4, r6
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	02a2      	lsls	r2, r4, #10
 8002a12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a16:	0299      	lsls	r1, r3, #10
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4621      	mov	r1, r4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4623      	mov	r3, r4
 8002a2a:	f7fd fbe1 	bl	80001f0 <__aeabi_uldivmod>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	460c      	mov	r4, r1
 8002a32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	60bb      	str	r3, [r7, #8]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a52:	60bb      	str	r3, [r7, #8]
      break;
 8002a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a56:	68bb      	ldr	r3, [r7, #8]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000000 	.word	0x20000000

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a9b      	lsrs	r3, r3, #10
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	080073e0 	.word	0x080073e0

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ab0:	f7ff ffdc 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0b5b      	lsrs	r3, r3, #13
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	080073e0 	.word	0x080073e0

08002ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_RCC_GetClockConfig+0x5c>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCC_GetClockConfig+0x60>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	601a      	str	r2, [r3, #0]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40023c00 	.word	0x40023c00

08002b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e056      	b.n	8002bf8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fe f8cd 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	ea42 0103 	orr.w	r1, r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	f003 0104 	and.w	r1, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x26>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e18a      	b.n	8002f3c <HAL_SPI_TransmitReceive+0x33c>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c2e:	f7fe fdbf 	bl	80017b0 <HAL_GetTick>
 8002c32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d00f      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x70>
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c56:	d107      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d103      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x68>
 8002c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d003      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c6e:	e15b      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x82>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x82>
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c88:	e14e      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d003      	beq.n	8002c9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2205      	movs	r2, #5
 8002c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d007      	beq.n	8002cf2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cfa:	d178      	bne.n	8002dee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_TransmitReceive+0x10a>
 8002d04:	8b7b      	ldrh	r3, [r7, #26]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d166      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	1c9a      	adds	r2, r3, #2
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2e:	e053      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d11b      	bne.n	8002d76 <HAL_SPI_TransmitReceive+0x176>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_SPI_TransmitReceive+0x176>
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d113      	bne.n	8002d76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	1c9a      	adds	r2, r3, #2
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d119      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x1b8>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d014      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db4:	2301      	movs	r3, #1
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db8:	f7fe fcfa 	bl	80017b0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d807      	bhi.n	8002dd8 <HAL_SPI_TransmitReceive+0x1d8>
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d003      	beq.n	8002dd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dd6:	e0a7      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1a6      	bne.n	8002d30 <HAL_SPI_TransmitReceive+0x130>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1a1      	bne.n	8002d30 <HAL_SPI_TransmitReceive+0x130>
 8002dec:	e07c      	b.n	8002ee8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x1fc>
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d16b      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	7812      	ldrb	r2, [r2, #0]
 8002e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e22:	e057      	b.n	8002ed4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d11c      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x26c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x26c>
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d114      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d119      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x2ae>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d014      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002eae:	f7fe fc7f 	bl	80017b0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d803      	bhi.n	8002ec6 <HAL_SPI_TransmitReceive+0x2c6>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d102      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x2cc>
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ed2:	e029      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1a2      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x224>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d19d      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8a1 	bl	8003034 <SPI_EndRxTxTransaction>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f04:	e010      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	e000      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3730      	adds	r7, #48	; 0x30
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f52:	b2db      	uxtb	r3, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f70:	e04c      	b.n	800300c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d048      	beq.n	800300c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fc19 	bl	80017b0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d902      	bls.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d13d      	bne.n	800300c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa8:	d111      	bne.n	8002fce <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d004      	beq.n	8002fbe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d107      	bne.n	8002fce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d10f      	bne.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e00f      	b.n	800302c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d1a3      	bne.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <SPI_EndRxTxTransaction+0x7c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <SPI_EndRxTxTransaction+0x80>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0d5b      	lsrs	r3, r3, #21
 800304c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d112      	bne.n	8003086 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff ff78 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e00f      	b.n	80030a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3b01      	subs	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d0f2      	beq.n	8003086 <SPI_EndRxTxTransaction+0x52>
 80030a0:	e000      	b.n	80030a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80030a2:	bf00      	nop
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000
 80030b4:	165e9f81 	.word	0x165e9f81

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01d      	b.n	8003106 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe f874 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 fd6c 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d007      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e01d      	b.n	80031a4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f815 	bl	80031ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f000 fd1d 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d841      	bhi.n	8003254 <HAL_TIM_OC_Start_IT+0x94>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_TIM_OC_Start_IT+0x18>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003255 	.word	0x08003255
 80031e0:	08003255 	.word	0x08003255
 80031e4:	08003255 	.word	0x08003255
 80031e8:	0800321f 	.word	0x0800321f
 80031ec:	08003255 	.word	0x08003255
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003255 	.word	0x08003255
 80031f8:	08003231 	.word	0x08003231
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003255 	.word	0x08003255
 8003204:	08003255 	.word	0x08003255
 8003208:	08003243 	.word	0x08003243
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0202 	orr.w	r2, r2, #2
 800321a:	60da      	str	r2, [r3, #12]
      break;
 800321c:	e01b      	b.n	8003256 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0204 	orr.w	r2, r2, #4
 800322c:	60da      	str	r2, [r3, #12]
      break;
 800322e:	e012      	b.n	8003256 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0208 	orr.w	r2, r2, #8
 800323e:	60da      	str	r2, [r3, #12]
      break;
 8003240:	e009      	b.n	8003256 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0210 	orr.w	r2, r2, #16
 8003250:	60da      	str	r2, [r3, #12]
      break;
 8003252:	e000      	b.n	8003256 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003254:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 ffe4 	bl	800422c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIM_OC_Start_IT+0xec>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d107      	bne.n	800327e <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000

080032b0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d841      	bhi.n	8003344 <HAL_TIM_OC_Stop_IT+0x94>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_TIM_OC_Stop_IT+0x18>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	08003345 	.word	0x08003345
 80032d0:	08003345 	.word	0x08003345
 80032d4:	08003345 	.word	0x08003345
 80032d8:	0800330f 	.word	0x0800330f
 80032dc:	08003345 	.word	0x08003345
 80032e0:	08003345 	.word	0x08003345
 80032e4:	08003345 	.word	0x08003345
 80032e8:	08003321 	.word	0x08003321
 80032ec:	08003345 	.word	0x08003345
 80032f0:	08003345 	.word	0x08003345
 80032f4:	08003345 	.word	0x08003345
 80032f8:	08003333 	.word	0x08003333
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0202 	bic.w	r2, r2, #2
 800330a:	60da      	str	r2, [r3, #12]
      break;
 800330c:	e01b      	b.n	8003346 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0204 	bic.w	r2, r2, #4
 800331c:	60da      	str	r2, [r3, #12]
      break;
 800331e:	e012      	b.n	8003346 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0208 	bic.w	r2, r2, #8
 800332e:	60da      	str	r2, [r3, #12]
      break;
 8003330:	e009      	b.n	8003346 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0210 	bic.w	r2, r2, #16
 8003340:	60da      	str	r2, [r3, #12]
      break;
 8003342:	e000      	b.n	8003346 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003344:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 ff6c 	bl	800422c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <HAL_TIM_OC_Stop_IT+0x118>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d117      	bne.n	800338e <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	f241 1311 	movw	r3, #4369	; 0x1111
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <HAL_TIM_OC_Stop_IT+0xde>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	f240 4344 	movw	r3, #1092	; 0x444
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d107      	bne.n	800338e <HAL_TIM_OC_Stop_IT+0xde>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	f241 1311 	movw	r3, #4369	; 0x1111
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <HAL_TIM_OC_Stop_IT+0x10e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	f240 4344 	movw	r3, #1092	; 0x444
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <HAL_TIM_OC_Stop_IT+0x10e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40010000 	.word	0x40010000

080033cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e01d      	b.n	800341a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f815 	bl	8003422 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 fbe2 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2201      	movs	r2, #1
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 feee 	bl	800422c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_TIM_PWM_Start+0x60>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d107      	bne.n	800346a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d007      	beq.n	800348c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000

0800349c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	6839      	ldr	r1, [r7, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 febc 	bl	800422c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_TIM_PWM_Stop+0x94>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d117      	bne.n	80034ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_TIM_PWM_Stop+0x52>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	f240 4344 	movw	r3, #1092	; 0x444
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_TIM_PWM_Stop+0x52>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a1a      	ldr	r2, [r3, #32]
 80034f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <HAL_TIM_PWM_Stop+0x82>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	f240 4344 	movw	r3, #1092	; 0x444
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_TIM_PWM_Stop+0x82>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40010000 	.word	0x40010000

08003534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0202 	mvn.w	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fb0d 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 faff 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb10 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0204 	mvn.w	r2, #4
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fae3 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fad5 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fae6 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0208 	mvn.w	r2, #8
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2204      	movs	r2, #4
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fab9 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 faab 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fabc 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b10      	cmp	r3, #16
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2208      	movs	r2, #8
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa8f 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa81 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa92 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f9a0 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fe94 	bl	800440c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa57 	bl	8003bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	d10e      	bne.n	800373c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d107      	bne.n	800373c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0220 	mvn.w	r2, #32
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fe5e 	bl	80043f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_TIM_OC_ConfigChannel+0x1a>
 800375a:	2302      	movs	r3, #2
 800375c:	e04e      	b.n	80037fc <HAL_TIM_OC_ConfigChannel+0xb8>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d839      	bhi.n	80037e8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037e9 	.word	0x080037e9
 8003784:	080037e9 	.word	0x080037e9
 8003788:	080037e9 	.word	0x080037e9
 800378c:	080037bf 	.word	0x080037bf
 8003790:	080037e9 	.word	0x080037e9
 8003794:	080037e9 	.word	0x080037e9
 8003798:	080037e9 	.word	0x080037e9
 800379c:	080037cd 	.word	0x080037cd
 80037a0:	080037e9 	.word	0x080037e9
 80037a4:	080037e9 	.word	0x080037e9
 80037a8:	080037e9 	.word	0x080037e9
 80037ac:	080037db 	.word	0x080037db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fa8c 	bl	8003cd4 <TIM_OC1_SetConfig>
      break;
 80037bc:	e015      	b.n	80037ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 faeb 	bl	8003da0 <TIM_OC2_SetConfig>
      break;
 80037ca:	e00e      	b.n	80037ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fb50 	bl	8003e78 <TIM_OC3_SetConfig>
      break;
 80037d8:	e007      	b.n	80037ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fbb3 	bl	8003f4c <TIM_OC4_SetConfig>
      break;
 80037e6:	e000      	b.n	80037ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80037e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800381a:	2302      	movs	r3, #2
 800381c:	e0b4      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x184>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	f200 809f 	bhi.w	8003974 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	08003871 	.word	0x08003871
 8003840:	08003975 	.word	0x08003975
 8003844:	08003975 	.word	0x08003975
 8003848:	08003975 	.word	0x08003975
 800384c:	080038b1 	.word	0x080038b1
 8003850:	08003975 	.word	0x08003975
 8003854:	08003975 	.word	0x08003975
 8003858:	08003975 	.word	0x08003975
 800385c:	080038f3 	.word	0x080038f3
 8003860:	08003975 	.word	0x08003975
 8003864:	08003975 	.word	0x08003975
 8003868:	08003975 	.word	0x08003975
 800386c:	08003933 	.word	0x08003933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fa2c 	bl	8003cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6999      	ldr	r1, [r3, #24]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	619a      	str	r2, [r3, #24]
      break;
 80038ae:	e062      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fa72 	bl	8003da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	619a      	str	r2, [r3, #24]
      break;
 80038f0:	e041      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fabd 	bl	8003e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0208 	orr.w	r2, r2, #8
 800390c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0204 	bic.w	r2, r2, #4
 800391c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	61da      	str	r2, [r3, #28]
      break;
 8003930:	e021      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fb07 	bl	8003f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69d9      	ldr	r1, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	021a      	lsls	r2, r3, #8
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	61da      	str	r2, [r3, #28]
      break;
 8003972:	e000      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_TIM_ConfigClockSource+0x18>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0a6      	b.n	8003af6 <HAL_TIM_ConfigClockSource+0x166>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d067      	beq.n	8003ab0 <HAL_TIM_ConfigClockSource+0x120>
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d80b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x6c>
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d073      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0x140>
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d802      	bhi.n	80039f2 <HAL_TIM_ConfigClockSource+0x62>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d06f      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039f0:	e078      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d06c      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0x140>
 80039f6:	2b30      	cmp	r3, #48	; 0x30
 80039f8:	d06a      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039fa:	e073      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039fc:	2b70      	cmp	r3, #112	; 0x70
 80039fe:	d00d      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0x8c>
 8003a00:	2b70      	cmp	r3, #112	; 0x70
 8003a02:	d804      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x7e>
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d033      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0xe0>
 8003a08:	2b60      	cmp	r3, #96	; 0x60
 8003a0a:	d041      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a0c:	e06a      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a12:	d066      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x152>
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a18:	d017      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a1a:	e063      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f000 fbde 	bl	80041ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
      break;
 8003a48:	e04c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 fbc7 	bl	80041ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6c:	609a      	str	r2, [r3, #8]
      break;
 8003a6e:	e039      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f000 fb3b 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2150      	movs	r1, #80	; 0x50
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fb94 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003a8e:	e029      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f000 fb5a 	bl	8004156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2160      	movs	r1, #96	; 0x60
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fb84 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003aae:	e019      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f000 fb1b 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fb74 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003ace:	e009      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 fb6b 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e031      	b.n	8003b7a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fa5f 	bl	8003fec <TIM_SlaveTimer_SetConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e018      	b.n	8003b7a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b66:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <TIM_Base_SetConfig+0xe4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00f      	beq.n	8003c0c <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d00b      	beq.n	8003c0c <TIM_Base_SetConfig+0x38>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a31      	ldr	r2, [pc, #196]	; (8003cbc <TIM_Base_SetConfig+0xe8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_Base_SetConfig+0x38>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a30      	ldr	r2, [pc, #192]	; (8003cc0 <TIM_Base_SetConfig+0xec>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_Base_SetConfig+0x38>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <TIM_Base_SetConfig+0xf0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d108      	bne.n	8003c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <TIM_Base_SetConfig+0xe4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01b      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d017      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <TIM_Base_SetConfig+0xe8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <TIM_Base_SetConfig+0xec>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00f      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <TIM_Base_SetConfig+0xf0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00b      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <TIM_Base_SetConfig+0xf4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <TIM_Base_SetConfig+0xf8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d003      	beq.n	8003c5e <TIM_Base_SetConfig+0x8a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <TIM_Base_SetConfig+0xfc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d108      	bne.n	8003c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <TIM_Base_SetConfig+0xe4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	615a      	str	r2, [r3, #20]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800

08003cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0302 	bic.w	r3, r3, #2
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <TIM_OC1_SetConfig+0xc8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0308 	bic.w	r3, r3, #8
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <TIM_OC1_SetConfig+0xc8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d111      	bne.n	8003d76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40010000 	.word	0x40010000

08003da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0210 	bic.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0320 	bic.w	r3, r3, #32
 8003dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <TIM_OC2_SetConfig+0xd4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10d      	bne.n	8003e1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <TIM_OC2_SetConfig+0xd4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d113      	bne.n	8003e4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000

08003e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <TIM_OC3_SetConfig+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10d      	bne.n	8003ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <TIM_OC3_SetConfig+0xd0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d113      	bne.n	8003f22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	621a      	str	r2, [r3, #32]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40010000 	.word	0x40010000

08003f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a10      	ldr	r2, [pc, #64]	; (8003fe8 <TIM_OC4_SetConfig+0x9c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d109      	bne.n	8003fc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000

08003fec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0307 	bic.w	r3, r3, #7
 8004016:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b30      	cmp	r3, #48	; 0x30
 8004030:	d05c      	beq.n	80040ec <TIM_SlaveTimer_SetConfig+0x100>
 8004032:	2b30      	cmp	r3, #48	; 0x30
 8004034:	d806      	bhi.n	8004044 <TIM_SlaveTimer_SetConfig+0x58>
 8004036:	2b10      	cmp	r3, #16
 8004038:	d058      	beq.n	80040ec <TIM_SlaveTimer_SetConfig+0x100>
 800403a:	2b20      	cmp	r3, #32
 800403c:	d056      	beq.n	80040ec <TIM_SlaveTimer_SetConfig+0x100>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d054      	beq.n	80040ec <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004042:	e054      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d03d      	beq.n	80040c4 <TIM_SlaveTimer_SetConfig+0xd8>
 8004048:	2b50      	cmp	r3, #80	; 0x50
 800404a:	d802      	bhi.n	8004052 <TIM_SlaveTimer_SetConfig+0x66>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d010      	beq.n	8004072 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8004050:	e04d      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004052:	2b60      	cmp	r3, #96	; 0x60
 8004054:	d040      	beq.n	80040d8 <TIM_SlaveTimer_SetConfig+0xec>
 8004056:	2b70      	cmp	r3, #112	; 0x70
 8004058:	d000      	beq.n	800405c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800405a:	e048      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68d9      	ldr	r1, [r3, #12]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f000 f8be 	bl	80041ec <TIM_ETR_SetConfig>
      break;
 8004070:	e03d      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b05      	cmp	r3, #5
 8004078:	d101      	bne.n	800407e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e038      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	621a      	str	r2, [r3, #32]
      break;
 80040c2:	e014      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f000 f811 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      break;
 80040d6:	e00a      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	461a      	mov	r2, r3
 80040e6:	f000 f836 	bl	8004156 <TIM_TI2_ConfigInputStage>
      break;
 80040ea:	e000      	b.n	80040ee <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80040ec:	bf00      	nop
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 030a 	bic.w	r3, r3, #10
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0210 	bic.w	r2, r3, #16
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	031b      	lsls	r3, r3, #12
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f043 0307 	orr.w	r3, r3, #7
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2201      	movs	r2, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1a      	ldr	r2, [r3, #32]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	43db      	mvns	r3, r3
 800424e:	401a      	ands	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800428c:	2302      	movs	r3, #2
 800428e:	e050      	b.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d013      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a15      	ldr	r2, [pc, #84]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4313      	orrs	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000

08004354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800436c:	2302      	movs	r3, #2
 800436e:	e03d      	b.n	80043ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e03f      	b.n	80044b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd f902 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fb4b 	bl	8004b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b088      	sub	sp, #32
 80044be:	af02      	add	r7, sp, #8
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	f040 8083 	bne.w	80045e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Transmit+0x2e>
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e07b      	b.n	80045e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Transmit+0x40>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e074      	b.n	80045e4 <HAL_UART_Transmit+0x12a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2221      	movs	r2, #33	; 0x21
 800450c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004510:	f7fd f94e 	bl	80017b0 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800452a:	e042      	b.n	80045b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004542:	d122      	bne.n	800458a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2200      	movs	r2, #0
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f96a 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e042      	b.n	80045e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004570:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3302      	adds	r3, #2
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	e017      	b.n	80045b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3301      	adds	r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	e013      	b.n	80045b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f947 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e01f      	b.n	80045e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	60ba      	str	r2, [r7, #8]
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1b7      	bne.n	800452c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f92e 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e006      	b.n	80045e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10d      	bne.n	800463e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_UART_IRQHandler+0x52>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f9e0 	bl	80049fc <UART_Receive_IT>
      return;
 800463c:	e0d1      	b.n	80047e2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b0 	beq.w	80047a6 <HAL_UART_IRQHandler+0x1ba>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <HAL_UART_IRQHandler+0x70>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a5 	beq.w	80047a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_UART_IRQHandler+0x90>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_UART_IRQHandler+0xb0>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_UART_IRQHandler+0xd0>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00f      	beq.n	80046e6 <HAL_UART_IRQHandler+0xfa>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <HAL_UART_IRQHandler+0xee>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	f043 0208 	orr.w	r2, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d078      	beq.n	80047e0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_UART_IRQHandler+0x11c>
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f97a 	bl	80049fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <HAL_UART_IRQHandler+0x144>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d031      	beq.n	8004794 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8c3 	bl	80048bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d123      	bne.n	800478c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004752:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <HAL_UART_IRQHandler+0x1fc>)
 8004762:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	4618      	mov	r0, r3
 800476a:	f7fd fb93 	bl	8001e94 <HAL_DMA_Abort_IT>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d016      	beq.n	80047a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800477e:	4610      	mov	r0, r2
 8004780:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004782:	e00e      	b.n	80047a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f845 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	e00a      	b.n	80047a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f841 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004792:	e006      	b.n	80047a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f83d 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80047a0:	e01e      	b.n	80047e0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a2:	bf00      	nop
    return;
 80047a4:	e01c      	b.n	80047e0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_UART_IRQHandler+0x1d6>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8b0 	bl	8004920 <UART_Transmit_IT>
    return;
 80047c0:	e00f      	b.n	80047e2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1f6>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8f8 	bl	80049cc <UART_EndTransmit_IT>
    return;
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80047e0:	bf00      	nop
  }
}
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	080048f9 	.word	0x080048f9

080047ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004838:	e02c      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d028      	beq.n	8004894 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0x30>
 8004848:	f7fc ffb2 	bl	80017b0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	429a      	cmp	r2, r3
 8004856:	d21d      	bcs.n	8004894 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004866:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e00f      	b.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d0c3      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff7e 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b21      	cmp	r3, #33	; 0x21
 8004932:	d144      	bne.n	80049be <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	d11a      	bne.n	8004974 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004952:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d105      	bne.n	8004968 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]
 8004966:	e00e      	b.n	8004986 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	621a      	str	r2, [r3, #32]
 8004972:	e008      	b.n	8004986 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6211      	str	r1, [r2, #32]
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4619      	mov	r1, r3
 8004994:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff fefd 	bl	80047ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b22      	cmp	r3, #34	; 0x22
 8004a0e:	d171      	bne.n	8004af4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a18:	d123      	bne.n	8004a62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10e      	bne.n	8004a46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	1c9a      	adds	r2, r3, #2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
 8004a44:	e029      	b.n	8004a9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a60:	e01b      	b.n	8004a9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6858      	ldr	r0, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	1c59      	adds	r1, r3, #1
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6291      	str	r1, [r2, #40]	; 0x28
 8004a7a:	b2c2      	uxtb	r2, r0
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e00c      	b.n	8004a9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	1c58      	adds	r0, r3, #1
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	6288      	str	r0, [r1, #40]	; 0x28
 8004a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d120      	bne.n	8004af0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0220 	bic.w	r2, r2, #32
 8004abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fe8a 	bl	8004800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e002      	b.n	8004af6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b42:	f023 030c 	bic.w	r3, r3, #12
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6e:	f040 818b 	bne.w	8004e88 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4ac1      	ldr	r2, [pc, #772]	; (8004e7c <UART_SetConfig+0x37c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d005      	beq.n	8004b88 <UART_SetConfig+0x88>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4abf      	ldr	r2, [pc, #764]	; (8004e80 <UART_SetConfig+0x380>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f040 80bd 	bne.w	8004d02 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7fd ff90 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8004b8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	461d      	mov	r5, r3
 8004b92:	f04f 0600 	mov.w	r6, #0
 8004b96:	46a8      	mov	r8, r5
 8004b98:	46b1      	mov	r9, r6
 8004b9a:	eb18 0308 	adds.w	r3, r8, r8
 8004b9e:	eb49 0409 	adc.w	r4, r9, r9
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	46a1      	mov	r9, r4
 8004ba6:	eb18 0805 	adds.w	r8, r8, r5
 8004baa:	eb49 0906 	adc.w	r9, r9, r6
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bc2:	4688      	mov	r8, r1
 8004bc4:	4691      	mov	r9, r2
 8004bc6:	eb18 0005 	adds.w	r0, r8, r5
 8004bca:	eb49 0106 	adc.w	r1, r9, r6
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	461d      	mov	r5, r3
 8004bd4:	f04f 0600 	mov.w	r6, #0
 8004bd8:	196b      	adds	r3, r5, r5
 8004bda:	eb46 0406 	adc.w	r4, r6, r6
 8004bde:	461a      	mov	r2, r3
 8004be0:	4623      	mov	r3, r4
 8004be2:	f7fb fb05 	bl	80001f0 <__aeabi_uldivmod>
 8004be6:	4603      	mov	r3, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	461a      	mov	r2, r3
 8004bec:	4ba5      	ldr	r3, [pc, #660]	; (8004e84 <UART_SetConfig+0x384>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	f04f 0600 	mov.w	r6, #0
 8004c00:	46a9      	mov	r9, r5
 8004c02:	46b2      	mov	sl, r6
 8004c04:	eb19 0309 	adds.w	r3, r9, r9
 8004c08:	eb4a 040a 	adc.w	r4, sl, sl
 8004c0c:	4699      	mov	r9, r3
 8004c0e:	46a2      	mov	sl, r4
 8004c10:	eb19 0905 	adds.w	r9, r9, r5
 8004c14:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c18:	f04f 0100 	mov.w	r1, #0
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c2c:	4689      	mov	r9, r1
 8004c2e:	4692      	mov	sl, r2
 8004c30:	eb19 0005 	adds.w	r0, r9, r5
 8004c34:	eb4a 0106 	adc.w	r1, sl, r6
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	461d      	mov	r5, r3
 8004c3e:	f04f 0600 	mov.w	r6, #0
 8004c42:	196b      	adds	r3, r5, r5
 8004c44:	eb46 0406 	adc.w	r4, r6, r6
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	f7fb fad0 	bl	80001f0 <__aeabi_uldivmod>
 8004c50:	4603      	mov	r3, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b8b      	ldr	r3, [pc, #556]	; (8004e84 <UART_SetConfig+0x384>)
 8004c58:	fba3 1302 	umull	r1, r3, r3, r2
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	2164      	movs	r1, #100	; 0x64
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	3332      	adds	r3, #50	; 0x32
 8004c6a:	4a86      	ldr	r2, [pc, #536]	; (8004e84 <UART_SetConfig+0x384>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c78:	4498      	add	r8, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	f04f 0600 	mov.w	r6, #0
 8004c82:	46a9      	mov	r9, r5
 8004c84:	46b2      	mov	sl, r6
 8004c86:	eb19 0309 	adds.w	r3, r9, r9
 8004c8a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c8e:	4699      	mov	r9, r3
 8004c90:	46a2      	mov	sl, r4
 8004c92:	eb19 0905 	adds.w	r9, r9, r5
 8004c96:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004caa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cae:	4689      	mov	r9, r1
 8004cb0:	4692      	mov	sl, r2
 8004cb2:	eb19 0005 	adds.w	r0, r9, r5
 8004cb6:	eb4a 0106 	adc.w	r1, sl, r6
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	f04f 0600 	mov.w	r6, #0
 8004cc4:	196b      	adds	r3, r5, r5
 8004cc6:	eb46 0406 	adc.w	r4, r6, r6
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4623      	mov	r3, r4
 8004cce:	f7fb fa8f 	bl	80001f0 <__aeabi_uldivmod>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <UART_SetConfig+0x384>)
 8004cda:	fba3 1302 	umull	r1, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2164      	movs	r1, #100	; 0x64
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a65      	ldr	r2, [pc, #404]	; (8004e84 <UART_SetConfig+0x384>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 0207 	and.w	r2, r3, #7
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4442      	add	r2, r8
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	e26f      	b.n	80051e2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fd febf 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004d06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	f04f 0600 	mov.w	r6, #0
 8004d10:	46a8      	mov	r8, r5
 8004d12:	46b1      	mov	r9, r6
 8004d14:	eb18 0308 	adds.w	r3, r8, r8
 8004d18:	eb49 0409 	adc.w	r4, r9, r9
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	46a1      	mov	r9, r4
 8004d20:	eb18 0805 	adds.w	r8, r8, r5
 8004d24:	eb49 0906 	adc.w	r9, r9, r6
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d3c:	4688      	mov	r8, r1
 8004d3e:	4691      	mov	r9, r2
 8004d40:	eb18 0005 	adds.w	r0, r8, r5
 8004d44:	eb49 0106 	adc.w	r1, r9, r6
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	461d      	mov	r5, r3
 8004d4e:	f04f 0600 	mov.w	r6, #0
 8004d52:	196b      	adds	r3, r5, r5
 8004d54:	eb46 0406 	adc.w	r4, r6, r6
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	f7fb fa48 	bl	80001f0 <__aeabi_uldivmod>
 8004d60:	4603      	mov	r3, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	461a      	mov	r2, r3
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <UART_SetConfig+0x384>)
 8004d68:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	461d      	mov	r5, r3
 8004d76:	f04f 0600 	mov.w	r6, #0
 8004d7a:	46a9      	mov	r9, r5
 8004d7c:	46b2      	mov	sl, r6
 8004d7e:	eb19 0309 	adds.w	r3, r9, r9
 8004d82:	eb4a 040a 	adc.w	r4, sl, sl
 8004d86:	4699      	mov	r9, r3
 8004d88:	46a2      	mov	sl, r4
 8004d8a:	eb19 0905 	adds.w	r9, r9, r5
 8004d8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004da2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004da6:	4689      	mov	r9, r1
 8004da8:	4692      	mov	sl, r2
 8004daa:	eb19 0005 	adds.w	r0, r9, r5
 8004dae:	eb4a 0106 	adc.w	r1, sl, r6
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	461d      	mov	r5, r3
 8004db8:	f04f 0600 	mov.w	r6, #0
 8004dbc:	196b      	adds	r3, r5, r5
 8004dbe:	eb46 0406 	adc.w	r4, r6, r6
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	f7fb fa13 	bl	80001f0 <__aeabi_uldivmod>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <UART_SetConfig+0x384>)
 8004dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2164      	movs	r1, #100	; 0x64
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	3332      	adds	r3, #50	; 0x32
 8004de4:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <UART_SetConfig+0x384>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df2:	4498      	add	r8, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	461d      	mov	r5, r3
 8004df8:	f04f 0600 	mov.w	r6, #0
 8004dfc:	46a9      	mov	r9, r5
 8004dfe:	46b2      	mov	sl, r6
 8004e00:	eb19 0309 	adds.w	r3, r9, r9
 8004e04:	eb4a 040a 	adc.w	r4, sl, sl
 8004e08:	4699      	mov	r9, r3
 8004e0a:	46a2      	mov	sl, r4
 8004e0c:	eb19 0905 	adds.w	r9, r9, r5
 8004e10:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e28:	4689      	mov	r9, r1
 8004e2a:	4692      	mov	sl, r2
 8004e2c:	eb19 0005 	adds.w	r0, r9, r5
 8004e30:	eb4a 0106 	adc.w	r1, sl, r6
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	461d      	mov	r5, r3
 8004e3a:	f04f 0600 	mov.w	r6, #0
 8004e3e:	196b      	adds	r3, r5, r5
 8004e40:	eb46 0406 	adc.w	r4, r6, r6
 8004e44:	461a      	mov	r2, r3
 8004e46:	4623      	mov	r3, r4
 8004e48:	f7fb f9d2 	bl	80001f0 <__aeabi_uldivmod>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <UART_SetConfig+0x384>)
 8004e54:	fba3 1302 	umull	r1, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	2164      	movs	r1, #100	; 0x64
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	3332      	adds	r3, #50	; 0x32
 8004e66:	4a07      	ldr	r2, [pc, #28]	; (8004e84 <UART_SetConfig+0x384>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	f003 0207 	and.w	r2, r3, #7
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4442      	add	r2, r8
 8004e78:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e7a:	e1b2      	b.n	80051e2 <UART_SetConfig+0x6e2>
 8004e7c:	40011000 	.word	0x40011000
 8004e80:	40011400 	.word	0x40011400
 8004e84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4ad7      	ldr	r2, [pc, #860]	; (80051ec <UART_SetConfig+0x6ec>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d005      	beq.n	8004e9e <UART_SetConfig+0x39e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4ad6      	ldr	r2, [pc, #856]	; (80051f0 <UART_SetConfig+0x6f0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f040 80d1 	bne.w	8005040 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e9e:	f7fd fe05 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8004ea2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	469a      	mov	sl, r3
 8004ea8:	f04f 0b00 	mov.w	fp, #0
 8004eac:	46d0      	mov	r8, sl
 8004eae:	46d9      	mov	r9, fp
 8004eb0:	eb18 0308 	adds.w	r3, r8, r8
 8004eb4:	eb49 0409 	adc.w	r4, r9, r9
 8004eb8:	4698      	mov	r8, r3
 8004eba:	46a1      	mov	r9, r4
 8004ebc:	eb18 080a 	adds.w	r8, r8, sl
 8004ec0:	eb49 090b 	adc.w	r9, r9, fp
 8004ec4:	f04f 0100 	mov.w	r1, #0
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ed0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ed4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ed8:	4688      	mov	r8, r1
 8004eda:	4691      	mov	r9, r2
 8004edc:	eb1a 0508 	adds.w	r5, sl, r8
 8004ee0:	eb4b 0609 	adc.w	r6, fp, r9
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	f04f 0400 	mov.w	r4, #0
 8004ef6:	0094      	lsls	r4, r2, #2
 8004ef8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004efc:	008b      	lsls	r3, r1, #2
 8004efe:	461a      	mov	r2, r3
 8004f00:	4623      	mov	r3, r4
 8004f02:	4628      	mov	r0, r5
 8004f04:	4631      	mov	r1, r6
 8004f06:	f7fb f973 	bl	80001f0 <__aeabi_uldivmod>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4bb8      	ldr	r3, [pc, #736]	; (80051f4 <UART_SetConfig+0x6f4>)
 8004f12:	fba3 2302 	umull	r2, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	469b      	mov	fp, r3
 8004f20:	f04f 0c00 	mov.w	ip, #0
 8004f24:	46d9      	mov	r9, fp
 8004f26:	46e2      	mov	sl, ip
 8004f28:	eb19 0309 	adds.w	r3, r9, r9
 8004f2c:	eb4a 040a 	adc.w	r4, sl, sl
 8004f30:	4699      	mov	r9, r3
 8004f32:	46a2      	mov	sl, r4
 8004f34:	eb19 090b 	adds.w	r9, r9, fp
 8004f38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f3c:	f04f 0100 	mov.w	r1, #0
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f50:	4689      	mov	r9, r1
 8004f52:	4692      	mov	sl, r2
 8004f54:	eb1b 0509 	adds.w	r5, fp, r9
 8004f58:	eb4c 060a 	adc.w	r6, ip, sl
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	f04f 0400 	mov.w	r4, #0
 8004f6e:	0094      	lsls	r4, r2, #2
 8004f70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f74:	008b      	lsls	r3, r1, #2
 8004f76:	461a      	mov	r2, r3
 8004f78:	4623      	mov	r3, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	f7fb f937 	bl	80001f0 <__aeabi_uldivmod>
 8004f82:	4603      	mov	r3, r0
 8004f84:	460c      	mov	r4, r1
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b9a      	ldr	r3, [pc, #616]	; (80051f4 <UART_SetConfig+0x6f4>)
 8004f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2164      	movs	r1, #100	; 0x64
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	3332      	adds	r3, #50	; 0x32
 8004f9c:	4a95      	ldr	r2, [pc, #596]	; (80051f4 <UART_SetConfig+0x6f4>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa8:	4498      	add	r8, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	469b      	mov	fp, r3
 8004fae:	f04f 0c00 	mov.w	ip, #0
 8004fb2:	46d9      	mov	r9, fp
 8004fb4:	46e2      	mov	sl, ip
 8004fb6:	eb19 0309 	adds.w	r3, r9, r9
 8004fba:	eb4a 040a 	adc.w	r4, sl, sl
 8004fbe:	4699      	mov	r9, r3
 8004fc0:	46a2      	mov	sl, r4
 8004fc2:	eb19 090b 	adds.w	r9, r9, fp
 8004fc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fca:	f04f 0100 	mov.w	r1, #0
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fde:	4689      	mov	r9, r1
 8004fe0:	4692      	mov	sl, r2
 8004fe2:	eb1b 0509 	adds.w	r5, fp, r9
 8004fe6:	eb4c 060a 	adc.w	r6, ip, sl
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	f04f 0400 	mov.w	r4, #0
 8004ffc:	0094      	lsls	r4, r2, #2
 8004ffe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005002:	008b      	lsls	r3, r1, #2
 8005004:	461a      	mov	r2, r3
 8005006:	4623      	mov	r3, r4
 8005008:	4628      	mov	r0, r5
 800500a:	4631      	mov	r1, r6
 800500c:	f7fb f8f0 	bl	80001f0 <__aeabi_uldivmod>
 8005010:	4603      	mov	r3, r0
 8005012:	460c      	mov	r4, r1
 8005014:	461a      	mov	r2, r3
 8005016:	4b77      	ldr	r3, [pc, #476]	; (80051f4 <UART_SetConfig+0x6f4>)
 8005018:	fba3 1302 	umull	r1, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	2164      	movs	r1, #100	; 0x64
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	3332      	adds	r3, #50	; 0x32
 800502a:	4a72      	ldr	r2, [pc, #456]	; (80051f4 <UART_SetConfig+0x6f4>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4442      	add	r2, r8
 800503c:	609a      	str	r2, [r3, #8]
 800503e:	e0d0      	b.n	80051e2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fd fd20 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8005044:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	469a      	mov	sl, r3
 800504a:	f04f 0b00 	mov.w	fp, #0
 800504e:	46d0      	mov	r8, sl
 8005050:	46d9      	mov	r9, fp
 8005052:	eb18 0308 	adds.w	r3, r8, r8
 8005056:	eb49 0409 	adc.w	r4, r9, r9
 800505a:	4698      	mov	r8, r3
 800505c:	46a1      	mov	r9, r4
 800505e:	eb18 080a 	adds.w	r8, r8, sl
 8005062:	eb49 090b 	adc.w	r9, r9, fp
 8005066:	f04f 0100 	mov.w	r1, #0
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005072:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005076:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800507a:	4688      	mov	r8, r1
 800507c:	4691      	mov	r9, r2
 800507e:	eb1a 0508 	adds.w	r5, sl, r8
 8005082:	eb4b 0609 	adc.w	r6, fp, r9
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4619      	mov	r1, r3
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	f04f 0400 	mov.w	r4, #0
 8005098:	0094      	lsls	r4, r2, #2
 800509a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	4631      	mov	r1, r6
 80050a8:	f7fb f8a2 	bl	80001f0 <__aeabi_uldivmod>
 80050ac:	4603      	mov	r3, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b50      	ldr	r3, [pc, #320]	; (80051f4 <UART_SetConfig+0x6f4>)
 80050b4:	fba3 2302 	umull	r2, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	469b      	mov	fp, r3
 80050c2:	f04f 0c00 	mov.w	ip, #0
 80050c6:	46d9      	mov	r9, fp
 80050c8:	46e2      	mov	sl, ip
 80050ca:	eb19 0309 	adds.w	r3, r9, r9
 80050ce:	eb4a 040a 	adc.w	r4, sl, sl
 80050d2:	4699      	mov	r9, r3
 80050d4:	46a2      	mov	sl, r4
 80050d6:	eb19 090b 	adds.w	r9, r9, fp
 80050da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050f2:	4689      	mov	r9, r1
 80050f4:	4692      	mov	sl, r2
 80050f6:	eb1b 0509 	adds.w	r5, fp, r9
 80050fa:	eb4c 060a 	adc.w	r6, ip, sl
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4619      	mov	r1, r3
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	f04f 0400 	mov.w	r4, #0
 8005110:	0094      	lsls	r4, r2, #2
 8005112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005116:	008b      	lsls	r3, r1, #2
 8005118:	461a      	mov	r2, r3
 800511a:	4623      	mov	r3, r4
 800511c:	4628      	mov	r0, r5
 800511e:	4631      	mov	r1, r6
 8005120:	f7fb f866 	bl	80001f0 <__aeabi_uldivmod>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	461a      	mov	r2, r3
 800512a:	4b32      	ldr	r3, [pc, #200]	; (80051f4 <UART_SetConfig+0x6f4>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a2d      	ldr	r2, [pc, #180]	; (80051f4 <UART_SetConfig+0x6f4>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514a:	4498      	add	r8, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	469b      	mov	fp, r3
 8005150:	f04f 0c00 	mov.w	ip, #0
 8005154:	46d9      	mov	r9, fp
 8005156:	46e2      	mov	sl, ip
 8005158:	eb19 0309 	adds.w	r3, r9, r9
 800515c:	eb4a 040a 	adc.w	r4, sl, sl
 8005160:	4699      	mov	r9, r3
 8005162:	46a2      	mov	sl, r4
 8005164:	eb19 090b 	adds.w	r9, r9, fp
 8005168:	eb4a 0a0c 	adc.w	sl, sl, ip
 800516c:	f04f 0100 	mov.w	r1, #0
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800517c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005180:	4689      	mov	r9, r1
 8005182:	4692      	mov	sl, r2
 8005184:	eb1b 0509 	adds.w	r5, fp, r9
 8005188:	eb4c 060a 	adc.w	r6, ip, sl
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4619      	mov	r1, r3
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	f04f 0400 	mov.w	r4, #0
 800519e:	0094      	lsls	r4, r2, #2
 80051a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051a4:	008b      	lsls	r3, r1, #2
 80051a6:	461a      	mov	r2, r3
 80051a8:	4623      	mov	r3, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	4631      	mov	r1, r6
 80051ae:	f7fb f81f 	bl	80001f0 <__aeabi_uldivmod>
 80051b2:	4603      	mov	r3, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	461a      	mov	r2, r3
 80051b8:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <UART_SetConfig+0x6f4>)
 80051ba:	fba3 1302 	umull	r1, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2164      	movs	r1, #100	; 0x64
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	3332      	adds	r3, #50	; 0x32
 80051cc:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <UART_SetConfig+0x6f4>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4442      	add	r2, r8
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	e7ff      	b.n	80051e2 <UART_SetConfig+0x6e2>
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	40011000 	.word	0x40011000
 80051f0:	40011400 	.word	0x40011400
 80051f4:	51eb851f 	.word	0x51eb851f

080051f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520a:	2b84      	cmp	r3, #132	; 0x84
 800520c:	d005      	beq.n	800521a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800520e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	3303      	adds	r3, #3
 8005218:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800522c:	f000 ff38 	bl	80060a0 <vTaskStartScheduler>
  
  return osOK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	bd80      	pop	{r7, pc}

08005236 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005238:	b089      	sub	sp, #36	; 0x24
 800523a:	af04      	add	r7, sp, #16
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <osThreadCreate+0x54>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01c      	beq.n	800528a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685c      	ldr	r4, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681d      	ldr	r5, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691e      	ldr	r6, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ffc8 	bl	80051f8 <makeFreeRtosPriority>
 8005268:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005272:	9202      	str	r2, [sp, #8]
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	9100      	str	r1, [sp, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4632      	mov	r2, r6
 800527c:	4629      	mov	r1, r5
 800527e:	4620      	mov	r0, r4
 8005280:	f000 fd4b 	bl	8005d1a <xTaskCreateStatic>
 8005284:	4603      	mov	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e01c      	b.n	80052c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685c      	ldr	r4, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005296:	b29e      	uxth	r6, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff ffaa 	bl	80051f8 <makeFreeRtosPriority>
 80052a4:	4602      	mov	r2, r0
 80052a6:	f107 030c 	add.w	r3, r7, #12
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	9200      	str	r2, [sp, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	4632      	mov	r2, r6
 80052b2:	4629      	mov	r1, r5
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 fd8a 	bl	8005dce <xTaskCreate>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d001      	beq.n	80052c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052c4:	68fb      	ldr	r3, [r7, #12]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <osDelay+0x16>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	e000      	b.n	80052e6 <osDelay+0x18>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fea6 	bl	8006038 <vTaskDelay>
  
  return osOK;
 80052ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f103 0208 	add.w	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f04f 32ff 	mov.w	r2, #4294967295
 800530e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f103 0208 	add.w	r2, r3, #8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f103 0208 	add.w	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d103      	bne.n	80053b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e00c      	b.n	80053d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3308      	adds	r3, #8
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e002      	b.n	80053c6 <vListInsert+0x2e>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d2f6      	bcs.n	80053c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6892      	ldr	r2, [r2, #8]
 8005420:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6852      	ldr	r2, [r2, #4]
 800542a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d103      	bne.n	800543e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	e7fe      	b.n	8005486 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005488:	f001 fc30 	bl	8006cec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	441a      	add	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	3b01      	subs	r3, #1
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22ff      	movs	r2, #255	; 0xff
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	22ff      	movs	r2, #255	; 0xff
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d114      	bne.n	8005508 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01a      	beq.n	800551c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3310      	adds	r3, #16
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f816 	bl	800651c <xTaskRemoveFromEventList>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <xQueueGenericReset+0xcc>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e009      	b.n	800551c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3310      	adds	r3, #16
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fef2 	bl	80052f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff feed 	bl	80052f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800551c:	f001 fc14 	bl	8006d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005520:	2301      	movs	r3, #1
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <xQueueGenericCreate+0x28>
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e7fe      	b.n	8005556 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	e004      	b.n	800556e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3348      	adds	r3, #72	; 0x48
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fcd4 	bl	8006f20 <pvPortMalloc>
 8005578:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3348      	adds	r3, #72	; 0x48
 8005588:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005592:	79fa      	ldrb	r2, [r7, #7]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f805 	bl	80055ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a4:	69bb      	ldr	r3, [r7, #24]
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055dc:	2101      	movs	r1, #1
 80055de:	69b8      	ldr	r0, [r7, #24]
 80055e0:	f7ff ff3e 	bl	8005460 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055fa:	2300      	movs	r3, #0
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <xQueueGenericSend+0x30>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
 800561a:	e7fe      	b.n	800561a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <xQueueGenericSend+0x3e>
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <xQueueGenericSend+0x42>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueGenericSend+0x44>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <xQueueGenericSend+0x5c>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
 8005646:	e7fe      	b.n	8005646 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x6a>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <xQueueGenericSend+0x6e>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericSend+0x70>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <xQueueGenericSend+0x88>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	e7fe      	b.n	8005672 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005674:	f001 f908 	bl	8006888 <xTaskGetSchedulerState>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <xQueueGenericSend+0x98>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <xQueueGenericSend+0x9c>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <xQueueGenericSend+0x9e>
 8005688:	2300      	movs	r3, #0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <xQueueGenericSend+0xb6>
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056a2:	f001 fb23 	bl	8006cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <xQueueGenericSend+0xcc>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d129      	bne.n	800570c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056be:	f000 fa1c 	bl	8005afa <prvCopyDataToQueue>
 80056c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	3324      	adds	r3, #36	; 0x24
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 ff23 	bl	800651c <xTaskRemoveFromEventList>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d013      	beq.n	8005704 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056dc:	4b3f      	ldr	r3, [pc, #252]	; (80057dc <xQueueGenericSend+0x1f0>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	e00a      	b.n	8005704 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056f4:	4b39      	ldr	r3, [pc, #228]	; (80057dc <xQueueGenericSend+0x1f0>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005704:	f001 fb20 	bl	8006d48 <vPortExitCritical>
				return pdPASS;
 8005708:	2301      	movs	r3, #1
 800570a:	e063      	b.n	80057d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005712:	f001 fb19 	bl	8006d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005716:	2300      	movs	r3, #0
 8005718:	e05c      	b.n	80057d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	4618      	mov	r0, r3
 8005726:	f000 ff5b 	bl	80065e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800572a:	2301      	movs	r3, #1
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800572e:	f001 fb0b 	bl	8006d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005732:	f000 fd13 	bl	800615c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005736:	f001 fad9 	bl	8006cec <vPortEnterCritical>
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005740:	b25b      	sxtb	r3, r3
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d103      	bne.n	8005750 <xQueueGenericSend+0x164>
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005756:	b25b      	sxtb	r3, r3
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d103      	bne.n	8005766 <xQueueGenericSend+0x17a>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005766:	f001 faef 	bl	8006d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576a:	1d3a      	adds	r2, r7, #4
 800576c:	f107 0314 	add.w	r3, r7, #20
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff4a 	bl	800660c <xTaskCheckForTimeOut>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d124      	bne.n	80057c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800577e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005780:	f000 fab3 	bl	8005cea <prvIsQueueFull>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d018      	beq.n	80057bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	3310      	adds	r3, #16
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fe9e 	bl	80064d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579a:	f000 fa3e 	bl	8005c1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800579e:	f000 fceb 	bl	8006178 <xTaskResumeAll>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f47f af7c 	bne.w	80056a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <xQueueGenericSend+0x1f0>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	e772      	b.n	80056a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057be:	f000 fa2c 	bl	8005c1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057c2:	f000 fcd9 	bl	8006178 <xTaskResumeAll>
 80057c6:	e76c      	b.n	80056a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ca:	f000 fa26 	bl	8005c1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057ce:	f000 fcd3 	bl	8006178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3738      	adds	r7, #56	; 0x38
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <xQueueGenericSendFromISR+0x2c>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	e7fe      	b.n	800580a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueGenericSendFromISR+0x3a>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <xQueueGenericSendFromISR+0x3e>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericSendFromISR+0x40>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <xQueueGenericSendFromISR+0x58>
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	e7fe      	b.n	8005836 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d103      	bne.n	8005846 <xQueueGenericSendFromISR+0x66>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <xQueueGenericSendFromISR+0x6a>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <xQueueGenericSendFromISR+0x6c>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <xQueueGenericSendFromISR+0x84>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e7fe      	b.n	8005862 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005864:	f001 fb1e 	bl	8006ea4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005868:	f3ef 8211 	mrs	r2, BASEPRI
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	61ba      	str	r2, [r7, #24]
 800587e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005880:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	429a      	cmp	r2, r3
 800588e:	d302      	bcc.n	8005896 <xQueueGenericSendFromISR+0xb6>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d12c      	bne.n	80058f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a6:	f000 f928 	bl	8005afa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d112      	bne.n	80058da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d016      	beq.n	80058ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	3324      	adds	r3, #36	; 0x24
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fe2b 	bl	800651c <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e007      	b.n	80058ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058de:	3301      	adds	r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	b25a      	sxtb	r2, r3
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058ea:	2301      	movs	r3, #1
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058ee:	e001      	b.n	80058f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	637b      	str	r3, [r7, #52]	; 0x34
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005900:	4618      	mov	r0, r3
 8005902:	3738      	adds	r7, #56	; 0x38
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <xQueueReceive+0x2e>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	e7fe      	b.n	8005934 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <xQueueReceive+0x3c>
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <xQueueReceive+0x40>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <xQueueReceive+0x42>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <xQueueReceive+0x5a>
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e7fe      	b.n	8005960 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005962:	f000 ff91 	bl	8006888 <xTaskGetSchedulerState>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <xQueueReceive+0x6a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <xQueueReceive+0x6e>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <xQueueReceive+0x70>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xQueueReceive+0x88>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e7fe      	b.n	800598e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005990:	f001 f9ac 	bl	8006cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01f      	beq.n	80059e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a4:	f000 f913 	bl	8005bce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	1e5a      	subs	r2, r3, #1
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00f      	beq.n	80059d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	3310      	adds	r3, #16
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fdad 	bl	800651c <xTaskRemoveFromEventList>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059c8:	4b3c      	ldr	r3, [pc, #240]	; (8005abc <xQueueReceive+0x1b4>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059d8:	f001 f9b6 	bl	8006d48 <vPortExitCritical>
				return pdPASS;
 80059dc:	2301      	movs	r3, #1
 80059de:	e069      	b.n	8005ab4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059e6:	f001 f9af 	bl	8006d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e062      	b.n	8005ab4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059f4:	f107 0310 	add.w	r3, r7, #16
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fdf1 	bl	80065e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059fe:	2301      	movs	r3, #1
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a02:	f001 f9a1 	bl	8006d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a06:	f000 fba9 	bl	800615c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a0a:	f001 f96f 	bl	8006cec <vPortEnterCritical>
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d103      	bne.n	8005a24 <xQueueReceive+0x11c>
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d103      	bne.n	8005a3a <xQueueReceive+0x132>
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a3a:	f001 f985 	bl	8006d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a3e:	1d3a      	adds	r2, r7, #4
 8005a40:	f107 0310 	add.w	r3, r7, #16
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fde0 	bl	800660c <xTaskCheckForTimeOut>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d123      	bne.n	8005a9a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a54:	f000 f933 	bl	8005cbe <prvIsQueueEmpty>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d017      	beq.n	8005a8e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	3324      	adds	r3, #36	; 0x24
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fd34 	bl	80064d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6e:	f000 f8d4 	bl	8005c1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a72:	f000 fb81 	bl	8006178 <xTaskResumeAll>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d189      	bne.n	8005990 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <xQueueReceive+0x1b4>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	e780      	b.n	8005990 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a90:	f000 f8c3 	bl	8005c1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a94:	f000 fb70 	bl	8006178 <xTaskResumeAll>
 8005a98:	e77a      	b.n	8005990 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9c:	f000 f8bd 	bl	8005c1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aa0:	f000 fb6a 	bl	8006178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa6:	f000 f90a 	bl	8005cbe <prvIsQueueEmpty>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f43f af6f 	beq.w	8005990 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ab2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3730      	adds	r7, #48	; 0x30
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <uxQueueMessagesWaiting+0x22>
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	e7fe      	b.n	8005ae0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005ae2:	f001 f903 	bl	8006cec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005aec:	f001 f92c 	bl	8006d48 <vPortExitCritical>

	return uxReturn;
 8005af0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d14d      	bne.n	8005bbc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fecd 	bl	80068c4 <xTaskPriorityDisinherit>
 8005b2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
 8005b32:	e043      	b.n	8005bbc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d119      	bne.n	8005b6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6858      	ldr	r0, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	461a      	mov	r2, r3
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	f001 fbe5 	bl	8007314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d32b      	bcc.n	8005bbc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	e026      	b.n	8005bbc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68d8      	ldr	r0, [r3, #12]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	461a      	mov	r2, r3
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	f001 fbcb 	bl	8007314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	425b      	negs	r3, r3
 8005b88:	441a      	add	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d207      	bcs.n	8005baa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	425b      	negs	r3, r3
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d105      	bne.n	8005bbc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bc4:	697b      	ldr	r3, [r7, #20]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d018      	beq.n	8005c12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	441a      	add	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d303      	bcc.n	8005c02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68d9      	ldr	r1, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6838      	ldr	r0, [r7, #0]
 8005c0e:	f001 fb81 	bl	8007314 <memcpy>
	}
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c22:	f001 f863 	bl	8006cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c2e:	e011      	b.n	8005c54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fc6d 	bl	800651c <xTaskRemoveFromEventList>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c48:	f000 fd40 	bl	80066cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dce9      	bgt.n	8005c30 <prvUnlockQueue+0x16>
 8005c5c:	e000      	b.n	8005c60 <prvUnlockQueue+0x46>
					break;
 8005c5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	22ff      	movs	r2, #255	; 0xff
 8005c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c68:	f001 f86e 	bl	8006d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c6c:	f001 f83e 	bl	8006cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c78:	e011      	b.n	8005c9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d012      	beq.n	8005ca8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3310      	adds	r3, #16
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fc48 	bl	800651c <xTaskRemoveFromEventList>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c92:	f000 fd1b 	bl	80066cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dce9      	bgt.n	8005c7a <prvUnlockQueue+0x60>
 8005ca6:	e000      	b.n	8005caa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ca8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	22ff      	movs	r2, #255	; 0xff
 8005cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cb2:	f001 f849 	bl	8006d48 <vPortExitCritical>
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc6:	f001 f811 	bl	8006cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e001      	b.n	8005cdc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cdc:	f001 f834 	bl	8006d48 <vPortExitCritical>

	return xReturn;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cf2:	f000 fffb 	bl	8006cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d102      	bne.n	8005d08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e001      	b.n	8005d0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d0c:	f001 f81c 	bl	8006d48 <vPortExitCritical>

	return xReturn;
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b08e      	sub	sp, #56	; 0x38
 8005d1e:	af04      	add	r7, sp, #16
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <xTaskCreateStatic+0x28>
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	623b      	str	r3, [r7, #32]
 8005d40:	e7fe      	b.n	8005d40 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <xTaskCreateStatic+0x42>
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e7fe      	b.n	8005d5a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d5c:	2354      	movs	r3, #84	; 0x54
 8005d5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b54      	cmp	r3, #84	; 0x54
 8005d64:	d009      	beq.n	8005d7a <xTaskCreateStatic+0x60>
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	e7fe      	b.n	8005d78 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01e      	beq.n	8005dc0 <xTaskCreateStatic+0xa6>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	f107 0314 	add.w	r3, r7, #20
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f850 	bl	8005e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dba:	f000 f8d3 	bl	8005f64 <prvAddNewTaskToReadyList>
 8005dbe:	e001      	b.n	8005dc4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dc4:	697b      	ldr	r3, [r7, #20]
	}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3728      	adds	r7, #40	; 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b08c      	sub	sp, #48	; 0x30
 8005dd2:	af04      	add	r7, sp, #16
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f89c 	bl	8006f20 <pvPortMalloc>
 8005de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00e      	beq.n	8005e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005df0:	2054      	movs	r0, #84	; 0x54
 8005df2:	f001 f895 	bl	8006f20 <pvPortMalloc>
 8005df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
 8005e04:	e005      	b.n	8005e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	f001 f94c 	bl	80070a4 <vPortFree>
 8005e0c:	e001      	b.n	8005e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d017      	beq.n	8005e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	2300      	movs	r3, #0
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	9302      	str	r3, [sp, #8]
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f80e 	bl	8005e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3c:	69f8      	ldr	r0, [r7, #28]
 8005e3e:	f000 f891 	bl	8005f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e42:	2301      	movs	r3, #1
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e002      	b.n	8005e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	3b01      	subs	r3, #1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <prvInitialiseNewTask+0x46>
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e7fe      	b.n	8005e9c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01f      	beq.n	8005ee4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	e012      	b.n	8005ed0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	7819      	ldrb	r1, [r3, #0]
 8005eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3334      	adds	r3, #52	; 0x34
 8005eba:	460a      	mov	r2, r1
 8005ebc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b0f      	cmp	r3, #15
 8005ed4:	d9e9      	bls.n	8005eaa <prvInitialiseNewTask+0x52>
 8005ed6:	e000      	b.n	8005eda <prvInitialiseNewTask+0x82>
			{
				break;
 8005ed8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ee2:	e003      	b.n	8005eec <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2b06      	cmp	r3, #6
 8005ef0:	d901      	bls.n	8005ef6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ef2:	2306      	movs	r3, #6
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f00:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2200      	movs	r2, #0
 8005f06:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fa12 	bl	8005336 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	3318      	adds	r3, #24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fa0d 	bl	8005336 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	f1c3 0207 	rsb	r2, r3, #7
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2200      	movs	r2, #0
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	69b8      	ldr	r0, [r7, #24]
 8005f46:	f000 fda7 	bl	8006a98 <pxPortInitialiseStack>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f5c:	bf00      	nop
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f6c:	f000 febe 	bl	8006cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f70:	4b2a      	ldr	r3, [pc, #168]	; (800601c <prvAddNewTaskToReadyList+0xb8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a29      	ldr	r2, [pc, #164]	; (800601c <prvAddNewTaskToReadyList+0xb8>)
 8005f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f7a:	4b29      	ldr	r3, [pc, #164]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f82:	4a27      	ldr	r2, [pc, #156]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f88:	4b24      	ldr	r3, [pc, #144]	; (800601c <prvAddNewTaskToReadyList+0xb8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d110      	bne.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f90:	f000 fbc0 	bl	8006714 <prvInitialiseTaskLists>
 8005f94:	e00d      	b.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f96:	4b23      	ldr	r3, [pc, #140]	; (8006024 <prvAddNewTaskToReadyList+0xc0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d802      	bhi.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005fba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	4a18      	ldr	r2, [pc, #96]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <prvAddNewTaskToReadyList+0xcc>)
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7ff f9b3 	bl	8005350 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fea:	f000 fead 	bl	8006d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fee:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <prvAddNewTaskToReadyList+0xc0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d207      	bcs.n	8006014 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <prvAddNewTaskToReadyList+0xd0>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000380 	.word	0x20000380
 8006020:	20000280 	.word	0x20000280
 8006024:	2000038c 	.word	0x2000038c
 8006028:	2000039c 	.word	0x2000039c
 800602c:	20000388 	.word	0x20000388
 8006030:	20000284 	.word	0x20000284
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <vTaskDelay+0x60>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <vTaskDelay+0x2e>
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	e7fe      	b.n	8006064 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006066:	f000 f879 	bl	800615c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800606a:	2100      	movs	r1, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fcad 	bl	80069cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006072:	f000 f881 	bl	8006178 <xTaskResumeAll>
 8006076:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <vTaskDelay+0x64>)
 8006080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	200003a8 	.word	0x200003a8
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ae:	463a      	mov	r2, r7
 80060b0:	1d39      	adds	r1, r7, #4
 80060b2:	f107 0308 	add.w	r3, r7, #8
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fa face 	bl	8000658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	9202      	str	r2, [sp, #8]
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	2300      	movs	r3, #0
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2300      	movs	r3, #0
 80060cc:	460a      	mov	r2, r1
 80060ce:	491d      	ldr	r1, [pc, #116]	; (8006144 <vTaskStartScheduler+0xa4>)
 80060d0:	481d      	ldr	r0, [pc, #116]	; (8006148 <vTaskStartScheduler+0xa8>)
 80060d2:	f7ff fe22 	bl	8005d1a <xTaskCreateStatic>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <vTaskStartScheduler+0xac>)
 80060da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <vTaskStartScheduler+0xac>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060e4:	2301      	movs	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e001      	b.n	80060ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d115      	bne.n	8006120 <vTaskStartScheduler+0x80>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <vTaskStartScheduler+0xb0>)
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <vTaskStartScheduler+0xb4>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <vTaskStartScheduler+0xb8>)
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800611a:	f000 fd49 	bl	8006bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800611e:	e00d      	b.n	800613c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d109      	bne.n	800613c <vTaskStartScheduler+0x9c>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e7fe      	b.n	800613a <vTaskStartScheduler+0x9a>
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	080073c8 	.word	0x080073c8
 8006148:	080066e5 	.word	0x080066e5
 800614c:	200003a4 	.word	0x200003a4
 8006150:	200003a0 	.word	0x200003a0
 8006154:	2000038c 	.word	0x2000038c
 8006158:	20000384 	.word	0x20000384

0800615c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <vTaskSuspendAll+0x18>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	4a03      	ldr	r2, [pc, #12]	; (8006174 <vTaskSuspendAll+0x18>)
 8006168:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	200003a8 	.word	0x200003a8

08006178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006186:	4b41      	ldr	r3, [pc, #260]	; (800628c <xTaskResumeAll+0x114>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <xTaskResumeAll+0x2a>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	e7fe      	b.n	80061a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061a2:	f000 fda3 	bl	8006cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061a6:	4b39      	ldr	r3, [pc, #228]	; (800628c <xTaskResumeAll+0x114>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4a37      	ldr	r2, [pc, #220]	; (800628c <xTaskResumeAll+0x114>)
 80061ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b0:	4b36      	ldr	r3, [pc, #216]	; (800628c <xTaskResumeAll+0x114>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d161      	bne.n	800627c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061b8:	4b35      	ldr	r3, [pc, #212]	; (8006290 <xTaskResumeAll+0x118>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d05d      	beq.n	800627c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061c0:	e02e      	b.n	8006220 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c2:	4b34      	ldr	r3, [pc, #208]	; (8006294 <xTaskResumeAll+0x11c>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3318      	adds	r3, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff f91b 	bl	800540a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f916 	bl	800540a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	2201      	movs	r2, #1
 80061e4:	409a      	lsls	r2, r3
 80061e6:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <xTaskResumeAll+0x120>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <xTaskResumeAll+0x120>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <xTaskResumeAll+0x124>)
 80061fe:	441a      	add	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f7ff f8a2 	bl	8005350 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <xTaskResumeAll+0x128>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800621a:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <xTaskResumeAll+0x12c>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006220:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <xTaskResumeAll+0x11c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1cc      	bne.n	80061c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800622e:	f000 fb0b 	bl	8006848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <xTaskResumeAll+0x130>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d010      	beq.n	8006260 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800623e:	f000 f837 	bl	80062b0 <xTaskIncrementTick>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006248:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <xTaskResumeAll+0x12c>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3b01      	subs	r3, #1
 8006252:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f1      	bne.n	800623e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <xTaskResumeAll+0x130>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <xTaskResumeAll+0x12c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d009      	beq.n	800627c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006268:	2301      	movs	r3, #1
 800626a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <xTaskResumeAll+0x134>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800627c:	f000 fd64 	bl	8006d48 <vPortExitCritical>

	return xAlreadyYielded;
 8006280:	68bb      	ldr	r3, [r7, #8]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	200003a8 	.word	0x200003a8
 8006290:	20000380 	.word	0x20000380
 8006294:	20000340 	.word	0x20000340
 8006298:	20000388 	.word	0x20000388
 800629c:	20000284 	.word	0x20000284
 80062a0:	20000280 	.word	0x20000280
 80062a4:	20000394 	.word	0x20000394
 80062a8:	20000390 	.word	0x20000390
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ba:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <xTaskIncrementTick+0x144>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 8087 	bne.w	80063d2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062c4:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <xTaskIncrementTick+0x148>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062cc:	4a4a      	ldr	r2, [pc, #296]	; (80063f8 <xTaskIncrementTick+0x148>)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11f      	bne.n	8006318 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80062d8:	4b48      	ldr	r3, [pc, #288]	; (80063fc <xTaskIncrementTick+0x14c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <xTaskIncrementTick+0x46>
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	e7fe      	b.n	80062f4 <xTaskIncrementTick+0x44>
 80062f6:	4b41      	ldr	r3, [pc, #260]	; (80063fc <xTaskIncrementTick+0x14c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	4b40      	ldr	r3, [pc, #256]	; (8006400 <xTaskIncrementTick+0x150>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a3e      	ldr	r2, [pc, #248]	; (80063fc <xTaskIncrementTick+0x14c>)
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4a3e      	ldr	r2, [pc, #248]	; (8006400 <xTaskIncrementTick+0x150>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b3e      	ldr	r3, [pc, #248]	; (8006404 <xTaskIncrementTick+0x154>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	4a3c      	ldr	r2, [pc, #240]	; (8006404 <xTaskIncrementTick+0x154>)
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	f000 fa98 	bl	8006848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006318:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <xTaskIncrementTick+0x158>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	d348      	bcc.n	80063b4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006322:	4b36      	ldr	r3, [pc, #216]	; (80063fc <xTaskIncrementTick+0x14c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <xTaskIncrementTick+0x158>)
 800632e:	f04f 32ff 	mov.w	r2, #4294967295
 8006332:	601a      	str	r2, [r3, #0]
					break;
 8006334:	e03e      	b.n	80063b4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	4b31      	ldr	r3, [pc, #196]	; (80063fc <xTaskIncrementTick+0x14c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	429a      	cmp	r2, r3
 800634c:	d203      	bcs.n	8006356 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800634e:	4a2e      	ldr	r2, [pc, #184]	; (8006408 <xTaskIncrementTick+0x158>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006354:	e02e      	b.n	80063b4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff f855 	bl	800540a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3318      	adds	r3, #24
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f84c 	bl	800540a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	2201      	movs	r2, #1
 8006378:	409a      	lsls	r2, r3
 800637a:	4b24      	ldr	r3, [pc, #144]	; (800640c <xTaskIncrementTick+0x15c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4313      	orrs	r3, r2
 8006380:	4a22      	ldr	r2, [pc, #136]	; (800640c <xTaskIncrementTick+0x15c>)
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4a1f      	ldr	r2, [pc, #124]	; (8006410 <xTaskIncrementTick+0x160>)
 8006392:	441a      	add	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7fe ffd8 	bl	8005350 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <xTaskIncrementTick+0x164>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d3b9      	bcc.n	8006322 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b2:	e7b6      	b.n	8006322 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063b4:	4b17      	ldr	r3, [pc, #92]	; (8006414 <xTaskIncrementTick+0x164>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ba:	4915      	ldr	r1, [pc, #84]	; (8006410 <xTaskIncrementTick+0x160>)
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d907      	bls.n	80063dc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e004      	b.n	80063dc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <xTaskIncrementTick+0x168>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	4a0f      	ldr	r2, [pc, #60]	; (8006418 <xTaskIncrementTick+0x168>)
 80063da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <xTaskIncrementTick+0x16c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063e8:	697b      	ldr	r3, [r7, #20]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200003a8 	.word	0x200003a8
 80063f8:	20000384 	.word	0x20000384
 80063fc:	20000338 	.word	0x20000338
 8006400:	2000033c 	.word	0x2000033c
 8006404:	20000398 	.word	0x20000398
 8006408:	200003a0 	.word	0x200003a0
 800640c:	20000388 	.word	0x20000388
 8006410:	20000284 	.word	0x20000284
 8006414:	20000280 	.word	0x20000280
 8006418:	20000390 	.word	0x20000390
 800641c:	20000394 	.word	0x20000394

08006420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006426:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <vTaskSwitchContext+0xa0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800642e:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <vTaskSwitchContext+0xa4>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006434:	e03e      	b.n	80064b4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006436:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <vTaskSwitchContext+0xa4>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643c:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <vTaskSwitchContext+0xa8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	fab3 f383 	clz	r3, r3
 8006448:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	f1c3 031f 	rsb	r3, r3, #31
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	491e      	ldr	r1, [pc, #120]	; (80064cc <vTaskSwitchContext+0xac>)
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	e7fe      	b.n	8006478 <vTaskSwitchContext+0x58>
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <vTaskSwitchContext+0xac>)
 8006486:	4413      	add	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3308      	adds	r3, #8
 800649c:	429a      	cmp	r2, r3
 800649e:	d104      	bne.n	80064aa <vTaskSwitchContext+0x8a>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <vTaskSwitchContext+0xb0>)
 80064b2:	6013      	str	r3, [r2, #0]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	200003a8 	.word	0x200003a8
 80064c4:	20000394 	.word	0x20000394
 80064c8:	20000388 	.word	0x20000388
 80064cc:	20000284 	.word	0x20000284
 80064d0:	20000280 	.word	0x20000280

080064d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <vTaskPlaceOnEventList+0x24>
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e7fe      	b.n	80064f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064f8:	4b07      	ldr	r3, [pc, #28]	; (8006518 <vTaskPlaceOnEventList+0x44>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3318      	adds	r3, #24
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fe ff49 	bl	8005398 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006506:	2101      	movs	r1, #1
 8006508:	6838      	ldr	r0, [r7, #0]
 800650a:	f000 fa5f 	bl	80069cc <prvAddCurrentTaskToDelayedList>
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000280 	.word	0x20000280

0800651c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <xTaskRemoveFromEventList+0x2a>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e7fe      	b.n	8006544 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3318      	adds	r3, #24
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe ff5d 	bl	800540a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <xTaskRemoveFromEventList+0xac>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11c      	bne.n	8006592 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe ff54 	bl	800540a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	2201      	movs	r2, #1
 8006568:	409a      	lsls	r2, r3
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <xTaskRemoveFromEventList+0xb0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4313      	orrs	r3, r2
 8006570:	4a16      	ldr	r2, [pc, #88]	; (80065cc <xTaskRemoveFromEventList+0xb0>)
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <xTaskRemoveFromEventList+0xb4>)
 8006582:	441a      	add	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f7fe fee0 	bl	8005350 <vListInsertEnd>
 8006590:	e005      	b.n	800659e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3318      	adds	r3, #24
 8006596:	4619      	mov	r1, r3
 8006598:	480e      	ldr	r0, [pc, #56]	; (80065d4 <xTaskRemoveFromEventList+0xb8>)
 800659a:	f7fe fed9 	bl	8005350 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <xTaskRemoveFromEventList+0xbc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d905      	bls.n	80065b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <xTaskRemoveFromEventList+0xc0>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e001      	b.n	80065bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065bc:	697b      	ldr	r3, [r7, #20]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200003a8 	.word	0x200003a8
 80065cc:	20000388 	.word	0x20000388
 80065d0:	20000284 	.word	0x20000284
 80065d4:	20000340 	.word	0x20000340
 80065d8:	20000280 	.word	0x20000280
 80065dc:	20000394 	.word	0x20000394

080065e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <vTaskInternalSetTimeOutState+0x24>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <vTaskInternalSetTimeOutState+0x28>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	20000398 	.word	0x20000398
 8006608:	20000384 	.word	0x20000384

0800660c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <xTaskCheckForTimeOut+0x24>
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	e7fe      	b.n	800662e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <xTaskCheckForTimeOut+0x3e>
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e7fe      	b.n	8006648 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800664a:	f000 fb4f 	bl	8006cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800664e:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <xTaskCheckForTimeOut+0xb8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d102      	bne.n	800666e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e023      	b.n	80066b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <xTaskCheckForTimeOut+0xbc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d007      	beq.n	800668a <xTaskCheckForTimeOut+0x7e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e015      	b.n	80066b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	d20b      	bcs.n	80066ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff9d 	bl	80065e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	e004      	b.n	80066b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066b2:	2301      	movs	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066b6:	f000 fb47 	bl	8006d48 <vPortExitCritical>

	return xReturn;
 80066ba:	69fb      	ldr	r3, [r7, #28]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000384 	.word	0x20000384
 80066c8:	20000398 	.word	0x20000398

080066cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <vTaskMissedYield+0x14>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20000394 	.word	0x20000394

080066e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066ec:	f000 f852 	bl	8006794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <prvIdleTask+0x28>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d9f9      	bls.n	80066ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <prvIdleTask+0x2c>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006708:	e7f0      	b.n	80066ec <prvIdleTask+0x8>
 800670a:	bf00      	nop
 800670c:	20000284 	.word	0x20000284
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671a:	2300      	movs	r3, #0
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	e00c      	b.n	800673a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <prvInitialiseTaskLists+0x60>)
 800672c:	4413      	add	r3, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fde1 	bl	80052f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3301      	adds	r3, #1
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b06      	cmp	r3, #6
 800673e:	d9ef      	bls.n	8006720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006740:	480d      	ldr	r0, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006742:	f7fe fdd8 	bl	80052f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006746:	480d      	ldr	r0, [pc, #52]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006748:	f7fe fdd5 	bl	80052f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800674c:	480c      	ldr	r0, [pc, #48]	; (8006780 <prvInitialiseTaskLists+0x6c>)
 800674e:	f7fe fdd2 	bl	80052f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006752:	480c      	ldr	r0, [pc, #48]	; (8006784 <prvInitialiseTaskLists+0x70>)
 8006754:	f7fe fdcf 	bl	80052f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006758:	480b      	ldr	r0, [pc, #44]	; (8006788 <prvInitialiseTaskLists+0x74>)
 800675a:	f7fe fdcc 	bl	80052f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <prvInitialiseTaskLists+0x78>)
 8006760:	4a05      	ldr	r2, [pc, #20]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvInitialiseTaskLists+0x7c>)
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000284 	.word	0x20000284
 8006778:	20000310 	.word	0x20000310
 800677c:	20000324 	.word	0x20000324
 8006780:	20000340 	.word	0x20000340
 8006784:	20000354 	.word	0x20000354
 8006788:	2000036c 	.word	0x2000036c
 800678c:	20000338 	.word	0x20000338
 8006790:	2000033c 	.word	0x2000033c

08006794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800679a:	e019      	b.n	80067d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800679c:	f000 faa6 	bl	8006cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <prvCheckTasksWaitingTermination+0x4c>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fe2c 	bl	800540a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067b2:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <prvCheckTasksWaitingTermination+0x50>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <prvCheckTasksWaitingTermination+0x50>)
 80067ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	4a09      	ldr	r2, [pc, #36]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067c6:	f000 fabf 	bl	8006d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f80e 	bl	80067ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e1      	bne.n	800679c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000354 	.word	0x20000354
 80067e4:	20000380 	.word	0x20000380
 80067e8:	20000368 	.word	0x20000368

080067ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d108      	bne.n	8006810 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fc4e 	bl	80070a4 <vPortFree>
				vPortFree( pxTCB );
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc4b 	bl	80070a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800680e:	e017      	b.n	8006840 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006816:	2b01      	cmp	r3, #1
 8006818:	d103      	bne.n	8006822 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fc42 	bl	80070a4 <vPortFree>
	}
 8006820:	e00e      	b.n	8006840 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006828:	2b02      	cmp	r3, #2
 800682a:	d009      	beq.n	8006840 <prvDeleteTCB+0x54>
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e7fe      	b.n	800683e <prvDeleteTCB+0x52>
	}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <prvResetNextTaskUnblockTime+0x38>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006858:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <prvResetNextTaskUnblockTime+0x3c>)
 800685a:	f04f 32ff 	mov.w	r2, #4294967295
 800685e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006860:	e008      	b.n	8006874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <prvResetNextTaskUnblockTime+0x38>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4a04      	ldr	r2, [pc, #16]	; (8006884 <prvResetNextTaskUnblockTime+0x3c>)
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000338 	.word	0x20000338
 8006884:	200003a0 	.word	0x200003a0

08006888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <xTaskGetSchedulerState+0x34>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006896:	2301      	movs	r3, #1
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	e008      	b.n	80068ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <xTaskGetSchedulerState+0x38>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068a4:	2302      	movs	r3, #2
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e001      	b.n	80068ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068ae:	687b      	ldr	r3, [r7, #4]
	}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2000038c 	.word	0x2000038c
 80068c0:	200003a8 	.word	0x200003a8

080068c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d06c      	beq.n	80069b4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068da:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <xTaskPriorityDisinherit+0xfc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d009      	beq.n	80068f8 <xTaskPriorityDisinherit+0x34>
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e7fe      	b.n	80068f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <xTaskPriorityDisinherit+0x50>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	e7fe      	b.n	8006912 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006918:	1e5a      	subs	r2, r3, #1
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	429a      	cmp	r2, r3
 8006928:	d044      	beq.n	80069b4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692e:	2b00      	cmp	r3, #0
 8006930:	d140      	bne.n	80069b4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3304      	adds	r3, #4
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fd67 	bl	800540a <uxListRemove>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d115      	bne.n	800696e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006946:	491f      	ldr	r1, [pc, #124]	; (80069c4 <xTaskPriorityDisinherit+0x100>)
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xTaskPriorityDisinherit+0xaa>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	2201      	movs	r2, #1
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43da      	mvns	r2, r3
 8006964:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <xTaskPriorityDisinherit+0x104>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4013      	ands	r3, r2
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xTaskPriorityDisinherit+0x104>)
 800696c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f1c3 0207 	rsb	r2, r3, #7
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	2201      	movs	r2, #1
 8006988:	409a      	lsls	r2, r3
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <xTaskPriorityDisinherit+0x104>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	4a0d      	ldr	r2, [pc, #52]	; (80069c8 <xTaskPriorityDisinherit+0x104>)
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4a08      	ldr	r2, [pc, #32]	; (80069c4 <xTaskPriorityDisinherit+0x100>)
 80069a2:	441a      	add	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f7fe fcd0 	bl	8005350 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
	}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000280 	.word	0x20000280
 80069c4:	20000284 	.word	0x20000284
 80069c8:	20000388 	.word	0x20000388

080069cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069d6:	4b29      	ldr	r3, [pc, #164]	; (8006a7c <prvAddCurrentTaskToDelayedList+0xb0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069dc:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fd11 	bl	800540a <uxListRemove>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	43da      	mvns	r2, r3
 80069fc:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4013      	ands	r3, r2
 8006a02:	4a20      	ldr	r2, [pc, #128]	; (8006a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d10a      	bne.n	8006a24 <prvAddCurrentTaskToDelayedList+0x58>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	481a      	ldr	r0, [pc, #104]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a1e:	f7fe fc97 	bl	8005350 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a22:	e026      	b.n	8006a72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a2c:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d209      	bcs.n	8006a50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a3c:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fe fca5 	bl	8005398 <vListInsert>
}
 8006a4e:	e010      	b.n	8006a72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a50:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe fc9b 	bl	8005398 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a62:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d202      	bcs.n	8006a72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a6c:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6013      	str	r3, [r2, #0]
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000384 	.word	0x20000384
 8006a80:	20000280 	.word	0x20000280
 8006a84:	20000388 	.word	0x20000388
 8006a88:	2000036c 	.word	0x2000036c
 8006a8c:	2000033c 	.word	0x2000033c
 8006a90:	20000338 	.word	0x20000338
 8006a94:	200003a0 	.word	0x200003a0

08006a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0201 	bic.w	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ac8:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <pxPortInitialiseStack+0x64>)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3b14      	subs	r3, #20
 8006ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3b04      	subs	r3, #4
 8006ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f06f 0202 	mvn.w	r2, #2
 8006ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3b20      	subs	r3, #32
 8006aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	08006b01 	.word	0x08006b01

08006b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <prvTaskExitError+0x50>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d009      	beq.n	8006b28 <prvTaskExitError+0x28>
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e7fe      	b.n	8006b26 <prvTaskExitError+0x26>
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b3a:	bf00      	nop
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0fc      	beq.n	8006b3c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	2000000c 	.word	0x2000000c
	...

08006b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	4770      	bx	lr
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst2>:
 8006b80:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b88:	4808      	ldr	r0, [pc, #32]	; (8006bac <prvPortStartFirstTask+0x24>)
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	6800      	ldr	r0, [r0, #0]
 8006b8e:	f380 8808 	msr	MSP, r0
 8006b92:	f04f 0000 	mov.w	r0, #0
 8006b96:	f380 8814 	msr	CONTROL, r0
 8006b9a:	b662      	cpsie	i
 8006b9c:	b661      	cpsie	f
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	df00      	svc	0
 8006ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006baa:	bf00      	nop
 8006bac:	e000ed08 	.word	0xe000ed08

08006bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bb6:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <xPortStartScheduler+0x118>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <xPortStartScheduler+0x11c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <xPortStartScheduler+0x24>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e7fe      	b.n	8006bd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bd4:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <xPortStartScheduler+0x118>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a3d      	ldr	r2, [pc, #244]	; (8006cd0 <xPortStartScheduler+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d109      	bne.n	8006bf2 <xPortStartScheduler+0x42>
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e7fe      	b.n	8006bf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <xPortStartScheduler+0x124>)
 8006bf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	22ff      	movs	r2, #255	; 0xff
 8006c02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <xPortStartScheduler+0x128>)
 8006c18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c1a:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c1c:	2207      	movs	r2, #7
 8006c1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c20:	e009      	b.n	8006c36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d0ef      	beq.n	8006c22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c42:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f1c3 0307 	rsb	r3, r3, #7
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d009      	beq.n	8006c62 <xPortStartScheduler+0xb2>
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	e7fe      	b.n	8006c60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c62:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	4a1c      	ldr	r2, [pc, #112]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c80:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c98:	f000 f8d6 	bl	8006e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ca2:	f000 f8f5 	bl	8006e90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cb2:	f7ff ff69 	bl	8006b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cb6:	f7ff fbb3 	bl	8006420 <vTaskSwitchContext>
	prvTaskExitError();
 8006cba:	f7ff ff21 	bl	8006b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed00 	.word	0xe000ed00
 8006ccc:	410fc271 	.word	0x410fc271
 8006cd0:	410fc270 	.word	0x410fc270
 8006cd4:	e000e400 	.word	0xe000e400
 8006cd8:	200003ac 	.word	0x200003ac
 8006cdc:	200003b0 	.word	0x200003b0
 8006ce0:	e000ed20 	.word	0xe000ed20
 8006ce4:	2000000c 	.word	0x2000000c
 8006ce8:	e000ef34 	.word	0xe000ef34

08006cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a0d      	ldr	r2, [pc, #52]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d10e      	bne.n	8006d34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <vPortEnterCritical+0x58>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <vPortEnterCritical+0x48>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	e7fe      	b.n	8006d32 <vPortEnterCritical+0x46>
	}
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	2000000c 	.word	0x2000000c
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <vPortExitCritical+0x22>
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e7fe      	b.n	8006d68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <vPortExitCritical+0x3e>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
	...

08006da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006da0:	f3ef 8009 	mrs	r0, PSP
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <pxCurrentTCBConst>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	f01e 0f10 	tst.w	lr, #16
 8006db0:	bf08      	it	eq
 8006db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dba:	6010      	str	r0, [r2, #0]
 8006dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dc4:	f380 8811 	msr	BASEPRI, r0
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f7ff fb26 	bl	8006420 <vTaskSwitchContext>
 8006dd4:	f04f 0000 	mov.w	r0, #0
 8006dd8:	f380 8811 	msr	BASEPRI, r0
 8006ddc:	bc09      	pop	{r0, r3}
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	6808      	ldr	r0, [r1, #0]
 8006de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de6:	f01e 0f10 	tst.w	lr, #16
 8006dea:	bf08      	it	eq
 8006dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006df0:	f380 8809 	msr	PSP, r0
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w

08006e00 <pxCurrentTCBConst>:
 8006e00:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop

08006e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e20:	f7ff fa46 	bl	80062b0 <xTaskIncrementTick>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <SysTick_Handler+0x3c>)
 8006e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <vPortSetupTimerInterrupt+0x34>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e52:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <vPortSetupTimerInterrupt+0x38>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <vPortSetupTimerInterrupt+0x3c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <vPortSetupTimerInterrupt+0x40>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	099b      	lsrs	r3, r3, #6
 8006e64:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <vPortSetupTimerInterrupt+0x44>)
 8006e66:	3b01      	subs	r3, #1
 8006e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e6a:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <vPortSetupTimerInterrupt+0x34>)
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000e010 	.word	0xe000e010
 8006e80:	e000e018 	.word	0xe000e018
 8006e84:	20000000 	.word	0x20000000
 8006e88:	10624dd3 	.word	0x10624dd3
 8006e8c:	e000e014 	.word	0xe000e014

08006e90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ea0 <vPortEnableVFP+0x10>
 8006e94:	6801      	ldr	r1, [r0, #0]
 8006e96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e9a:	6001      	str	r1, [r0, #0]
 8006e9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e9e:	bf00      	nop
 8006ea0:	e000ed88 	.word	0xe000ed88

08006ea4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006eaa:	f3ef 8305 	mrs	r3, IPSR
 8006eae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d913      	bls.n	8006ede <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eb6:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <vPortValidateInterruptPriority+0x6c>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ec0:	4b14      	ldr	r3, [pc, #80]	; (8006f14 <vPortValidateInterruptPriority+0x70>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	7afa      	ldrb	r2, [r7, #11]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d209      	bcs.n	8006ede <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e7fe      	b.n	8006edc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <vPortValidateInterruptPriority+0x74>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <vPortValidateInterruptPriority+0x78>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d909      	bls.n	8006f02 <vPortValidateInterruptPriority+0x5e>
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	e7fe      	b.n	8006f00 <vPortValidateInterruptPriority+0x5c>
	}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	e000e3f0 	.word	0xe000e3f0
 8006f14:	200003ac 	.word	0x200003ac
 8006f18:	e000ed0c 	.word	0xe000ed0c
 8006f1c:	200003b0 	.word	0x200003b0

08006f20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	; 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f2c:	f7ff f916 	bl	800615c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f30:	4b57      	ldr	r3, [pc, #348]	; (8007090 <pvPortMalloc+0x170>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f38:	f000 f90c 	bl	8007154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f3c:	4b55      	ldr	r3, [pc, #340]	; (8007094 <pvPortMalloc+0x174>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f040 808c 	bne.w	8007062 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01c      	beq.n	8006f8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006f50:	2208      	movs	r2, #8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4413      	add	r3, r2
 8006f56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f023 0307 	bic.w	r3, r3, #7
 8006f68:	3308      	adds	r3, #8
 8006f6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <pvPortMalloc+0x6a>
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e7fe      	b.n	8006f88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d068      	beq.n	8007062 <pvPortMalloc+0x142>
 8006f90:	4b41      	ldr	r3, [pc, #260]	; (8007098 <pvPortMalloc+0x178>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d863      	bhi.n	8007062 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f9a:	4b40      	ldr	r3, [pc, #256]	; (800709c <pvPortMalloc+0x17c>)
 8006f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f9e:	4b3f      	ldr	r3, [pc, #252]	; (800709c <pvPortMalloc+0x17c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fa4:	e004      	b.n	8006fb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d903      	bls.n	8006fc2 <pvPortMalloc+0xa2>
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f1      	bne.n	8006fa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fc2:	4b33      	ldr	r3, [pc, #204]	; (8007090 <pvPortMalloc+0x170>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d04a      	beq.n	8007062 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	4413      	add	r3, r2
 8006fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1ad2      	subs	r2, r2, r3
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d91e      	bls.n	800702c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <pvPortMalloc+0xf4>
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e7fe      	b.n	8007012 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	1ad2      	subs	r2, r2, r3
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007026:	69b8      	ldr	r0, [r7, #24]
 8007028:	f000 f8f6 	bl	8007218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800702c:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <pvPortMalloc+0x178>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	4a18      	ldr	r2, [pc, #96]	; (8007098 <pvPortMalloc+0x178>)
 8007038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800703a:	4b17      	ldr	r3, [pc, #92]	; (8007098 <pvPortMalloc+0x178>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b18      	ldr	r3, [pc, #96]	; (80070a0 <pvPortMalloc+0x180>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d203      	bcs.n	800704e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <pvPortMalloc+0x178>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <pvPortMalloc+0x180>)
 800704c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <pvPortMalloc+0x174>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	431a      	orrs	r2, r3
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007062:	f7ff f889 	bl	8006178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <pvPortMalloc+0x164>
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	e7fe      	b.n	8007082 <pvPortMalloc+0x162>
	return pvReturn;
 8007084:	69fb      	ldr	r3, [r7, #28]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3728      	adds	r7, #40	; 0x28
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20003fbc 	.word	0x20003fbc
 8007094:	20003fc8 	.word	0x20003fc8
 8007098:	20003fc0 	.word	0x20003fc0
 800709c:	20003fb4 	.word	0x20003fb4
 80070a0:	20003fc4 	.word	0x20003fc4

080070a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d046      	beq.n	8007144 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070b6:	2308      	movs	r3, #8
 80070b8:	425b      	negs	r3, r3
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	4b20      	ldr	r3, [pc, #128]	; (800714c <vPortFree+0xa8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <vPortFree+0x42>
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e7fe      	b.n	80070e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <vPortFree+0x5e>
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60bb      	str	r3, [r7, #8]
 8007100:	e7fe      	b.n	8007100 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <vPortFree+0xa8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d019      	beq.n	8007144 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d115      	bne.n	8007144 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <vPortFree+0xa8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	43db      	mvns	r3, r3
 8007122:	401a      	ands	r2, r3
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007128:	f7ff f818 	bl	800615c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <vPortFree+0xac>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4413      	add	r3, r2
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <vPortFree+0xac>)
 8007138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800713a:	6938      	ldr	r0, [r7, #16]
 800713c:	f000 f86c 	bl	8007218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007140:	f7ff f81a 	bl	8006178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007144:	bf00      	nop
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20003fc8 	.word	0x20003fc8
 8007150:	20003fc0 	.word	0x20003fc0

08007154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800715a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800715e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007160:	4b27      	ldr	r3, [pc, #156]	; (8007200 <prvHeapInit+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0307 	bic.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <prvHeapInit+0xac>)
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800718c:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <prvHeapInit+0xb0>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <prvHeapInit+0xb0>)
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a0:	2208      	movs	r2, #8
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a15      	ldr	r2, [pc, #84]	; (8007208 <prvHeapInit+0xb4>)
 80071b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvHeapInit+0xb4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvHeapInit+0xb4>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <prvHeapInit+0xb8>)
 80071e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <prvHeapInit+0xbc>)
 80071ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <prvHeapInit+0xc0>)
 80071ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	200003b4 	.word	0x200003b4
 8007204:	20003fb4 	.word	0x20003fb4
 8007208:	20003fbc 	.word	0x20003fbc
 800720c:	20003fc4 	.word	0x20003fc4
 8007210:	20003fc0 	.word	0x20003fc0
 8007214:	20003fc8 	.word	0x20003fc8

08007218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007220:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <prvInsertBlockIntoFreeList+0xac>)
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e002      	b.n	800722c <prvInsertBlockIntoFreeList+0x14>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d8f7      	bhi.n	8007226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d108      	bne.n	800725a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	441a      	add	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d118      	bne.n	80072a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d00d      	beq.n	8007296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e008      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e003      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d002      	beq.n	80072b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20003fb4 	.word	0x20003fb4
 80072c8:	20003fbc 	.word	0x20003fbc

080072cc <__libc_init_array>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0d      	ldr	r6, [pc, #52]	; (8007304 <__libc_init_array+0x38>)
 80072d0:	4c0d      	ldr	r4, [pc, #52]	; (8007308 <__libc_init_array+0x3c>)
 80072d2:	1ba4      	subs	r4, r4, r6
 80072d4:	10a4      	asrs	r4, r4, #2
 80072d6:	2500      	movs	r5, #0
 80072d8:	42a5      	cmp	r5, r4
 80072da:	d109      	bne.n	80072f0 <__libc_init_array+0x24>
 80072dc:	4e0b      	ldr	r6, [pc, #44]	; (800730c <__libc_init_array+0x40>)
 80072de:	4c0c      	ldr	r4, [pc, #48]	; (8007310 <__libc_init_array+0x44>)
 80072e0:	f000 f82c 	bl	800733c <_init>
 80072e4:	1ba4      	subs	r4, r4, r6
 80072e6:	10a4      	asrs	r4, r4, #2
 80072e8:	2500      	movs	r5, #0
 80072ea:	42a5      	cmp	r5, r4
 80072ec:	d105      	bne.n	80072fa <__libc_init_array+0x2e>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f4:	4798      	blx	r3
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7ee      	b.n	80072d8 <__libc_init_array+0xc>
 80072fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fe:	4798      	blx	r3
 8007300:	3501      	adds	r5, #1
 8007302:	e7f2      	b.n	80072ea <__libc_init_array+0x1e>
 8007304:	080073f0 	.word	0x080073f0
 8007308:	080073f0 	.word	0x080073f0
 800730c:	080073f0 	.word	0x080073f0
 8007310:	080073f4 	.word	0x080073f4

08007314 <memcpy>:
 8007314:	b510      	push	{r4, lr}
 8007316:	1e43      	subs	r3, r0, #1
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	d100      	bne.n	8007320 <memcpy+0xc>
 800731e:	bd10      	pop	{r4, pc}
 8007320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007328:	e7f7      	b.n	800731a <memcpy+0x6>

0800732a <memset>:
 800732a:	4402      	add	r2, r0
 800732c:	4603      	mov	r3, r0
 800732e:	4293      	cmp	r3, r2
 8007330:	d100      	bne.n	8007334 <memset+0xa>
 8007332:	4770      	bx	lr
 8007334:	f803 1b01 	strb.w	r1, [r3], #1
 8007338:	e7f9      	b.n	800732e <memset+0x4>
	...

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
